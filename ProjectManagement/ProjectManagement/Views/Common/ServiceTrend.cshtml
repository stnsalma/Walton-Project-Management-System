
@using ProjectManagement.Models.Common
@model ProjectManagement.ViewModels.Common.ServiceTrendsViewModel
    @{
        ViewBag.Title = "Service Trend";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    <style>
        #chartMonthly {
            width: 100%;
            height: 500px;
        }
        #chartMajorProblems {
            width: 100%;
            height: 400px;
        }
        .custom-table thead tr th {
            font-size:12px;
        }
        .custom-table tbody tr td {
            font-size: 12px;
        }
    </style>
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>
    <div class="row">
@using (Html.BeginForm("ServiceTrend", "Common"))
                       {
        <div class="portlet light bordered">
            <div class="portlet-title">
                <div class="row">
                    <div class="caption font-dark">
                        <i class="icon-settings font-dark"></i>
                        <span class="caption-subject bold uppercase">Service Trends</span>
                    </div>

                </div>

            </div>
            <div class="portlet-title">
                <div class="row">
                   
                    <div class="col-lg-12">
                        <label class="col-lg-2 ">Select Model :</label>
                        
                        <div class="col-lg-4">
                            @Html.DropDownList("ModelName", new SelectList(ViewBag.Models, "ProjectName", "ProjectName"), "Please select", new { @class = "form-control modelname" })
                         </div>
                        <div class="col-lg-1">
                            <button type="submit" id="btnsearch" class="btn btn-success btn-circle">Show</button>
                        </div>
                    </div>
                    
                </div>
            </div>
            <div class="portlet-body" id="parent-table">
                
                
                    

                <table class="table table-striped table-scrollable table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>Model</th>
                            <th>Release Date</th>
                            <th>No of Days till Today</th>
                            <th>Total Handset</th>
                            <th>Activated</th>
                            <th>Un Activated</th>
                            <th>Stock Faulty</th>
                            <th>Replacement</th>
                            <th>Service Point Entry</th>
                            <th>Total Return Rate</th>

                        </tr>
                    </thead>

                    <tbody>

                        @if (Model != null)
                        {
                            
                        <tr>
                            <td class="text-center"> @Model.ModelName </td>
                            <td class="text-center">
                                @if (Model.ReleaseDate != null)
                                        {
                                    var temdate=DateTime.Parse(Model.ReleaseDate.ToString());
                                        @String.Format("{0:yyyy-MM-dd}", temdate)
                                        }

                            </td>
                            <td class="text-center"> @Model.DayCountfromRelease </td>
                            <td class="text-center"> @Model.Totalhandset </td>
                            <td class="text-center"> @Model.TotalActivated </td>
                            <td class="text-center"> @Model.UnActivated </td>
                            <td class="text-center"> @String.Format("{0}({1})", Model.StockFault, Model.StockFaultPercentage) </td>
                            <td class="text-center"> @String.Format("{0}({1})", Model.Replacement, Model.ReplacementPercentage) </td>
                            <td class="text-center"> @String.Format("{0}({1})", Model.ServicePointEntry, Model.ServicePointEntryPercentage) </td>
                            <td class="text-center"> @Model.TotalRetern </td>
                        </tr>
                            
                        }
                    </tbody>
                </table>
                <div id="chartMonthly"></div>
                <br />
                <h2>Major Problems</h2>
                <div class="row">
                    <div class="col-md-6">
                        <table class="table table-striped table-scrollable table-bordered table-hover custom-table">
                            <thead>
                                <tr>
                                    <th>Auto On Off</th>
                                    <th>Battery</th>
                                    <th>Camera</th>
                                    <th>Charging</th>
                                    <th>Dead</th>
                                    <th>Display</th>
                                    <th>Hang</th>
                                    <th>Network</th>
                                    <th>Software</th>
                                    <th>Wifi</th>

                                </tr>
                            </thead>
                            <tbody>
                                @if (Model != null)
                                {
                                    foreach (var problems in Model.MajorProblems)
                                    {
                                        <tr>
                                            <td class="text-center"> @problems.AutoOnOff </td>
                                            <td class="text-center"> @problems.Battery </td>
                                            <td class="text-center"> @problems.Camera </td>
                                            <td class="text-center"> @problems.Dead </td>
                                            <td class="text-center"> @problems.Display </td>
                                            <td class="text-center"> @problems.Hang </td>
                                            <td class="text-center"> @problems.Network </td>
                                            <td class="text-center"> @problems.Software </td>
                                            <td class="text-center"> @problems.Overheat </td>
                                            <td class="text-center"> @problems.Wifi </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <div id="chartMajorProblems"></div>
                    </div>
                </div>
                


            </div>
            
         </div>
}
    </div>
    <script>
        $(document).ready(function () {
             var selectedModel = $('.modelname').children("option:selected").val();
                if (selectedModel != '')
                {
                    getMonthlyChartData(selectedModel);
                    getMajorProblemChartData(selectedModel);
                }
        });

        var getMonthlyChartData = function (modelname) {
            $.ajax({
                url: '@Url.Action("GetMonthlyServiceEntry", "Common")',
                type: 'GET',
                data: { modelName: modelname },
                contentType: 'application/json',
                success: function (result) {
                    var dataset = [];
                    $.each(result, function (key, value) {
                        var item = {};
                        item.year = value.MonthYear;
                        item.service = value.ServiceCount;
                        item.color = value.Color;
                        dataset.push(item);
                    });

                    var jsondata = JSON.parse(JSON.stringify(dataset));
                    LoadMonthlyChart(jsondata);
                }
            });

        };

        var getMajorProblemChartData = function (modelname) {
            $.ajax({
                url: '@Url.Action("GetMajorProblemChartData", "Common")',
                type: 'GET',
                data: { modelName: modelname },
                contentType: 'application/json',
                success: function (result) {
                    var dataset = [
                        {
                            "issue": "AutoOnOff",
                            "count": result.AutoOnOff
                        },
                        {
                            "issue": "Battery",
                            "count": result.Battery
                        },
                        {
                            "issue": "Camera",
                            "count": result.Camera
                        },
                        {
                            "issue": "Charging",
                            "count": result.Charging
                        },
                        {
                            "issue": "Dead",
                            "count": result.Dead
                        },
                        {
                            "issue": "Display",
                            "count": result.Display
                        },
                        {
                            "issue": "Hang",
                            "count": result.Hang
                        },
                        {
                            "issue": "Network",
                            "count": result.Network
                        },
                        {
                            "issue": "Software",
                            "count": result.Software
                        },
                        {
                            "issue": "Overheat",
                            "count": result.Overheat
                        },
                        {
                            "issue": "Wifi",
                            "count": result.Wifi
                        },
                    ];

                 
                    var jsondata = JSON.parse(JSON.stringify(dataset));
                    LoadMajorProblemChart(jsondata);
                }
            });

        };
        var LoadMonthlyChart = function (data) {
            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            // Create chart instance
            var chart = am4core.create("chartMonthly", am4charts.XYChart);

            // Add data
            chart.data = data;
            //chart.data = [{
            //    "year": 2009,
            //    "service": 90,
            //    "color": chart.colors.next()
            //}];

            // Create axes
            var categoryAxis = chart.yAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "year";
            categoryAxis.numberFormatter.numberFormat = "#";
            categoryAxis.renderer.minGridDistance = 10;
            categoryAxis.renderer.inversed = false;

            var valueAxis = chart.xAxes.push(new am4charts.ValueAxis());
            valueAxis.renderer.minGridDistance = 40;

            // Create series
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.dataFields.valueX = "service";
            series.dataFields.categoryY = "year";
            series.name = "Service Count";
            series.columns.template.propertyFields.fill = "color";
            series.columns.template.tooltipText = "{categoryY}: [bold]{valueX}[/]";
            series.columns.template.stroke = am4core.color("#fff");
            series.columns.template.strokeOpacity = 0.2;
        }
        var LoadMajorProblemChart = function (data) {
            // Themes begin
            var chart = am4core.create("chartMajorProblems", am4charts.XYChart);

            // Add data
            chart.data = data;

            // Create axes

            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.dataFields.category = "issue";
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.minGridDistance = 30;

            categoryAxis.renderer.labels.template.adapter.add("dy", function (dy, target) {
                if (target.dataItem && target.dataItem.index & 2 == 2) {
                    return dy + 25;
                }
                return dy;
            });

            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            var series = chart.series.push(new am4charts.ColumnSeries());
            series.dataFields.valueY = "count";
            series.dataFields.categoryX = "issue";
            series.name = "Counts";
            series.columns.template.tooltipText = "{categoryX}: [bold]{valueY}[/]";
            series.columns.template.fillOpacity = .8;

            var columnTemplate = series.columns.template;
            columnTemplate.strokeWidth = 1;
            columnTemplate.strokeOpacity = 1;
        }
    </script>
