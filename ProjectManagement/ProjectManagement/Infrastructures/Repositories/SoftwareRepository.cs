using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using System.Data.Linq.SqlClient;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Security.Cryptography;
using System.Security.Principal;
using System.ServiceModel.Description;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web;
using System.Web.Configuration;
using System.Web.Http;
using System.Web.Mvc.Html;
using System.Web.UI.WebControls.WebParts;
using System.Web.WebPages.Scope;
using Antlr.Runtime.Misc;
using AutoMapper;
using Microsoft.Ajax.Utilities;
using Microsoft.Win32.SafeHandles;
using OfficeOpenXml.FormulaParsing.Excel.Functions.DateTime;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Logical;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Math;
using ProjectManagement.DAL;
using ProjectManagement.DAL.DbModel;
using ProjectManagement.Infrastructures.Helper;
using ProjectManagement.Infrastructures.Interfaces;
using ProjectManagement.Models;
using ProjectManagement.Models.AssignModels;
using ProjectManagement.Models.Common;
using ProjectManagement.ViewModels.Commercial;
using ProjectManagement.ViewModels.Software;
using OfficeOpenXml;
using Incentive = ProjectManagement.DAL.DbModel.Incentive;

namespace ProjectManagement.Infrastructures.Repositories
{
    public class SoftwareRepository : ISoftwareRepository
    {
        private readonly CellPhoneProjectEntities _dbEntities;
        private readonly RBSYNERGYEntities _dbRbEntites;

        // private readonly RbConnectionString _rbSynergies;
        String _rbSynergies = ConfigurationManager.ConnectionStrings["RbConnectionString"].ConnectionString;
        public SoftwareRepository()
        {
            _dbEntities = new CellPhoneProjectEntities();
            _dbEntities.Configuration.LazyLoadingEnabled = false;

            _dbRbEntites = new RBSYNERGYEntities();
        }

        #region Get Qc Incharge dashboard

        public SwQcTestCounterModel GetSwQcTestCountsForQcIncharge(long swQcUserId)
        {
            //            var getSwQcInchargeTestCounts = _dbEntities.Database.SqlQuery<SwQcTestCounterModel>(@"select 
            //            (select count(*) from SwQcHeadAssignsFromPm where Status in ('NEW')) as NewProjectCounter, 
            //            (select count(*) from (
            //            select pm.ProjectMasterId from ProjectMasters pm
            //            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId
            //            inner join SwQcAssigns si on pm.ProjectMasterId = si.ProjectMasterId
            //            where pm.ProjectMasterId=si.ProjectMasterId
            //            and si.Status not in ('QCCOMPLETED','RECOMMENDED','NEW','INACTIVE')  group by pm.ProjectMasterId )  Project)  as AssignProjectCounter, 
            //            (select count(*) from(select pm.ProjectMasterId
            //            from ProjectMasters pm
            //            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId
            //            inner join SwQcAssigns si on pm.ProjectMasterId = si.ProjectMasterId
            //            inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
            //            inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId 
            //            where pm.ProjectMasterId=sqia.ProjectMasterId and sqia.Status='QCCOMPLETED' and pma.Status not in ('INACTIVE')
            //            and not exists(select status from SwQcAssigns where  Status in ('ASSIGNED','NEW','PAUSED') and ProjectMasterId=sqia.ProjectMasterId) 
            //            group by pm.ProjectMasterId) project1) as QcDoneProjectCounter,
            //            (select count(*) from (
            //            select sqa.ProjectMasterId from SwQcAssigns sqa
            //            inner join SwQcInchargeAssigns sqia on sqia.SwQcInchargeAssignId = sqa.SwQcInchargeAssignId           
            //            where  sqa.Status in ('ASSIGNED') and sqa.SwQcUserId={0} group by sqa.ProjectMasterId )  Project)  as MyProjectCounter", swQcUserId).FirstOrDefault();
            //            return getSwQcInchargeTestCounts;

            var getSwQcInchargeTestCounts = _dbEntities.Database.SqlQuery<SwQcTestCounterModel>(@"select 
            (select count(*) from SwQcHeadAssignsFromPm where Status in ('NEW')) as NewProjectCounter, 
            (select count(*) from SwQcHeadAssignsFromPm where Status in ('ASSIGNED'))  as AssignProjectCounter, 
            (select count(*) from SwQcHeadAssignsFromPm where Status in ('QCCOMPLETED')) as QcDoneProjectCounter,
            (select count(*) from (
            select CONVERT(bigint,sqa.ProjectMasterId) as ProjectMasterId from SwQcAssignsFromQcHead sqa
            left join SwQcHeadAssignsFromPm sqia on sqia.SwQcHeadAssignId = sqa.SwQcHeadAssignId           
            where sqa.Status in ('ASSIGNED') and sqa.SwQcUserId={0} group by sqa.ProjectMasterId )  Project)  as MyProjectCounter", swQcUserId).FirstOrDefault();

            return getSwQcInchargeTestCounts;
        }
        public List<SoftwareCustomModelForDashboard> GetNewProjectStatusForInchargeDashboard()
        {
            string getNewProjectStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,
                pt.TypeName,pm.SupplierName,pm.SupplierModelName,
                ppa.AssignUserId,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.AssignUserId) 
                AssignUserName,ppa.AssignDate,ppa.ProjectManagerUserId,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId) 
                ProjectManagerUserName,
                sia.ProjectManagerAssignToQcInTime,
                sia.SwQcInchargeAssignId,sia.Status,
                sia.SwQcInchargeUserId,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=sia.SwQcInchargeUserId) 
                QcInchargeUserName

                from ProjectMasters pm
                inner join ProjectTypes pt
                on pm.ProjectTypeId=pt.ProjectTypeId
                inner join ProjectPmAssigns ppa
                on pm.ProjectMasterId=ppa.ProjectMasterId
                inner join SwQcInchargeAssigns sia
                on sia.ProjectMasterId=pm.ProjectMasterId
                where sia.Status='NEW'", 1);
            var getNewProjectStatusForInchargeDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getNewProjectStatusForInchargeDashboardQuery).ToList();
            return getNewProjectStatusForInchargeDashboard;

        }
        public List<SoftwareCustomModelForDashboard> GetAssignedProjectToQCStatusForInchargeDashboard()
        {

            //            string getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.ProjectName,pm.OrderNuber,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,pma.ProjectPmAssignId,
            //            cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,si.Status,sqia.ApproxInchargeToQcDeliveryDate, STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssigns sw on sw.SwQcUserId=cmn1.CmnUserId 
            //            and sw.ProjectMasterId=pm.ProjectMasterId and sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId and sw.Status not in ('INACTIVE')
            //            WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson 
            //            from ProjectMasters pm
            //            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId
            //            inner join SwQcAssigns si on sqia.SwQcInchargeAssignId = si.SwQcInchargeAssignId
            //            inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId  and pma.Status not in ('INACTIVE')
            //            inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId
            //            where pm.ProjectMasterId=si.ProjectMasterId
            //            and si.Status not in ('QCCOMPLETED','RECOMMENDED','NEW','INACTIVE')  group by pm.ProjectMasterId 
            //            ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
            //            sqia.SwQcInchargeAssignTime,cmn.UserFullName,
            //            sqia.ProjectManagerAssignToQcInTime,si.Status,sqia.ApproxInchargeToQcDeliveryDate,sqia.SwQcInchargeAssignId,pma.ProjectPmAssignId,pm.OrderNuber", 1);


            string getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select distinct pm.ProjectMasterId,pm.SourcingType,pm.ProjectType,pm.ProjectName,pm.SupplierName,pm.SupplierModelName,shp.SwQcHeadAssignId,shp.ProjectPmAssignId,shp.PmToQcHeadAssignTime,
            shp.SwQcHeadToQcAssignTime,shp.SoftwareVersionName,shp.SoftwareVersionNo,stp.TestPhaseName,
            shp.Status,saq.ApproxInchargeToQcDeliveryDate,cmn.UserFullName as ProjectManagerUserName
            ,STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
            and sw.ProjectMasterId=pm.ProjectMasterId and sw.SwQcHeadAssignId=saq.SwQcHeadAssignId and sw.Status not in ('INACTIVE')
            WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,shp.UpdatedDate as PausedDate 
            from
            CellPhoneProject.dbo.ProjectMasters pm  
            left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm shp on shp.ProjectMasterId=pm.ProjectMasterId 
            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead saq on shp.SwQcHeadAssignId=saq.SwQcHeadAssignId 
            left join CellPhoneProject.dbo.CmnUsers cmn on cmn.CmnUserId = shp.ProjectManagerUserId
            left join CellPhoneProject.dbo.SwQcTestPhase stp on stp.TestPhaseID = shp.TestPhaseID
            where saq.Status not in ('QCCOMPLETED','RECOMMENDED','NEW','INACTIVE') and shp.Status not in ('QCCOMPLETED','RECOMMENDED','NEW','INACTIVE')

            group by pm.ProjectMasterId,pm.ProjectName,pm.SupplierName,pm.SupplierModelName,shp.SwQcHeadAssignId,shp.ProjectPmAssignId,shp.PmToQcHeadAssignTime,shp.SwQcHeadToQcAssignTime,shp.SoftwareVersionName,shp.SoftwareVersionNo,
            shp.Status,saq.ApproxInchargeToQcDeliveryDate,saq.SwQcHeadAssignId,cmn.UserFullName,saq.SwQcUserId,stp.TestPhaseName,pm.ProjectType,shp.UpdatedDate,pm.SourcingType", 1);

            var getAssignedProjectToQCStatusForInchargeDashboard = _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();

            foreach (var project in getAssignedProjectToQCStatusForInchargeDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }
            }
            return getAssignedProjectToQCStatusForInchargeDashboard;
        }
        public List<SoftwareCustomModelForDashboard> GetQcCompletedProjectStatusForInchargeDashboard()
        {

            //            string getQcCompletedProjectStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.ProjectName,pm.OrderNuber,
            //            pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,
            //            cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,sqia.Status,  
            //            STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssigns sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId 
            //            and sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId  and sw.Status not in ('INACTIVE')
            //            WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson 
            //            from ProjectMasters pm
            //            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId
            //            inner join SwQcAssigns si on pm.ProjectMasterId = si.ProjectMasterId
            //            inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
            //            inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId 
            //            where pm.ProjectMasterId=sqia.ProjectMasterId and sqia.Status='QCCOMPLETED' and pma.Status not in ('INACTIVE')
            //            and not exists(select status from SwQcAssigns where  Status in ('ASSIGNED','NEW','PAUSED') and ProjectMasterId=sqia.ProjectMasterId) 
            //            group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,cmn.UserFullName,
            //            sqia.ProjectManagerAssignToQcInTime,sqia.Status, si.ProjectMasterId,sqia.SwQcInchargeAssignId,pm.OrderNuber", 1);
            _dbEntities.Database.CommandTimeout = 6000;
            string getQcCompletedProjectStatusForInchargeDashboardQuery = string.Format(@"
          select distinct inchargeAssign.SwQcHeadAssignId,inchargeAssign.ProjectPmAssignId,pm.ProjectMasterId,pm.ProjectName,pm.SourcingType,pm.OrderNuber,
            (select top 1 SwQcHeadToQcAssignTime from SwQcAssignsFromQcHead where SwQcHeadAssignId=qcAssign.SwQcHeadAssignId and ProjectMasterId=qcAssign.ProjectMasterId group by SwQcHeadToQcAssignTime
            order by SwQcHeadToQcAssignTime desc) as SwQcHeadToQcAssignTime,
            (select top 1 SwQcEndTime from SwQcAssignsFromQcHead where SwQcHeadAssignId=qcAssign.SwQcHeadAssignId and ProjectMasterId=qcAssign.ProjectMasterId and SwQcEndTime is not null group by SwQcEndTime
            order by SwQcFinishedTime desc) as SwQcFinishedTime,
            (select top 1 ApproxInchargeToQcDeliveryDate from SwQcAssignsFromQcHead where SwQcHeadAssignId=qcAssign.SwQcHeadAssignId and ProjectMasterId=qcAssign.ProjectMasterId group by ApproxInchargeToQcDeliveryDate
            order by ApproxInchargeToQcDeliveryDate desc) as ApproxInchargeToQcDeliveryDate,
            inchargeAssign.Status,pm.SupplierModelName,
            pm.SupplierName, inchargeAssign.SwQcFinishedTime,tp.TestPhaseName,inchargeAssign.SoftwareVersionName,inchargeAssign.SoftwareVersionNo,inchargeAssign.PmToQcHeadAssignTime,  
            STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId 
            and sw.SwQcHeadAssignId=inchargeAssign.SwQcHeadAssignId  and sw.Status not in ('INACTIVE')
            WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,cmn.UserFullName as ProjectManagerUserName

            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId and qcAssign.Status not in ('INACTIVE') and inchargeAssign.Status not in ('INACTIVE')
            left join ProjectMasters pm on inchargeAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            left join CmnUsers cmn on inchargeAssign.ProjectManagerUserId = cmn.CmnUserId 
            where  inchargeAssign.Status='QCCOMPLETED' and not exists(select status from SwQcAssignsFromQcHead where Status in ('ASSIGNED','NEW','PAUSED') and SwQcHeadAssignId=inchargeAssign.SwQcHeadAssignId) 
            group by  pm.ProjectMasterId,pm.ProjectName,pm.SourcingType,pm.OrderNuber,inchargeAssign.SwQcHeadToQcAssignTime,
            qcAssign.ApproxInchargeToQcDeliveryDate,inchargeAssign.Status,pm.SupplierModelName,
            pm.SupplierName, qcAssign.SwQcEndTime,tp.TestPhaseName,inchargeAssign.SoftwareVersionName,inchargeAssign.SoftwareVersionNo,inchargeAssign.PmToQcHeadAssignTime,inchargeAssign.SwQcHeadAssignId,
            inchargeAssign.SwQcFinishedTime,cmn.UserFullName,inchargeAssign.SwQcHeadAssignId,inchargeAssign.ProjectPmAssignId,qcAssign.SwQcHeadAssignId,qcAssign.ProjectMasterId
            order by inchargeAssign.PmToQcHeadAssignTime desc", 1);

            var getQcCompletedProjectStatusForInchargeDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getQcCompletedProjectStatusForInchargeDashboardQuery).ToList();

            foreach (var project in getQcCompletedProjectStatusForInchargeDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return getQcCompletedProjectStatusForInchargeDashboard;
        }

        //        public List<CmnUserModel> GetAssignQc(long pMasterId)
        //        {
        //            string getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select cmn1.CmnUserId,cmn1.UserFullName,cmn1.EmployeeCode  from CmnUsers cmn1 
        //
        //left join SwQcAssigns sw on sw.SwQcUserId=cmn1.CmnUserId
        //
        //left join ProjectMasters pm on sw.ProjectMasterId=pm.ProjectMasterId 
        //
        //inner join SwQcInchargeAssigns sqia on sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
        //
        //where pm.ProjectMasterId={0} and pm.ProjectMasterId=sw.ProjectMasterId
        //and sw.Status not in ('QCCOMPLETED','RECOMMENDED','NEW') ", pMasterId);

        //            var getAssignedProjectToQCStatusForInchargeDashboard =
        //                _dbEntities.Database.SqlQuery<CmnUserModel>(
        //                    getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();
        //            return getAssignedProjectToQCStatusForInchargeDashboard;

        //        }

        #endregion

        #region Get Qc dashboard
        public SwQcTestCounterModel GetSwQcTestCountsForQc(long swQcUserId)
        {
            //            var getSwQcInchargeTestCounts = _dbEntities.Database.SqlQuery<SwQcTestCounterModel>(@"select 
            //            (select count(*) from SwQcAssigns qcAssign left join SwQcInchargeAssigns inchargeAssign on qcAssign.SwQcInchargeAssignId = inchargeAssign.SwQcInchargeAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0}) as AssignProjectCounter,                
            //            (select count(*)
            //            from SwQcAssigns qcAssign left join SwQcInchargeAssigns inchargeAssign on qcAssign.SwQcInchargeAssignId = inchargeAssign.SwQcInchargeAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId where qcAssign.Status='QCCOMPLETED' and qcAssign.SwQcUserId={0}) as QcDoneProjectCounter", swQcUserId).FirstOrDefault();

            var getSwQcInchargeTestCounts = _dbEntities.Database.SqlQuery<SwQcTestCounterModel>(@"select 
            (select count(*) from SwQcAssignsFromQcHead qcAssign left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0}) as AssignProjectCounter,                
            (select count(*)
            from SwQcAssignsFromQcHead qcAssign left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId where qcAssign.Status='QCCOMPLETED' and qcAssign.SwQcUserId={0}) as QcDoneProjectCounter", swQcUserId).FirstOrDefault();


            return getSwQcInchargeTestCounts;
        }

        public List<SoftwareCustomModelForDashboard> GetAssignedProjectToQCStatusForQcDashboard(long swQcUserId)
        {
            //            string getAssignedProjectToQCStatusForQcDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,pm.ProjectType,pm.OrderNuber,qcAssign.SwQcAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,pm.SupplierModelName,pm.SupplierName, qcAssign.SwQcEndTime,tp.TestPhaseID,
            //            tp.TestPhaseName from SwQcAssigns qcAssign 
            //            left join SwQcInchargeAssigns inchargeAssign on qcAssign.SwQcInchargeAssignId = inchargeAssign.SwQcInchargeAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            //            left join TestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            //            where qcAssign.Status='ASSIGNED'  and qcAssign.SwQcUserId={0}", swQcUserId);

            //            string getAssignedProjectToQCStatusForQcDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,pm.SourcingType,pm.OrderNuber,qcAssign.SwQcHeadToQcAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,pm.SupplierModelName,
            //            pm.SupplierName, qcAssign.SwQcEndTime,tp.TestPhaseName,inchargeAssign.SoftwareVersionName,inchargeAssign.SoftwareVersionNo,inchargeAssign.PmToQcHeadAssignTime
            //            from SwQcAssignsFromQcHead qcAssign 
            //            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            //            left join SwQcTestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            //            where qcAssign.Status='ASSIGNED'  and qcAssign.SwQcUserId='{0}'
            //            order by inchargeAssign.PmToQcHeadAssignTime desc", swQcUserId);

            string getAssignedProjectToQCStatusForQcDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,pm.SourcingType,pm.OrderNuber,qcAssign.SwQcHeadToQcAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,pm.SupplierModelName,
            pm.SupplierName, qcAssign.SwQcEndTime,tp.TestPhaseName,qcAssign.SoftwareVersionName,qcAssign.SoftwareVersionNo,qcAssign.PmToQcHeadAssignTime

            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on qcAssign.TestPhaseID=tp.TestPhaseID
            where qcAssign.Status='ASSIGNED'  and qcAssign.SwQcUserId={0}
            order by inchargeAssign.PmToQcHeadAssignTime desc", swQcUserId);

            var getAssignedProjectToQcStatusForQcDashBoard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getAssignedProjectToQCStatusForQcDashboardQuery).ToList();


            foreach (var project in getAssignedProjectToQcStatusForQcDashBoard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return getAssignedProjectToQcStatusForQcDashBoard;
        }

        public List<SoftwareCustomModelForDashboard> GetQcCompletedProjectStatusForQcDashboard(long swQcUserId)
        {
            //            string getQcCompletedProjectStatusForQcDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,pm.ProjectType,pm.OrderNuber,qcAssign.SwQcAssignTime,qcAssign.SwQcEndTime,qcAssign.Status,pm.SupplierModelName,pm.SupplierName,qcAssign.SwQcEndTime,tp.TestPhaseID,tp.TestPhaseName 
            //            from SwQcAssigns qcAssign left join SwQcInchargeAssigns inchargeAssign on qcAssign.SwQcInchargeAssignId = inchargeAssign.SwQcInchargeAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId
            //			left join TestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            //			 where qcAssign.Status='QCCOMPLETED' and qcAssign.SwQcUserId={0}", swQcUserId);

            string getQcCompletedProjectStatusForQcDashboardQuery = string.Format(@"select distinct pm.ProjectMasterId,pm.ProjectName,pm.ProjectType,pm.OrderNuber,pm.SourcingType,inchargeAssign.SwQcHeadToQcAssignTime,qcAssign.Status,pm.SupplierModelName,
            pm.SupplierName,inchargeAssign.SwQcFinishedTime,inchargeAssign.SoftwareVersionName,inchargeAssign.SoftwareVersionNo,tp.TestPhaseName,inchargeAssign.PmToQcHeadAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate 

            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId
            left join SwQcTestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            where qcAssign.Status='QCCOMPLETED' and qcAssign.SwQcUserId='{0}' ", swQcUserId);

            var getQcCompletedProjectStatusForQcDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getQcCompletedProjectStatusForQcDashboardQuery).ToList();

            foreach (var project in getQcCompletedProjectStatusForQcDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }


            return getQcCompletedProjectStatusForQcDashboard;
        }

        #endregion

        #region Get Methods
        public CmnUserModel GetUserInfoByUserId(long userId)
        {
            FileManager manager = new FileManager();
            string query = string.Format(@"select * from CmnUsers where CmnUserId={0}", userId);
            var getUserInfoByUserId = _dbEntities.Database.SqlQuery<CmnUserModel>(query).FirstOrDefault();
            getUserInfoByUserId.WebServerUrl = manager.GetFile(getUserInfoByUserId.ProfilePictureUrl);
            return getUserInfoByUserId;
        }

        //public CmnUserModel GetRoleNameByUserId(long userId)
        //{
        //    FileManager manager = new FileManager();
        //    string query = string.Format(@"select RoleName from CmnUsers where CmnUserId={0}", userId);
        //    var getUserInfoByUserId = _dbEntities.Database.SqlQuery<CmnUserModel>(query).FirstOrDefault();
        //    getUserInfoByUserId.WebServerUrl = manager.GetFile(getUserInfoByUserId.ProfilePictureUrl);
        //    return getUserInfoByUserId;
        //}
        public List<CmnUserModel> GetActiveQc()
        {
            List<CmnUser> list = _dbEntities.CmnUsers.Where(x => (x.RoleName == "QC" || x.RoleName == "QCHEAD") && x.IsActive).ToList();

            List<CmnUserModel> models = GenericMapper<CmnUser, CmnUserModel>.GetDestinationList(list);
            VmSwQcSpecificationModified vmSwQc = new VmSwQcSpecificationModified();
            vmSwQc.CmnUserModels = models;
            return models;
        }

        public ProjectMasterModel GetProjectMasterModel(long projectId)
        {
            if (projectId <= 0)
                return new ProjectMasterModel();
            ProjectMaster projectMaster = _dbEntities.ProjectMasters.FirstOrDefault(i => i.ProjectMasterId == projectId);
            var config = new MapperConfiguration(c => c.CreateMap<ProjectMaster, ProjectMasterModel>());
            var map = config.CreateMapper();
            var project = map.Map<ProjectMasterModel>(projectMaster);
            var retValue = project;

            retValue.OrderNumberOrdinal = retValue.OrderNuber != null
                   ? CommonConversion.AddOrdinal((int)retValue.OrderNuber) + " Order"
                   : string.Empty;
            if (!string.IsNullOrWhiteSpace(retValue.OrderNumberOrdinal))
            {
                retValue.ProjectName = retValue.ProjectName + " (" + retValue.OrderNumberOrdinal + ")";
            }

            String tphase = String.Format(@"select tp.TestPhaseID,tp.TestPhaseName from SwQcInchargeAssigns sw left join TestPhase tp on sw.TestPhaseID=tp.TestPhaseID
                left join ProjectMasters pms on sw.ProjectMasterId=pms.ProjectMasterId
                where pms.ProjectMasterId={0}", projectId);

            List<SwQcInchargeAssignModel> swqc = GenereticRepo<SwQcInchargeAssignModel>.GetList(_dbEntities, tphase);
            foreach (var swqcaa in swqc)
            {
                retValue.TestPhaseID = swqcaa.TestPhaseID;
                retValue.TestPhaseName = swqcaa.TestPhaseName;
            }
            return retValue;
        }
        public List<TestPhaseModel> GetTestPhases()
        {
            List<TestPhase> list = _dbEntities.TestPhases.ToList();

            List<TestPhaseModel> models = GenericMapper<TestPhase, TestPhaseModel>.GetDestinationList(list);
            VmSwQcSpecificationModified vmSwQc = new VmSwQcSpecificationModified();
            vmSwQc.TestPhaseModels = models;
            return models;
        }
        public List<CmnUserModel> GetActiveHw()
        {
            List<CmnUser> list = _dbEntities.CmnUsers.Where(x => (x.RoleName == "HW" || x.RoleName == "HWHEAD") && x.IsActive).ToList();

            List<CmnUserModel> models = GenericMapper<CmnUser, CmnUserModel>.GetDestinationList(list);
            VmSwQcSpecificationModified vmSwQc = new VmSwQcSpecificationModified();
            vmSwQc.CmnUserModels = models;
            return models;
        }
        public List<SwQcBatteryAssignIssueModel> GetSwQcBatteryForDetails(long projectId)
        {
            var models = new List<SwQcBatteryAssignIssueModel>();

            //from swa in _dbEntities.SwQcAssigns
            //                join shut in _dbEntities.SwQcShutDowns on swa.ProjectMasterId equals shut.ProjectMasterId
            //                join qcIssue in _dbEntities.SwQcIssues on shut.SwQcIssueId equals qcIssue.SwQcIssueId
            //                where swa.ProjectMasterId == projectId
            //                && swa.SwQcUserId == 5

            //            select * from ProjectMasters pm left join SwQcBatteryAssignIssues sws on
            //pm.ProjectMasterId = sws.ProjectMasterId

            //left join SwQcAssigns swa on swa.SwQcAssignId=sws.SwQcAssignId

            //where swa.ProjectMasterId=1 and swa.SwQcUserId=5

            //var dbIssues1 = from pm in _dbEntities.ProjectMasters
            //                join sws in _dbEntities.SwQcBatteryAssignIssues on pm.ProjectMasterId equals sws.ProjectMasterId

            //                where
            //                    (pm.ProjectMasterId == projectId)

            var dbIssues1 = from pm in _dbEntities.ProjectMasters
                            join sws in _dbEntities.SwQcBatteryAssignIssues on pm.ProjectMasterId equals sws.ProjectMasterId
                            join swa in _dbEntities.SwQcAssigns on sws.SwQcAssignId equals swa.SwQcAssignId

                            where
                                (swa.ProjectMasterId == projectId) && swa.SwQcUserId == 5

                            select new SwQcBatteryAssignIssueModel
                            {


                                ProjectMasterId = projectId,
                                SwQcBatteryAssignIssuesId = sws.SwQcBatteryAssignIssuesId,
                                SwQcAssignId = swa.SwQcAssignId,
                                ModuleName = sws.ModuleName,
                                CheckingOption = sws.CheckingOption,
                                Time = sws.Time,
                                Charging = sws.Charging,
                                Voltage = sws.Voltage,
                                Decreased = sws.Decreased,
                                IsIssueChecked = (bool)sws.IsIssueChecked,
                                Issues = sws.Issues,
                                IssueComment = sws.IssueComment,
                                ScreenShot1FilePath = sws.ScreenShots1,
                                ScreenShot2FilePath = sws.ScreenShots2,
                                VideoUpload1FilePath = sws.VideoUpload1,
                                VideoUpload2FilePath = sws.VideoUpload2,
                                Added = swa.SwQcUserId,
                                AddedDate = DateTime.Now,
                                Updated = swa.SwQcUserId,
                                UpdatedDate = DateTime.Now



                            };

            models = dbIssues1.ToList();

            return models;
        }
        public List<SwQcAssignModel> GetProjectListForQcInchargeToQcAssign(long userId)
        {
            var fileManager = new FileManager();
            var models = new List<SwQcAssignModel>();
            if (userId >= 0)
            {
                var assignProjects = (from qcAssign in _dbEntities.SwQcAssigns
                                      join inchargeAssign in _dbEntities.SwQcInchargeAssigns on qcAssign.SwQcInchargeAssignId equals inchargeAssign.SwQcInchargeAssignId
                                      join master in _dbEntities.ProjectMasters on qcAssign.ProjectMasterId equals master.ProjectMasterId
                                      where
                                          //inchargeAssign.Status == "ASSIGNED" &&
                                      qcAssign.Status == "ASSIGNED"
                                      && qcAssign.SwQcUserId == userId
                                      select new SwQcAssignModel
                                      {
                                          ProjectMasterId = qcAssign.ProjectMasterId,
                                          ProjectName = master.ProjectName,
                                          ProjectType = master.ProjectType,
                                          SwQcAssignId = qcAssign.SwQcAssignId,
                                          SwQcUserId = userId,
                                          Status = qcAssign.Status,
                                          SwQcInchargeAssignId = qcAssign.SwQcInchargeAssignId,
                                          OrderNuber = master.OrderNuber

                                      }).ToList();
                models = assignProjects;



            }

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " -->> (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;

        }
        public List<SwQcTabColorModel> GetAllTabColorAccordingToProject(long projectId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }


            //            select * from CellPhoneProject.dbo.SwQcTabColor st

            //left join CellPhoneProject.dbo.SwQcInchargeAssigns sqia on st.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId

            //where st.ProjectMasterId=10020 and sqia.Status in ('ASSIGNED','QCCOMPLETED')

            var models = new List<SwQcTabColorModel>();
            if (projectId >= 0)
            {

                var colorTab = from tb in _dbEntities.SwQcTabColors
                               join sqia in _dbEntities.SwQcInchargeAssigns on tb.SwQcInchargeAssignId equals sqia.SwQcInchargeAssignId
                               where tb.ProjectMasterId == projectId && (sqia.Status == ("ASSIGNED") || sqia.Status == ("QCCOMPLETED")) && tb.SwQcUserId == userId
                               select new SwQcTabColorModel
                               {
                                   ProjectMasterId = projectId,
                                   QcCategoryName = tb.QcCategoryName,
                                   SwQcInchargeAssignId = sqia.SwQcInchargeAssignId,
                                   SwQcAssignId = tb.SwQcAssignId,
                                   SwQcUserId = userId

                               };

                models = colorTab.ToList();
            }

            return models;
        }

        public long GetAssignId(long projectId, long userId)
        {


            string query = string.Format(@"select qcAssign.SwQcAssignId from SwQcAssigns qcAssign left join SwQcInchargeAssigns inchargeAssign 
                             on qcAssign.SwQcInchargeAssignId = inchargeAssign.SwQcInchargeAssignId
                             left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId
                             where   
                            qcAssign.Status = 'ASSIGNED'
                            and  pm.ProjectMasterId={0} and qcAssign.SwQcUserId={1}", projectId, userId);
            long assignIdFromDB = _dbEntities.Database.SqlQuery<long>(query).FirstOrDefault();


            return assignIdFromDB;
        }

        public List<SwQcStartUpModel> GetStartUps(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStartUpModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var startUps = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && startUp.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStartUpModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcStartUpId = startUp.SwQcStartUpId,
                                       ProjectMasterId = startUp.ProjectMasterId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = startUps.ToList();

                }
                else if (projectType == "Feature")
                {
                    var startUps = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && startUp.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStartUpModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcStartUpId = startUp.SwQcStartUpId,
                                       ProjectMasterId = startUp.ProjectMasterId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = startUps.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var startUps = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && startUp.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStartUpModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcStartUpId = startUp.SwQcStartUpId,
                                       ProjectMasterId = startUp.ProjectMasterId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = startUps.ToList();

                }

                long swQcInchargeAssignsid = 0;
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                  .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);


                if (swQcInchargeAssign != null)
                {

                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        //var stFieldTest1 = _dbEntities.SwFieldTests.Where(i => !_dbEntities.SwFieldTests.Any(p2 => p2.SwFieldTestId == i.SwFieldTestId));

                        // var stFieldTest1 = _dbEntities.SwQcAssigns.Where(i => !_dbEntities.SwQcAssigns.Any(p2 => p2.SwFieldTestId == i.SwFieldTestId));
                        //  var swinchargeProjectId =
                        //  _dbEntities.SwQcInchargeAssigns.FirstOrDefault(x => x.ProjectMasterId == projectId);
                        // var swinchargeProjectId = _dbEntities.SwQcInchargeAssigns.Select(x => x.SwQcInchargeAssignId).Where();



                        var starts = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                     select new SwQcStartUpModel
                                     {
                                         ProjectType = projectType,
                                         IsSmart = (bool)qcIssue.IsSmart,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId

                                     };
                        models = starts.ToList();
                    }
                    else if (projectType == "Feature")
                    {

                        var starts = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                     select new SwQcStartUpModel
                                     {
                                         ProjectType = projectType,
                                         IsFeature = (bool)qcIssue.IsFeature,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId

                                     };
                        models = starts.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var starts = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                     select new SwQcStartUpModel
                                     {
                                         ProjectType = projectType,
                                         IsWalpad = (bool)qcIssue.IsWalpad,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = starts.ToList();
                    }


                }

            }

            return models;
        }
        public List<SwQcCallSettingModel> GetCallSettings(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCallSettingModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var callSets = from swa in _dbEntities.SwQcAssigns
                                   join callset in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals callset.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on callset.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && callset.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcCallSettingModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcCallSettingId = callset.SwQcCallSettingId,
                                       ProjectMasterId = callset.ProjectMasterId,
                                       IsIssueChecked = callset.IsIssueChecked ?? false,
                                       IssueComment = callset.IssueComment,
                                       Result = callset.Result,
                                       IssueType = callset.IssueType,
                                       Frequency = callset.Frequency,
                                       IssueReproducePath = callset.IssueReproducePath,
                                       UploadedFile = callset.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = callset.StartTime,
                                       EndTime = callset.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = callSets.ToList();

                }
                else if (projectType == "Feature")
                {
                    var callSets = from swa in _dbEntities.SwQcAssigns
                                   join callset in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals callset.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on callset.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && callset.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcCallSettingModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcCallSettingId = callset.SwQcCallSettingId,
                                       ProjectMasterId = callset.ProjectMasterId,
                                       IsIssueChecked = callset.IsIssueChecked ?? false,
                                       IssueComment = callset.IssueComment,
                                       Result = callset.Result,
                                       IssueType = callset.IssueType,
                                       Frequency = callset.Frequency,
                                       IssueReproducePath = callset.IssueReproducePath,
                                       UploadedFile = callset.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = callset.StartTime,
                                       EndTime = callset.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = callSets.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var callSets = from swa in _dbEntities.SwQcAssigns
                                   join callset in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals callset.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on callset.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && callset.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcCallSettingModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcCallSettingId = callset.SwQcCallSettingId,
                                       ProjectMasterId = callset.ProjectMasterId,
                                       IsIssueChecked = callset.IsIssueChecked ?? false,
                                       IssueComment = callset.IssueComment,
                                       Result = callset.Result,
                                       IssueType = callset.IssueType,
                                       Frequency = callset.Frequency,
                                       IssueReproducePath = callset.IssueReproducePath,
                                       UploadedFile = callset.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = callset.StartTime,
                                       EndTime = callset.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = callSets.ToList();
                }

                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var callSets = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcCallSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = callSets.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var callSets = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcCallSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = callSets.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var callSets = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcCallSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = callSets.ToList();
                    }


                }

            }

            return models;
        }

        public List<SwQcMessageModel> GetMessages(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMessageModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var messages = from swa in _dbEntities.SwQcAssigns
                                   join message in _dbEntities.SwQcMassages on swa.SwQcAssignId equals message.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on message.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && message.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcMessageModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcMassageId = message.SwQcMassageId,
                                       ProjectMasterId = message.ProjectMasterId,
                                       IsIssueChecked = message.IsIssueChecked ?? false,
                                       IssueComment = message.IssueComment,
                                       Result = message.Result,
                                       IssueType = message.IssueType,
                                       Frequency = message.Frequency,
                                       IssueReproducePath = message.IssueReproducePath,
                                       UploadedFile = message.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = message.StartTime,
                                       EndTime = message.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = messages.ToList();

                }
                else if (projectType == "Feature")
                {
                    var messages = from swa in _dbEntities.SwQcAssigns
                                   join message in _dbEntities.SwQcMassages on swa.SwQcAssignId equals message.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on message.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && message.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcMessageModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcMassageId = message.SwQcMassageId,
                                       ProjectMasterId = message.ProjectMasterId,
                                       IsIssueChecked = message.IsIssueChecked ?? false,
                                       IssueComment = message.IssueComment,
                                       Result = message.Result,
                                       IssueType = message.IssueType,
                                       Frequency = message.Frequency,
                                       IssueReproducePath = message.IssueReproducePath,
                                       UploadedFile = message.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = message.StartTime,
                                       EndTime = message.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = messages.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var messages = from swa in _dbEntities.SwQcAssigns
                                   join message in _dbEntities.SwQcMassages on swa.SwQcAssignId equals message.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on message.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && message.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcMessageModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcMassageId = message.SwQcMassageId,
                                       ProjectMasterId = message.ProjectMasterId,
                                       IsIssueChecked = message.IsIssueChecked ?? false,
                                       IssueComment = message.IssueComment,
                                       Result = message.Result,
                                       IssueType = message.IssueType,
                                       Frequency = message.Frequency,
                                       IssueReproducePath = message.IssueReproducePath,
                                       UploadedFile = message.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = message.StartTime,
                                       EndTime = message.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId

                                   };
                    models = messages.ToList();

                }

                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);


                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var messages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcMessageModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = messages.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var messages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcMessageModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = messages.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var messages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcMessageModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = messages.ToList();
                    }


                }

            }

            return models;
        }

        public List<SwQcToolsCheckModel> GetTools(long projectId, long AssignId, string tabName, string projectType)
        {

            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcToolsCheckModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var tools = from swa in _dbEntities.SwQcAssigns
                                join tool in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals tool.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on tool.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && tool.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcToolsCheckModel
                                {
                                    ProjectType = projectType,
                                    IsSmart = (bool)sii.IsSmart,
                                    SwQcToolsCheckId = tool.SwQcToolsCheckId,
                                    ProjectMasterId = tool.ProjectMasterId,
                                    IsIssueChecked = tool.IsIssueChecked ?? false,
                                    IssueComment = tool.IssueComment,
                                    Result = tool.Result,
                                    IssueType = tool.IssueType,
                                    Frequency = tool.Frequency,
                                    IssueReproducePath = tool.IssueReproducePath,
                                    UploadedFile = tool.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = tool.StartTime,
                                    EndTime = tool.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId

                                };
                    models = tools.ToList();

                }
                else if (projectType == "Feature")
                {
                    var tools = from swa in _dbEntities.SwQcAssigns
                                join tool in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals tool.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on tool.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId &&
                                 swa.SwQcUserId == userId && tool.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcToolsCheckModel
                                {
                                    ProjectType = projectType,
                                    IsFeature = (bool)sii.IsFeature,
                                    SwQcToolsCheckId = tool.SwQcToolsCheckId,
                                    ProjectMasterId = tool.ProjectMasterId,
                                    IsIssueChecked = tool.IsIssueChecked ?? false,
                                    IssueComment = tool.IssueComment,
                                    Result = tool.Result,
                                    IssueType = tool.IssueType,
                                    Frequency = tool.Frequency,
                                    IssueReproducePath = tool.IssueReproducePath,
                                    UploadedFile = tool.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = tool.StartTime,
                                    EndTime = tool.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId

                                };
                    models = tools.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var tools = from swa in _dbEntities.SwQcAssigns
                                join tool in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals tool.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on tool.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && tool.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcToolsCheckModel
                                {
                                    IsWalpad = (bool)sii.IsWalpad,
                                    ProjectType = projectType,
                                    SwQcToolsCheckId = tool.SwQcToolsCheckId,
                                    ProjectMasterId = tool.ProjectMasterId,
                                    IsIssueChecked = tool.IsIssueChecked ?? false,
                                    IssueComment = tool.IssueComment,
                                    Result = tool.Result,
                                    IssueType = tool.IssueType,
                                    Frequency = tool.Frequency,
                                    IssueReproducePath = tool.IssueReproducePath,
                                    UploadedFile = tool.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = tool.StartTime,
                                    EndTime = tool.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId

                                };
                    models = tools.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);


                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var tools = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                    select new SwQcToolsCheckModel
                                    {
                                        ProjectType = projectType,
                                        IsSmart = (bool)qcIssue.IsSmart,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId

                                    };
                        models = tools.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var tools = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                    select new SwQcToolsCheckModel
                                    {
                                        ProjectType = projectType,
                                        IsFeature = (bool)qcIssue.IsFeature,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId

                                    };
                        models = tools.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var tools = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                    select new SwQcToolsCheckModel
                                    {
                                        ProjectType = projectType,
                                        IsWalpad = (bool)qcIssue.IsWalpad,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = tools.ToList();
                    }

                }

            }

            return models;

        }

        public List<SwQcCameraModel> GetCamera(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCameraModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var cameras = from swa in _dbEntities.SwQcAssigns
                                  join camera in _dbEntities.SwQcCameras on swa.SwQcAssignId equals camera.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on camera.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && camera.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCameraModel
                                  {
                                      ProjectType = projectType,
                                      IsSmart = (bool)sii.IsSmart,
                                      SwQcCameraId = camera.SwQcCameraId,
                                      ProjectMasterId = camera.ProjectMasterId,
                                      IsIssueChecked = camera.IsIssueChecked ?? false,
                                      IssueComment = camera.IssueComment,
                                      Result = camera.Result,
                                      IssueType = camera.IssueType,
                                      Frequency = camera.Frequency,
                                      IssueReproducePath = camera.IssueReproducePath,
                                      UploadedFile = camera.UploadedFile,
                                      SwQcAssignId = AssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = camera.StartTime,
                                      EndTime = camera.EndTime,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                      SwQcUserId = userId
                                  };
                    models = cameras.ToList();

                }
                else if (projectType == "Feature")
                {
                    var cameras = from swa in _dbEntities.SwQcAssigns
                                  join camera in _dbEntities.SwQcCameras on swa.SwQcAssignId equals camera.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on camera.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId &&
                                   swa.SwQcUserId == userId && camera.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCameraModel
                                  {
                                      ProjectType = projectType,
                                      IsFeature = (bool)sii.IsFeature,
                                      SwQcCameraId = camera.SwQcCameraId,
                                      ProjectMasterId = camera.ProjectMasterId,
                                      IsIssueChecked = camera.IsIssueChecked ?? false,
                                      IssueComment = camera.IssueComment,
                                      Result = camera.Result,
                                      IssueType = camera.IssueType,
                                      Frequency = camera.Frequency,
                                      IssueReproducePath = camera.IssueReproducePath,
                                      UploadedFile = camera.UploadedFile,
                                      SwQcAssignId = AssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = camera.StartTime,
                                      EndTime = camera.EndTime,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                      SwQcUserId = userId
                                  };
                    models = cameras.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var cameras = from swa in _dbEntities.SwQcAssigns
                                  join camera in _dbEntities.SwQcCameras on swa.SwQcAssignId equals camera.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on camera.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && camera.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCameraModel
                                  {
                                      IsWalpad = (bool)sii.IsWalpad,
                                      ProjectType = projectType,
                                      SwQcCameraId = camera.SwQcCameraId,
                                      ProjectMasterId = camera.ProjectMasterId,
                                      IsIssueChecked = camera.IsIssueChecked ?? false,
                                      IssueComment = camera.IssueComment,
                                      Result = camera.Result,
                                      IssueType = camera.IssueType,
                                      Frequency = camera.Frequency,
                                      IssueReproducePath = camera.IssueReproducePath,
                                      UploadedFile = camera.UploadedFile,
                                      SwQcAssignId = AssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = camera.StartTime,
                                      EndTime = camera.EndTime,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                      SwQcUserId = userId
                                  };
                    models = cameras.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);


                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }

                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var cameras = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                      select new SwQcCameraModel
                                      {
                                          ProjectType = projectType,
                                          IsSmart = (bool)qcIssue.IsSmart,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId

                                      };
                        models = cameras.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var cameras = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                      select new SwQcCameraModel
                                      {
                                          ProjectType = projectType,
                                          IsFeature = (bool)qcIssue.IsFeature,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId

                                      };
                        models = cameras.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var cameras = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                      select new SwQcCameraModel
                                      {
                                          ProjectType = projectType,
                                          IsWalpad = (bool)qcIssue.IsWalpad,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId
                                      };
                        models = cameras.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcDisplayLoopModel> GetDisplayLoop(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayLoopModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var disloops = from swa in _dbEntities.SwQcAssigns
                                   join disloop in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals disloop.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on disloop.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && disloop.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayLoopModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcDisplayLoopId = disloop.SwQcDisplayLoopId,
                                       ProjectMasterId = disloop.ProjectMasterId,
                                       IsIssueChecked = disloop.IsIssueChecked ?? false,
                                       IssueComment = disloop.IssueComment,
                                       Result = disloop.Result,
                                       IssueType = disloop.IssueType,
                                       Frequency = disloop.Frequency,
                                       IssueReproducePath = disloop.IssueReproducePath,
                                       UploadedFile = disloop.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = disloop.StartTime,
                                       EndTime = disloop.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = disloops.ToList();

                }
                else if (projectType == "Feature")
                {
                    var disloops = from swa in _dbEntities.SwQcAssigns
                                   join disloop in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals disloop.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on disloop.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && disloop.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayLoopModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcDisplayLoopId = disloop.SwQcDisplayLoopId,
                                       ProjectMasterId = disloop.ProjectMasterId,
                                       IsIssueChecked = disloop.IsIssueChecked ?? false,
                                       IssueComment = disloop.IssueComment,
                                       Result = disloop.Result,
                                       IssueType = disloop.IssueType,
                                       Frequency = disloop.Frequency,
                                       IssueReproducePath = disloop.IssueReproducePath,
                                       UploadedFile = disloop.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = disloop.StartTime,
                                       EndTime = disloop.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = disloops.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var disloops = from swa in _dbEntities.SwQcAssigns
                                   join disloop in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals disloop.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on disloop.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && disloop.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayLoopModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcDisplayLoopId = disloop.SwQcDisplayLoopId,
                                       ProjectMasterId = disloop.ProjectMasterId,
                                       IsIssueChecked = disloop.IsIssueChecked ?? false,
                                       IssueComment = disloop.IssueComment,
                                       Result = disloop.Result,
                                       IssueType = disloop.IssueType,
                                       Frequency = disloop.Frequency,
                                       IssueReproducePath = disloop.IssueReproducePath,
                                       UploadedFile = disloop.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = disloop.StartTime,
                                       EndTime = disloop.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = disloops.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);


                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }

                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var disloops = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcDisplayLoopModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = disloops.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var disloops = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcDisplayLoopModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = disloops.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var disloops = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcDisplayLoopModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = disloops.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcDisplayModel> GetDisplay(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var displays = from swa in _dbEntities.SwQcAssigns
                                   join display in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals display.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on display.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && display.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcDisplayId = display.SwQcDisplayId,
                                       ProjectMasterId = display.ProjectMasterId,
                                       IsIssueChecked = display.IsIssueChecked ?? false,
                                       IssueComment = display.IssueComment,
                                       Result = display.Result,
                                       IssueType = display.IssueType,
                                       Frequency = display.Frequency,
                                       IssueReproducePath = display.IssueReproducePath,
                                       UploadedFile = display.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = display.StartTime,
                                       EndTime = display.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = displays.ToList();

                }
                else if (projectType == "Feature")
                {
                    var displays = from swa in _dbEntities.SwQcAssigns
                                   join display in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals display.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on display.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && display.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcDisplayId = display.SwQcDisplayId,
                                       ProjectMasterId = display.ProjectMasterId,
                                       IsIssueChecked = display.IsIssueChecked ?? false,
                                       IssueComment = display.IssueComment,
                                       Result = display.Result,
                                       IssueType = display.IssueType,
                                       Frequency = display.Frequency,
                                       IssueReproducePath = display.IssueReproducePath,
                                       UploadedFile = display.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = display.StartTime,
                                       EndTime = display.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = displays.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var displays = from swa in _dbEntities.SwQcAssigns
                                   join display in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals display.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on display.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && display.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcDisplayModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcDisplayId = display.SwQcDisplayId,
                                       ProjectMasterId = display.ProjectMasterId,
                                       IsIssueChecked = display.IsIssueChecked ?? false,
                                       IssueComment = display.IssueComment,
                                       Result = display.Result,
                                       IssueType = display.IssueType,
                                       Frequency = display.Frequency,
                                       IssueReproducePath = display.IssueReproducePath,
                                       UploadedFile = display.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = display.StartTime,
                                       EndTime = display.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = displays.ToList();

                }

                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var displays = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcDisplayModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = displays.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var displays = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcDisplayModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = displays.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var displays = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcDisplayModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = displays.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcSettingModel> GetSetting(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcSettingModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var settings = from swa in _dbEntities.SwQcAssigns
                                   join setting in _dbEntities.SwQcSettings on swa.SwQcAssignId equals setting.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on setting.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && setting.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcSettingModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcSettingsId = setting.SwQcSettingsId,
                                       ProjectMasterId = setting.ProjectMasterId,
                                       IsIssueChecked = setting.IsIssueChecked ?? false,
                                       IssueComment = setting.IssueComment,
                                       Result = setting.Result,
                                       IssueType = setting.IssueType,
                                       Frequency = setting.Frequency,
                                       IssueReproducePath = setting.IssueReproducePath,
                                       UploadedFile = setting.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = setting.StartTime,
                                       EndTime = setting.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = settings.ToList();

                }
                else if (projectType == "Feature")
                {
                    var settings = from swa in _dbEntities.SwQcAssigns
                                   join setting in _dbEntities.SwQcSettings on swa.SwQcAssignId equals setting.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on setting.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && setting.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcSettingModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcSettingsId = setting.SwQcSettingsId,
                                       ProjectMasterId = setting.ProjectMasterId,
                                       IsIssueChecked = setting.IsIssueChecked ?? false,
                                       IssueComment = setting.IssueComment,
                                       Result = setting.Result,
                                       IssueType = setting.IssueType,
                                       Frequency = setting.Frequency,
                                       IssueReproducePath = setting.IssueReproducePath,
                                       UploadedFile = setting.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = setting.StartTime,
                                       EndTime = setting.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = settings.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var settings = from swa in _dbEntities.SwQcAssigns
                                   join setting in _dbEntities.SwQcSettings on swa.SwQcAssignId equals setting.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on setting.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && setting.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcSettingModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcSettingsId = setting.SwQcSettingsId,
                                       ProjectMasterId = setting.ProjectMasterId,
                                       IsIssueChecked = setting.IsIssueChecked ?? false,
                                       IssueComment = setting.IssueComment,
                                       Result = setting.Result,
                                       IssueType = setting.IssueType,
                                       Frequency = setting.Frequency,
                                       IssueReproducePath = setting.IssueReproducePath,
                                       UploadedFile = setting.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = setting.StartTime,
                                       EndTime = setting.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = settings.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }

                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var settings = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = settings.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var settings = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = settings.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var settings = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcSettingModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = settings.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcMultimediaModel> GetMultimedia(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMultimediaModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var multis = from swa in _dbEntities.SwQcAssigns
                                 join multi in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals multi.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on multi.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && multi.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcMultimediaModel
                                 {
                                     ProjectType = projectType,
                                     IsSmart = (bool)sii.IsSmart,
                                     SwQcMultimediaId = multi.SwQcMultimediaId,
                                     ProjectMasterId = multi.ProjectMasterId,
                                     IsIssueChecked = multi.IsIssueChecked ?? false,
                                     IssueComment = multi.IssueComment,
                                     Result = multi.Result,
                                     IssueType = multi.IssueType,
                                     Frequency = multi.Frequency,
                                     IssueReproducePath = multi.IssueReproducePath,
                                     UploadedFile = multi.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = multi.StartTime,
                                     EndTime = multi.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = multis.ToList();

                }
                else if (projectType == "Feature")
                {
                    var multis = from swa in _dbEntities.SwQcAssigns
                                 join multi in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals multi.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on multi.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId &&
                                  swa.SwQcUserId == userId && multi.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcMultimediaModel
                                 {
                                     ProjectType = projectType,
                                     IsFeature = (bool)sii.IsFeature,
                                     SwQcMultimediaId = multi.SwQcMultimediaId,
                                     ProjectMasterId = multi.ProjectMasterId,
                                     IsIssueChecked = multi.IsIssueChecked ?? false,
                                     IssueComment = multi.IssueComment,
                                     Result = multi.Result,
                                     IssueType = multi.IssueType,
                                     Frequency = multi.Frequency,
                                     IssueReproducePath = multi.IssueReproducePath,
                                     UploadedFile = multi.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = multi.StartTime,
                                     EndTime = multi.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = multis.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var multis = from swa in _dbEntities.SwQcAssigns
                                 join multi in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals multi.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on multi.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId &&
                                  swa.SwQcUserId == userId && multi.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcMultimediaModel
                                 {
                                     IsWalpad = (bool)sii.IsWalpad,
                                     ProjectType = projectType,
                                     SwQcMultimediaId = multi.SwQcMultimediaId,
                                     ProjectMasterId = multi.ProjectMasterId,
                                     IsIssueChecked = multi.IsIssueChecked ?? false,
                                     IssueComment = multi.IssueComment,
                                     Result = multi.Result,
                                     IssueType = multi.IssueType,
                                     Frequency = multi.Frequency,
                                     IssueReproducePath = multi.IssueReproducePath,
                                     UploadedFile = multi.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = multi.StartTime,
                                     EndTime = multi.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = multis.ToList();

                }

                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var multis = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                     select new SwQcMultimediaModel
                                     {
                                         ProjectType = projectType,
                                         IsSmart = (bool)qcIssue.IsSmart,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = multis.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var multis = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                     select new SwQcMultimediaModel
                                     {
                                         ProjectType = projectType,
                                         IsFeature = (bool)qcIssue.IsFeature,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = multis.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var multis = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                     select new SwQcMultimediaModel
                                     {
                                         ProjectType = projectType,
                                         IsWalpad = (bool)qcIssue.IsWalpad,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = multis.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcGoogleServiceModel> GetGoogleService(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGoogleServiceModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var googles = from swa in _dbEntities.SwQcAssigns
                                  join google in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals google.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on google.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && google.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcGoogleServiceModel
                                 {
                                     ProjectType = projectType,
                                     IsSmart = (bool)sii.IsSmart,
                                     SwQcGoogleServicesId = google.SwQcGoogleServicesId,
                                     ProjectMasterId = google.ProjectMasterId,
                                     IsIssueChecked = google.IsIssueChecked ?? false,
                                     IssueComment = google.IssueComment,
                                     Result = google.Result,
                                     IssueType = google.IssueType,
                                     Frequency = google.Frequency,
                                     IssueReproducePath = google.IssueReproducePath,
                                     UploadedFile = google.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = google.StartTime,
                                     EndTime = google.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = googles.ToList();

                }
                else if (projectType == "Feature")
                {
                    var googles = from swa in _dbEntities.SwQcAssigns
                                  join google in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals google.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on google.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId &&
                                   swa.SwQcUserId == userId && google.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcGoogleServiceModel
                                  {
                                      ProjectType = projectType,
                                      IsFeature = (bool)sii.IsFeature,
                                      SwQcGoogleServicesId = google.SwQcGoogleServicesId,
                                      ProjectMasterId = google.ProjectMasterId,
                                      IsIssueChecked = google.IsIssueChecked ?? false,
                                      IssueComment = google.IssueComment,
                                      Result = google.Result,
                                      IssueType = google.IssueType,
                                      Frequency = google.Frequency,
                                      IssueReproducePath = google.IssueReproducePath,
                                      UploadedFile = google.UploadedFile,
                                      SwQcAssignId = AssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = google.StartTime,
                                      EndTime = google.EndTime,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                      SwQcUserId = userId
                                  };
                    models = googles.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var googles = from swa in _dbEntities.SwQcAssigns
                                  join google in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals google.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on google.SwQcIssueId equals sii.SwQcIssueId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId &&
                                   swa.SwQcUserId == userId && google.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcGoogleServiceModel
                                  {
                                      IsWalpad = (bool)sii.IsWalpad,
                                      ProjectType = projectType,
                                      SwQcGoogleServicesId = google.SwQcGoogleServicesId,
                                      ProjectMasterId = google.ProjectMasterId,
                                      IsIssueChecked = google.IsIssueChecked ?? false,
                                      IssueComment = google.IssueComment,
                                      Result = google.Result,
                                      IssueType = google.IssueType,
                                      Frequency = google.Frequency,
                                      IssueReproducePath = google.IssueReproducePath,
                                      UploadedFile = google.UploadedFile,
                                      SwQcAssignId = AssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = google.StartTime,
                                      EndTime = google.EndTime,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                      SwQcUserId = userId
                                  };
                    models = googles.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }

                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var googles = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                      select new SwQcGoogleServiceModel
                                      {
                                          ProjectType = projectType,
                                          IsSmart = (bool)qcIssue.IsSmart,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId
                                      };
                        models = googles.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var googles = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                      select new SwQcGoogleServiceModel
                                      {
                                          ProjectType = projectType,
                                          IsFeature = (bool)qcIssue.IsFeature,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId
                                      };
                        models = googles.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var googles = from qcIssue in _dbEntities.SwQcIssues
                                      where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                      select new SwQcGoogleServiceModel
                                      {
                                          ProjectType = projectType,
                                          IsWalpad = (bool)qcIssue.IsWalpad,
                                          IsIssueChecked = false,
                                          QcCategoryName = qcIssue.QcCategoryName,
                                          SwQcIssueId = qcIssue.SwQcIssueId,
                                          SwQcDescription = qcIssue.QcDescription,
                                          SwQcAssignId = AssignId,
                                          Added = userId,
                                          SwQcInchargeAssignId = swQcInchargeAssignsid,
                                          SwQcUserId = userId
                                      };
                        models = googles.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcStorageCheckModel> GetStorageCheck(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStorageCheckModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var storages = from swa in _dbEntities.SwQcAssigns
                                   join storage in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals storage.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && storage.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStorageCheckModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcStorageCheckId = storage.SwQcStorageCheckId,
                                       ProjectMasterId = storage.ProjectMasterId,
                                       IsIssueChecked = storage.IsIssueChecked ?? false,
                                       IssueComment = storage.IssueComment,
                                       Result = storage.Result,
                                       IssueType = storage.IssueType,
                                       Frequency = storage.Frequency,
                                       IssueReproducePath = storage.IssueReproducePath,
                                       UploadedFile = storage.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = storage.StartTime,
                                       EndTime = storage.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = storages.ToList();

                }
                else if (projectType == "Feature")
                {
                    var storages = from swa in _dbEntities.SwQcAssigns
                                   join storage in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals storage.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && storage.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStorageCheckModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcStorageCheckId = storage.SwQcStorageCheckId,
                                       ProjectMasterId = storage.ProjectMasterId,
                                       IsIssueChecked = storage.IsIssueChecked ?? false,
                                       IssueComment = storage.IssueComment,
                                       Result = storage.Result,
                                       IssueType = storage.IssueType,
                                       Frequency = storage.Frequency,
                                       IssueReproducePath = storage.IssueReproducePath,
                                       UploadedFile = storage.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = storage.StartTime,
                                       EndTime = storage.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = storages.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var storages = from swa in _dbEntities.SwQcAssigns
                                   join storage in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals storage.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && storage.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStorageCheckModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcStorageCheckId = storage.SwQcStorageCheckId,
                                       ProjectMasterId = storage.ProjectMasterId,
                                       IsIssueChecked = storage.IsIssueChecked ?? false,
                                       IssueComment = storage.IssueComment,
                                       Result = storage.Result,
                                       IssueType = storage.IssueType,
                                       Frequency = storage.Frequency,
                                       IssueReproducePath = storage.IssueReproducePath,
                                       UploadedFile = storage.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = storage.StartTime,
                                       EndTime = storage.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = storages.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }


                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var storages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcStorageCheckModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = storages.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var storages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcStorageCheckModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = storages.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var storages = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcStorageCheckModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = storages.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcGameModel> GetGame(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGameModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var games = from swa in _dbEntities.SwQcAssigns
                                join game in _dbEntities.SwQcGames on swa.SwQcAssignId equals game.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on game.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && game.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcGameModel
                                {
                                    ProjectType = projectType,
                                    IsSmart = (bool)sii.IsSmart,
                                    SwQcGameId = game.SwQcGameId,
                                    ProjectMasterId = game.ProjectMasterId,
                                    IsIssueChecked = game.IsIssueChecked ?? false,
                                    IssueComment = game.IssueComment,
                                    Result = game.Result,
                                    IssueType = game.IssueType,
                                    Frequency = game.Frequency,
                                    IssueReproducePath = game.IssueReproducePath,
                                    UploadedFile = game.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = game.StartTime,
                                    EndTime = game.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = games.ToList();

                }
                else if (projectType == "Feature")
                {
                    var games = from swa in _dbEntities.SwQcAssigns
                                join game in _dbEntities.SwQcGames on swa.SwQcAssignId equals game.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on game.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId &&
                                 swa.SwQcUserId == userId && game.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcGameModel
                                {
                                    ProjectType = projectType,
                                    IsFeature = (bool)sii.IsFeature,
                                    SwQcGameId = game.SwQcGameId,
                                    ProjectMasterId = game.ProjectMasterId,
                                    IsIssueChecked = game.IsIssueChecked ?? false,
                                    IssueComment = game.IssueComment,
                                    Result = game.Result,
                                    IssueType = game.IssueType,
                                    Frequency = game.Frequency,
                                    IssueReproducePath = game.IssueReproducePath,
                                    UploadedFile = game.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = game.StartTime,
                                    EndTime = game.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = games.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var games = from swa in _dbEntities.SwQcAssigns
                                join game in _dbEntities.SwQcGames on swa.SwQcAssignId equals game.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on game.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId &&
                                 swa.SwQcUserId == userId && game.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcGameModel
                                {
                                    IsWalpad = (bool)sii.IsWalpad,
                                    ProjectType = projectType,
                                    SwQcGameId = game.SwQcGameId,
                                    ProjectMasterId = game.ProjectMasterId,
                                    IsIssueChecked = game.IsIssueChecked ?? false,
                                    IssueComment = game.IssueComment,
                                    Result = game.Result,
                                    IssueType = game.IssueType,
                                    Frequency = game.Frequency,
                                    IssueReproducePath = game.IssueReproducePath,
                                    UploadedFile = game.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = game.StartTime,
                                    EndTime = game.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = games.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }


                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var games = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                    select new SwQcGameModel
                                    {
                                        ProjectType = projectType,
                                        IsSmart = (bool)qcIssue.IsSmart,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = games.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var games = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                    select new SwQcGameModel
                                    {
                                        ProjectType = projectType,
                                        IsFeature = (bool)qcIssue.IsFeature,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = games.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var games = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                    select new SwQcGameModel
                                    {
                                        ProjectType = projectType,
                                        IsWalpad = (bool)qcIssue.IsWalpad,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = games.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcTestingAppModel> GetTestingApp(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcTestingAppModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var tests = from swa in _dbEntities.SwQcAssigns
                                join test in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals test.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on test.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && test.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcTestingAppModel
                                {
                                    ProjectType = projectType,
                                    IsSmart = (bool)sii.IsSmart,
                                    SwQcTestingAppId = test.SwQcTestingAppId,
                                    ProjectMasterId = test.ProjectMasterId,
                                    IsIssueChecked = test.IsIssueChecked ?? false,
                                    IssueComment = test.IssueComment,
                                    Result = test.Result,
                                    IssueType = test.IssueType,
                                    Frequency = test.Frequency,
                                    IssueReproducePath = test.IssueReproducePath,
                                    UploadedFile = test.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = test.StartTime,
                                    EndTime = test.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = tests.ToList();

                }
                else if (projectType == "Feature")
                {
                    var tests = from swa in _dbEntities.SwQcAssigns
                                join test in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals test.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on test.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId &&
                                 swa.SwQcUserId == userId && test.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcTestingAppModel
                                {
                                    ProjectType = projectType,
                                    IsFeature = (bool)sii.IsFeature,
                                    SwQcTestingAppId = test.SwQcTestingAppId,
                                    ProjectMasterId = test.ProjectMasterId,
                                    IsIssueChecked = test.IsIssueChecked ?? false,
                                    IssueComment = test.IssueComment,
                                    Result = test.Result,
                                    IssueType = test.IssueType,
                                    Frequency = test.Frequency,
                                    IssueReproducePath = test.IssueReproducePath,
                                    UploadedFile = test.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = test.StartTime,
                                    EndTime = test.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = tests.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var tests = from swa in _dbEntities.SwQcAssigns
                                join test in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals test.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on test.SwQcIssueId equals sii.SwQcIssueId
                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId &&
                                 swa.SwQcUserId == userId && test.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcTestingAppModel
                                {
                                    IsWalpad = (bool)sii.IsWalpad,
                                    ProjectType = projectType,
                                    SwQcTestingAppId = test.SwQcTestingAppId,
                                    ProjectMasterId = test.ProjectMasterId,
                                    IsIssueChecked = test.IsIssueChecked ?? false,
                                    IssueComment = test.IssueComment,
                                    Result = test.Result,
                                    IssueType = test.IssueType,
                                    Frequency = test.Frequency,
                                    IssueReproducePath = test.IssueReproducePath,
                                    UploadedFile = test.UploadedFile,
                                    SwQcAssignId = AssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = test.StartTime,
                                    EndTime = test.EndTime,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                    SwQcUserId = userId
                                };
                    models = tests.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }


                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var tests = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                    select new SwQcTestingAppModel
                                    {
                                        ProjectType = projectType,
                                        IsSmart = (bool)qcIssue.IsSmart,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = tests.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var tests = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                    select new SwQcTestingAppModel
                                    {
                                        ProjectType = projectType,
                                        IsFeature = (bool)qcIssue.IsFeature,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = tests.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var tests = from qcIssue in _dbEntities.SwQcIssues
                                    where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                    select new SwQcTestingAppModel
                                    {
                                        ProjectType = projectType,
                                        IsWalpad = (bool)qcIssue.IsWalpad,
                                        IsIssueChecked = false,
                                        QcCategoryName = qcIssue.QcCategoryName,
                                        SwQcIssueId = qcIssue.SwQcIssueId,
                                        SwQcDescription = qcIssue.QcDescription,
                                        SwQcAssignId = AssignId,
                                        Added = userId,
                                        SwQcInchargeAssignId = swQcInchargeAssignsid,
                                        SwQcUserId = userId
                                    };
                        models = tests.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcFileManagerModel> GetFileManager(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcFileManagerModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var filesm = from swa in _dbEntities.SwQcAssigns
                                 join filem in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals filem.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on filem.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && filem.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcFileManagerModel
                                 {
                                     ProjectType = projectType,
                                     IsSmart = (bool)sii.IsSmart,
                                     SwQcFileManagerId = filem.SwQcFileManagerId,
                                     ProjectMasterId = filem.ProjectMasterId,
                                     IsIssueChecked = filem.IsIssueChecked ?? false,
                                     IssueComment = filem.IssueComment,
                                     Result = filem.Result,
                                     IssueType = filem.IssueType,
                                     Frequency = filem.Frequency,
                                     IssueReproducePath = filem.IssueReproducePath,
                                     UploadedFile = filem.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = filem.StartTime,
                                     EndTime = filem.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = filesm.ToList();

                }
                else if (projectType == "Feature")
                {
                    var filesm = from swa in _dbEntities.SwQcAssigns
                                 join filem in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals filem.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on filem.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId &&
                                  swa.SwQcUserId == userId && filem.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcFileManagerModel
                                 {
                                     ProjectType = projectType,
                                     IsFeature = (bool)sii.IsFeature,
                                     SwQcFileManagerId = filem.SwQcFileManagerId,
                                     ProjectMasterId = filem.ProjectMasterId,
                                     IsIssueChecked = filem.IsIssueChecked ?? false,
                                     IssueComment = filem.IssueComment,
                                     Result = filem.Result,
                                     IssueType = filem.IssueType,
                                     Frequency = filem.Frequency,
                                     IssueReproducePath = filem.IssueReproducePath,
                                     UploadedFile = filem.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = filem.StartTime,
                                     EndTime = filem.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = filesm.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var filesm = from swa in _dbEntities.SwQcAssigns
                                 join filem in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals filem.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on filem.SwQcIssueId equals sii.SwQcIssueId
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId &&
                                  swa.SwQcUserId == userId && filem.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcFileManagerModel
                                 {
                                     IsWalpad = (bool)sii.IsWalpad,
                                     ProjectType = projectType,
                                     SwQcFileManagerId = filem.SwQcFileManagerId,
                                     ProjectMasterId = filem.ProjectMasterId,
                                     IsIssueChecked = filem.IsIssueChecked ?? false,
                                     IssueComment = filem.IssueComment,
                                     Result = filem.Result,
                                     IssueType = filem.IssueType,
                                     Frequency = filem.Frequency,
                                     IssueReproducePath = filem.IssueReproducePath,
                                     UploadedFile = filem.UploadedFile,
                                     SwQcAssignId = AssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = filem.StartTime,
                                     EndTime = filem.EndTime,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                     SwQcUserId = userId
                                 };
                    models = filesm.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }


                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var filesm = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                     select new SwQcFileManagerModel
                                     {
                                         ProjectType = projectType,
                                         IsSmart = (bool)qcIssue.IsSmart,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = filesm.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var filesm = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                     select new SwQcFileManagerModel
                                     {
                                         ProjectType = projectType,
                                         IsFeature = (bool)qcIssue.IsFeature,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = filesm.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var filesm = from qcIssue in _dbEntities.SwQcIssues
                                     where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                     select new SwQcFileManagerModel
                                     {
                                         ProjectType = projectType,
                                         IsWalpad = (bool)qcIssue.IsWalpad,
                                         IsIssueChecked = false,
                                         QcCategoryName = qcIssue.QcCategoryName,
                                         SwQcIssueId = qcIssue.SwQcIssueId,
                                         SwQcDescription = qcIssue.QcDescription,
                                         SwQcAssignId = AssignId,
                                         Added = userId,
                                         SwQcInchargeAssignId = swQcInchargeAssignsid,
                                         SwQcUserId = userId
                                     };
                        models = filesm.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcConnectivityModel> GetConnectivity(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcConnectivityModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcConnectivityModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcConnectivityId = connect.SwQcConnectivityId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                else if (projectType == "Feature")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcConnectivityModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcConnectivityId = connect.SwQcConnectivityId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcConnectivityModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcConnectivityId = connect.SwQcConnectivityId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }

                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {
                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcConnectivityModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = connects.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcConnectivityModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = connects.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcConnectivityModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = connects.ToList();
                    }

                }

            }

            return models;
        }

        public List<SwQcShutDownModel> GetShutDown(long projectId, long AssignId, string tabName, string projectType)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcShutDownModel>();
            if (projectId > 0)
            {

                if (projectType == "Smart")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId && swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId
                                   && sii.IsSmart == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcShutDownModel
                                   {
                                       ProjectType = projectType,
                                       IsSmart = (bool)sii.IsSmart,
                                       SwQcShutDownId = connect.SwQcShutDownId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                else if (projectType == "Feature")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId && sii.IsFeature == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcShutDownModel
                                   {
                                       ProjectType = projectType,
                                       IsFeature = (bool)sii.IsFeature,
                                       SwQcShutDownId = connect.SwQcShutDownId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                else if (projectType == "Walpad")
                {
                    var connects = from swa in _dbEntities.SwQcAssigns
                                   join connect in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals connect.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on connect.SwQcIssueId equals sii.SwQcIssueId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId &&
                                    swa.SwQcUserId == userId && connect.SwQcAssignId == AssignId && sii.IsWalpad == true && swa.Status == "ASSIGNED"
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcShutDownModel
                                   {
                                       IsWalpad = (bool)sii.IsWalpad,
                                       ProjectType = projectType,
                                       SwQcShutDownId = connect.SwQcShutDownId,
                                       ProjectMasterId = connect.ProjectMasterId,
                                       IsIssueChecked = connect.IsIssueChecked ?? false,
                                       IssueComment = connect.IssueComment,
                                       Result = connect.Result,
                                       IssueType = connect.IssueType,
                                       Frequency = connect.Frequency,
                                       IssueReproducePath = connect.IssueReproducePath,
                                       UploadedFile = connect.UploadedFile,
                                       SwQcAssignId = AssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = connect.StartTime,
                                       EndTime = connect.EndTime,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,
                                       SwQcUserId = userId
                                   };
                    models = connects.ToList();

                }
                long swQcInchargeAssignsid = 0;
                //var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                //    .FirstOrDefault(p => p.ProjectMasterId == projectId);
                var swQcInchargeAssign = _dbEntities.SwQcInchargeAssigns
                 .FirstOrDefault(p => (p.Status == "ASSIGNED" || p.Status == "QCCOMPLETED") && p.ProjectMasterId == projectId);

                if (swQcInchargeAssign != null)
                {
                    swQcInchargeAssignsid = swQcInchargeAssign.SwQcInchargeAssignId;

                }
                if (!models.Any())
                {
                    if (projectType == "Smart")
                    {

                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsSmart == true
                                       select new SwQcShutDownModel
                                       {
                                           ProjectType = projectType,
                                           IsSmart = (bool)qcIssue.IsSmart,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = connects.ToList();
                    }
                    else if (projectType == "Feature")
                    {
                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsFeature == true
                                       select new SwQcShutDownModel
                                       {
                                           ProjectType = projectType,
                                           IsFeature = (bool)qcIssue.IsFeature,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId

                                       };
                        models = connects.ToList();
                    }
                    else if (projectType == "Walpad")
                    {
                        var connects = from qcIssue in _dbEntities.SwQcIssues
                                       where qcIssue.QcCategoryName == tabName && qcIssue.IsWalpad == true
                                       select new SwQcShutDownModel
                                       {
                                           ProjectType = projectType,
                                           IsWalpad = (bool)qcIssue.IsWalpad,
                                           IsIssueChecked = false,
                                           QcCategoryName = qcIssue.QcCategoryName,
                                           SwQcIssueId = qcIssue.SwQcIssueId,
                                           SwQcDescription = qcIssue.QcDescription,
                                           SwQcAssignId = AssignId,
                                           Added = userId,
                                           SwQcInchargeAssignId = swQcInchargeAssignsid,
                                           SwQcUserId = userId
                                       };
                        models = connects.ToList();
                    }

                }

            }

            return models;
        }

        #endregion

        #region Save Methods
        public bool SaveSwQcStartUp(List<SwQcStartUpModel> swQcStartUpModels)
        {
            if (swQcStartUpModels.Any())
            {

                var swQcStartUpModelsss = swQcStartUpModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcStartUpModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcStartUpModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcStartUpModelsss.SwQcUserId,
                    QcCategoryName = swQcStartUpModelsss.QcCategoryName,
                    SwQcAssignId = swQcStartUpModelsss.SwQcAssignId,
                    Added = swQcStartUpModelsss.Added,
                    AddedDate = swQcStartUpModelsss.AddedDate
                };

                _dbEntities.SwQcTabColors.Add(colors);


                foreach (SwQcStartUpModel model in swQcStartUpModels)
                {
                    var config = new MapperConfiguration(cfg => cfg.CreateMap<SwQcStartUpModel, SwQcStartUp>());
                    var mapper = config.CreateMapper();
                    var qcStartUp = mapper.Map<SwQcStartUp>(model);
                    var value = qcStartUp;
                    _dbEntities.SwQcStartUps.Add(value);

                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }

            }
            return false;
        }
        public bool SaveSwQcCallSetting(List<SwQcCallSettingModel> swQcCallSettingModels)
        {
            if (swQcCallSettingModels.Any())
            {
                var swQcCallSettingModelsss = swQcCallSettingModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcCallSettingModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcCallSettingModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcCallSettingModelsss.SwQcUserId,
                    QcCategoryName = swQcCallSettingModelsss.QcCategoryName,
                    SwQcAssignId = swQcCallSettingModelsss.SwQcAssignId,
                    Added = swQcCallSettingModelsss.Added,
                    AddedDate = swQcCallSettingModelsss.AddedDate
                };

                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcCallSettingModel model in swQcCallSettingModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcCallSettingModel, SwQcCallSetting>());
                    var mapper = config.CreateMapper();
                    var qcCallSet = mapper.Map<SwQcCallSetting>(model);
                    var value = qcCallSet;
                    _dbEntities.SwQcCallSettings.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcMessage(List<SwQcMessageModel> swQcMessagesModels)
        {
            if (swQcMessagesModels.Any())
            {
                var swQcMessagesModelsss = swQcMessagesModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcMessagesModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcMessagesModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcMessagesModelsss.SwQcUserId,
                    QcCategoryName = swQcMessagesModelsss.QcCategoryName,
                    SwQcAssignId = swQcMessagesModelsss.SwQcAssignId,
                    Added = swQcMessagesModelsss.Added,
                    AddedDate = swQcMessagesModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);

                foreach (SwQcMessageModel model in swQcMessagesModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcMessageModel, SwQcMassage>());
                    var mapper = config.CreateMapper();
                    var qcmessage = mapper.Map<SwQcMassage>(model);
                    var value = qcmessage;
                    _dbEntities.SwQcMassages.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcTools(List<SwQcToolsCheckModel> swQcToolsCheckModels)
        {
            if (swQcToolsCheckModels.Any())
            {
                var swQcToolsCheckModelsss = swQcToolsCheckModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcToolsCheckModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcToolsCheckModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcToolsCheckModelsss.SwQcUserId,
                    QcCategoryName = swQcToolsCheckModelsss.QcCategoryName,
                    SwQcAssignId = swQcToolsCheckModelsss.SwQcAssignId,
                    Added = swQcToolsCheckModelsss.Added,
                    AddedDate = swQcToolsCheckModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcToolsCheckModel model in swQcToolsCheckModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcToolsCheckModel, SwQcToolsCheck>());
                    var mapper = config.CreateMapper();
                    var qctools = mapper.Map<SwQcToolsCheck>(model);
                    var value = qctools;
                    _dbEntities.SwQcToolsChecks.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcCamera(List<SwQcCameraModel> swQcCameraModels)
        {
            if (swQcCameraModels.Any())
            {
                var swQcCameraModelsss = swQcCameraModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcCameraModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcCameraModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcCameraModelsss.SwQcUserId,
                    QcCategoryName = swQcCameraModelsss.QcCategoryName,
                    SwQcAssignId = swQcCameraModelsss.SwQcAssignId,
                    Added = swQcCameraModelsss.Added,
                    AddedDate = swQcCameraModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);

                foreach (var model in swQcCameraModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcCameraModel, SwQcCamera>());
                    var mapper = config.CreateMapper();
                    var qcCamera = mapper.Map<SwQcCamera>(model);
                    var value = qcCamera;
                    _dbEntities.SwQcCameras.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {
                    return false;

                }
            }
            return false;
        }
        public bool SaveSwQcDisplayLoop(List<SwQcDisplayLoopModel> swQcDisplayLoopModels)
        {
            if (swQcDisplayLoopModels.Any())
            {
                var swQcDisplayLoopModelsss = swQcDisplayLoopModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcDisplayLoopModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcDisplayLoopModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcDisplayLoopModelsss.SwQcUserId,
                    QcCategoryName = swQcDisplayLoopModelsss.QcCategoryName,
                    SwQcAssignId = swQcDisplayLoopModelsss.SwQcAssignId,
                    Added = swQcDisplayLoopModelsss.Added,
                    AddedDate = swQcDisplayLoopModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);

                foreach (SwQcDisplayLoopModel model in swQcDisplayLoopModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcDisplayLoopModel, SwQcDisplayLoop>());
                    var mapper = config.CreateMapper();
                    var qcdisloop = mapper.Map<SwQcDisplayLoop>(model);
                    var value = qcdisloop;
                    _dbEntities.SwQcDisplayLoops.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcDisplay(List<SwQcDisplayModel> swQcDisplayModels)
        {
            if (swQcDisplayModels.Any())
            {
                var swQcDisplayModelsss = swQcDisplayModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcDisplayModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcDisplayModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcDisplayModelsss.SwQcUserId,
                    QcCategoryName = swQcDisplayModelsss.QcCategoryName,
                    SwQcAssignId = swQcDisplayModelsss.SwQcAssignId,
                    Added = swQcDisplayModelsss.Added,
                    AddedDate = swQcDisplayModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);

                foreach (SwQcDisplayModel model in swQcDisplayModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcDisplayModel, SwQcDisplay>());
                    var mapper = config.CreateMapper();
                    var qcdisplay = mapper.Map<SwQcDisplay>(model);
                    var value = qcdisplay;
                    _dbEntities.SwQcDisplays.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcSetting(List<SwQcSettingModel> swQcSettingModels)
        {
            if (swQcSettingModels.Any())
            {
                var swQcSettingModelsss = swQcSettingModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcSettingModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcSettingModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcSettingModelsss.SwQcUserId,
                    QcCategoryName = swQcSettingModelsss.QcCategoryName,
                    SwQcAssignId = swQcSettingModelsss.SwQcAssignId,
                    Added = swQcSettingModelsss.Added,
                    AddedDate = swQcSettingModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);

                foreach (SwQcSettingModel model in swQcSettingModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcSettingModel, SwQcSetting>());
                    var mapper = config.CreateMapper();
                    var qcdisplay = mapper.Map<SwQcSetting>(model);
                    var value = qcdisplay;
                    _dbEntities.SwQcSettings.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcMultimedia(List<SwQcMultimediaModel> swQcMultimediaModels)
        {
            if (swQcMultimediaModels.Any())
            {
                var swQcMultimediaModelsss = swQcMultimediaModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcMultimediaModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcMultimediaModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcMultimediaModelsss.SwQcUserId,
                    QcCategoryName = swQcMultimediaModelsss.QcCategoryName,
                    SwQcAssignId = swQcMultimediaModelsss.SwQcAssignId,
                    Added = swQcMultimediaModelsss.Added,
                    AddedDate = swQcMultimediaModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcMultimediaModel model in swQcMultimediaModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcMultimediaModel, SwQcMultimedia>());
                    var mapper = config.CreateMapper();
                    var qcmulti = mapper.Map<SwQcMultimedia>(model);
                    var value = qcmulti;
                    _dbEntities.SwQcMultimedias.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcGoogleService(List<SwQcGoogleServiceModel> swQcGoogleServiceModels)
        {
            if (swQcGoogleServiceModels.Any())
            {
                var swQcGoogleServiceModelsss = swQcGoogleServiceModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcGoogleServiceModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcGoogleServiceModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcGoogleServiceModelsss.SwQcUserId,
                    QcCategoryName = swQcGoogleServiceModelsss.QcCategoryName,
                    SwQcAssignId = swQcGoogleServiceModelsss.SwQcAssignId,
                    Added = swQcGoogleServiceModelsss.Added,
                    AddedDate = swQcGoogleServiceModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcGoogleServiceModel model in swQcGoogleServiceModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcGoogleServiceModel, SwQcGoogleService>());
                    var mapper = config.CreateMapper();
                    var qcgoogle = mapper.Map<SwQcGoogleService>(model);
                    var value = qcgoogle;
                    _dbEntities.SwQcGoogleServices.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcStorageCheck(List<SwQcStorageCheckModel> swQcStorageCheckModels)
        {
            if (swQcStorageCheckModels.Any())
            {
                var swQcStorageCheckModelsss = swQcStorageCheckModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcStorageCheckModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcStorageCheckModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcStorageCheckModelsss.SwQcUserId,
                    QcCategoryName = swQcStorageCheckModelsss.QcCategoryName,
                    SwQcAssignId = swQcStorageCheckModelsss.SwQcAssignId,
                    Added = swQcStorageCheckModelsss.Added,
                    AddedDate = swQcStorageCheckModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcStorageCheckModel model in swQcStorageCheckModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcStorageCheckModel, SwQcStorageCheck>());
                    var mapper = config.CreateMapper();
                    var qcstore = mapper.Map<SwQcStorageCheck>(model);
                    var value = qcstore;
                    _dbEntities.SwQcStorageChecks.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcGame(List<SwQcGameModel> swQcGameModels)
        {

            if (swQcGameModels.Any())
            {
                var swQcGameModelsss = swQcGameModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcGameModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcGameModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcGameModelsss.SwQcUserId,
                    QcCategoryName = swQcGameModelsss.QcCategoryName,
                    SwQcAssignId = swQcGameModelsss.SwQcAssignId,
                    Added = swQcGameModelsss.Added,
                    AddedDate = swQcGameModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcGameModel model in swQcGameModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcGameModel, SwQcGame>());
                    var mapper = config.CreateMapper();
                    var qcgame = mapper.Map<SwQcGame>(model);
                    var value = qcgame;
                    _dbEntities.SwQcGames.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcTestingApp(List<SwQcTestingAppModel> swQcTestingAppModels)
        {
            if (swQcTestingAppModels.Any())
            {
                var swQcTestingAppModelsss = swQcTestingAppModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcTestingAppModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcTestingAppModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcTestingAppModelsss.SwQcUserId,
                    QcCategoryName = swQcTestingAppModelsss.QcCategoryName,
                    SwQcAssignId = swQcTestingAppModelsss.SwQcAssignId,
                    Added = swQcTestingAppModelsss.Added,
                    AddedDate = swQcTestingAppModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcTestingAppModel model in swQcTestingAppModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcTestingAppModel, SwQcTestingApp>());
                    var mapper = config.CreateMapper();
                    var qctest = mapper.Map<SwQcTestingApp>(model);
                    var value = qctest;
                    _dbEntities.SwQcTestingApps.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcFileManager(List<SwQcFileManagerModel> swQcFileManagerModels)
        {
            if (swQcFileManagerModels.Any())
            {
                var swQcFileManagerModelsss = swQcFileManagerModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcFileManagerModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcFileManagerModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcFileManagerModelsss.SwQcUserId,
                    QcCategoryName = swQcFileManagerModelsss.QcCategoryName,
                    SwQcAssignId = swQcFileManagerModelsss.SwQcAssignId,
                    Added = swQcFileManagerModelsss.Added,
                    AddedDate = swQcFileManagerModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcFileManagerModel model in swQcFileManagerModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcFileManagerModel, SwQcFileManager>());
                    var mapper = config.CreateMapper();
                    var qcfile = mapper.Map<SwQcFileManager>(model);
                    var value = qcfile;
                    _dbEntities.SwQcFileManagers.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcConnectivity(List<SwQcConnectivityModel> swQcConnectivityModels)
        {
            if (swQcConnectivityModels.Any())
            {
                var swQcConnectivityModelsss = swQcConnectivityModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcConnectivityModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcConnectivityModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcConnectivityModelsss.SwQcUserId,
                    QcCategoryName = swQcConnectivityModelsss.QcCategoryName,
                    SwQcAssignId = swQcConnectivityModelsss.SwQcAssignId,
                    Added = swQcConnectivityModelsss.Added,
                    AddedDate = swQcConnectivityModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcConnectivityModel model in swQcConnectivityModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcConnectivityModel, SwQcConnectivity>());
                    var mapper = config.CreateMapper();
                    var qcconn = mapper.Map<SwQcConnectivity>(model);
                    var value = qcconn;
                    _dbEntities.SwQcConnectivities.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool SaveSwQcShutDown(List<SwQcShutDownModel> swQcShutDownModels)
        {
            if (swQcShutDownModels.Any())
            {
                var swQcShutDownModelsss = swQcShutDownModels[0];
                SwQcTabColor colors = new SwQcTabColor
                {
                    ProjectMasterId = swQcShutDownModelsss.ProjectMasterId,
                    SwQcInchargeAssignId = swQcShutDownModelsss.SwQcInchargeAssignId,
                    SwQcUserId = swQcShutDownModelsss.SwQcUserId,
                    QcCategoryName = swQcShutDownModelsss.QcCategoryName,
                    SwQcAssignId = swQcShutDownModelsss.SwQcAssignId,
                    Added = swQcShutDownModelsss.Added,
                    AddedDate = swQcShutDownModelsss.AddedDate
                };
                _dbEntities.SwQcTabColors.Add(colors);
                foreach (SwQcShutDownModel model in swQcShutDownModels)
                {
                    var config = new MapperConfiguration(cgi => cgi.CreateMap<SwQcShutDownModel, SwQcShutDown>());
                    var mapper = config.CreateMapper();
                    var qcshut = mapper.Map<SwQcShutDown>(model);
                    var value = qcshut;
                    _dbEntities.SwQcShutDowns.Add(value);
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }

        #endregion

        #region Update Methods
        public bool UpdateSwQcStartUp(List<SwQcStartUpModel> swQcStartUpModels)
        {
            if (swQcStartUpModels.Any())
            {
                foreach (var model in swQcStartUpModels)
                {

                    var dbModel = _dbEntities.SwQcStartUps.FirstOrDefault(i => i.SwQcStartUpId == model.SwQcStartUpId);
                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.Result = model.Result;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;

                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }

                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {
                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcCallSetting(List<SwQcCallSettingModel> swQcCallSettingModels)
        {
            if (swQcCallSettingModels.Any())
            {
                foreach (SwQcCallSettingModel model in swQcCallSettingModels)
                {
                    var dbModel =
                        _dbEntities.SwQcCallSettings.FirstOrDefault(i => i.SwQcCallSettingId == model.SwQcCallSettingId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.Result = model.Result;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcMessage(List<SwQcMessageModel> swQcMessagesModels)
        {

            if (swQcMessagesModels.Any())
            {
                foreach (SwQcMessageModel model in swQcMessagesModels)
                {
                    var dbModel =
                        _dbEntities.SwQcMassages.FirstOrDefault(i => i.SwQcMassageId == model.SwQcMassageId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcTools(List<SwQcToolsCheckModel> swQcToolsCheckModels)
        {
            if (swQcToolsCheckModels.Any())
            {
                foreach (SwQcToolsCheckModel model in swQcToolsCheckModels)
                {
                    var dbModel =
                        _dbEntities.SwQcToolsChecks.FirstOrDefault(i => i.SwQcToolsCheckId == model.SwQcToolsCheckId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcCamera(List<SwQcCameraModel> swQcCameraModels)
        {
            if (swQcCameraModels.Any())
            {
                foreach (var model in swQcCameraModels)
                {
                    var dbModel = _dbEntities.SwQcCameras.FirstOrDefault(i => i.SwQcCameraId == model.SwQcCameraId);
                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcDisplayLoop(List<SwQcDisplayLoopModel> swQcDisplayLoopModels)
        {
            if (swQcDisplayLoopModels.Any())
            {
                foreach (var model in swQcDisplayLoopModels)
                {
                    var dbModel = _dbEntities.SwQcDisplayLoops.FirstOrDefault(i => i.SwQcDisplayLoopId == model.SwQcDisplayLoopId);
                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcDisplay(List<SwQcDisplayModel> swQcDisplayModels)
        {
            if (swQcDisplayModels.Any())
            {
                foreach (SwQcDisplayModel model in swQcDisplayModels)
                {
                    var dbModel =
                        _dbEntities.SwQcDisplays.FirstOrDefault(i => i.SwQcDisplayId == model.SwQcDisplayId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcSetting(List<SwQcSettingModel> swQcSettingModels)
        {
            if (swQcSettingModels.Any())
            {
                foreach (SwQcSettingModel model in swQcSettingModels)
                {
                    var dbModel =
                        _dbEntities.SwQcSettings.FirstOrDefault(i => i.SwQcSettingsId == model.SwQcSettingsId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcMultimedia(List<SwQcMultimediaModel> swQcMultimediaModels)
        {
            if (swQcMultimediaModels.Any())
            {
                foreach (SwQcMultimediaModel model in swQcMultimediaModels)
                {
                    var dbModel =
                        _dbEntities.SwQcMultimedias.FirstOrDefault(i => i.SwQcMultimediaId == model.SwQcMultimediaId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcGoogleService(List<SwQcGoogleServiceModel> swQcGoogleServiceModels)
        {
            if (swQcGoogleServiceModels.Any())
            {
                foreach (SwQcGoogleServiceModel model in swQcGoogleServiceModels)
                {
                    var dbModel =
                        _dbEntities.SwQcGoogleServices.FirstOrDefault(i => i.SwQcGoogleServicesId == model.SwQcGoogleServicesId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcStorageCheck(List<SwQcStorageCheckModel> swQcStorageCheckModels)
        {
            if (swQcStorageCheckModels.Any())
            {
                foreach (SwQcStorageCheckModel model in swQcStorageCheckModels)
                {
                    var dbModel =
                        _dbEntities.SwQcStorageChecks.FirstOrDefault(i => i.SwQcStorageCheckId == model.SwQcStorageCheckId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcGame(List<SwQcGameModel> swQcGameModels)
        {
            if (swQcGameModels.Any())
            {
                foreach (SwQcGameModel model in swQcGameModels)
                {
                    var dbModel =
                        _dbEntities.SwQcGames.FirstOrDefault(i => i.SwQcGameId == model.SwQcGameId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcTestingApp(List<SwQcTestingAppModel> swQcTestingAppModels)
        {
            if (swQcTestingAppModels.Any())
            {
                foreach (SwQcTestingAppModel model in swQcTestingAppModels)
                {
                    var dbModel =
                        _dbEntities.SwQcTestingApps.FirstOrDefault(i => i.SwQcTestingAppId == model.SwQcTestingAppId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcFileManager(List<SwQcFileManagerModel> swQcFileManagerModels)
        {
            if (swQcFileManagerModels.Any())
            {
                foreach (SwQcFileManagerModel model in swQcFileManagerModels)
                {
                    var dbModel =
                        _dbEntities.SwQcFileManagers.FirstOrDefault(i => i.SwQcFileManagerId == model.SwQcFileManagerId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcConnectivity(List<SwQcConnectivityModel> swQcConnectivityModels)
        {
            if (swQcConnectivityModels.Any())
            {
                foreach (SwQcConnectivityModel model in swQcConnectivityModels)
                {
                    var dbModel =
                        _dbEntities.SwQcConnectivities.FirstOrDefault(i => i.SwQcConnectivityId == model.SwQcConnectivityId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        public bool UpdateSwQcShutDown(List<SwQcShutDownModel> swQcShutDownModels)
        {
            if (swQcShutDownModels.Any())
            {
                foreach (SwQcShutDownModel model in swQcShutDownModels)
                {
                    var dbModel =
                        _dbEntities.SwQcShutDowns.FirstOrDefault(i => i.SwQcShutDownId == model.SwQcShutDownId);

                    if (dbModel != null)
                    {
                        dbModel.SwQcAssignId = model.SwQcAssignId;
                        dbModel.IsIssueChecked = model.IsIssueChecked;
                        dbModel.IssueComment = model.IssueComment;
                        dbModel.Result = model.Result;
                        dbModel.IssueType = model.IssueType;
                        dbModel.Frequency = model.Frequency;
                        dbModel.IssueReproducePath = model.IssueReproducePath;
                        dbModel.UploadedFile = model.UploadedFile;
                        dbModel.StartTime = model.StartTime;
                        dbModel.EndTime = model.EndTime;
                        dbModel.Updated = model.Updated;
                        dbModel.UpdatedDate = model.UpdatedDate;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;
                    }
                }
                try
                {
                    _dbEntities.SaveChanges();
                    return true;
                }
                catch (Exception)
                {

                    return false;
                }
            }
            return false;
        }
        #endregion

        #region Get Methods for Details

        public List<SwQcStartUpModel> GetStartUpsForDetails(long projectId, long swqcInchargeId)
        {

            //var startUps = from swa in _dbEntities.SwQcAssigns
            //               join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
            //               join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
            //               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
            //               // ReSharper disable once ImplicitlyCapturedClosure
            //               where swa.ProjectMasterId == projectId
            //               && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
            //               && swa.SwQcInchargeAssignId == swqcInchargeAsngId
            //               // ReSharper disable once ImplicitlyCapturedClosure
            //               select new SwQcStartUpModel
            //               {

            //                   SwQcStartUpId = startUp.SwQcStartUpId,
            //                   ProjectMasterId = projectId,
            //                   IsIssueChecked = startUp.IsIssueChecked ?? false,
            //                   IssueComment = startUp.IssueComment,
            //                   UploadedFile = startUp.UploadedFile,
            //                   SwQcAssignId = swa.SwQcAssignId,
            //                   QcCategoryName = sii.QcCategoryName,
            //                   SwQcIssueId = sii.SwQcIssueId,
            //                   SwQcDescription = sii.QcDescription,
            //                   StartTime = startUp.StartTime,
            //                   EndTime = startUp.EndTime,
            //                   UserFullName = cmn.UserFullName,
            //                   EmployeeCode = cmn.EmployeeCode,
            //                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

            //               };
            //models = startUps.ToList();

            //return models;
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStartUpModel>();
            if (projectId > 0)
            {
                var startUps = from swa in _dbEntities.SwQcAssigns
                               join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                               where swa.ProjectMasterId == projectId
                               && swa.SwQcInchargeAssignId == swqcInchargeId
                               && swa.Status == "QCCOMPLETED"
                               && swa.SwQcUserId == startUp.Added


                               select new SwQcStartUpModel
                               {

                                   SwQcStartUpId = startUp.SwQcStartUpId,
                                   ProjectMasterId = projectId,
                                   //IsIssueChecked = startUp.IsIssueChecked ?? false,
                                   //IsIssueChecked = startUp.IsIssueChecked ?? false,
                                   Result = startUp.Result,
                                   IssueType = startUp.IssueType,
                                   Frequency = startUp.Frequency,
                                   IssueReproducePath = startUp.IssueReproducePath,
                                   IssueComment = startUp.IssueComment,
                                   UploadedFile = startUp.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = startUp.StartTime,
                                   EndTime = startUp.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId
                                   //  Added =swa.SwQcUserId

                               };
                models = startUps.ToList();


            }

            return models;
        }
        public List<SwQcCallSettingModel> GetCallSettingForDetails(long projectId, long swqcInchargeId)
        {

            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCallSettingModel>();
            if (projectId > 0)
            {
                var callsets = from swa in _dbEntities.SwQcAssigns
                               join callset in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals callset.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on callset.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                               where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                              && swa.Status == "QCCOMPLETED"
                              && swa.SwQcUserId == callset.Added

                               select new SwQcCallSettingModel
                               {

                                   SwQcCallSettingId = callset.SwQcCallSettingId,
                                   ProjectMasterId = projectId,
                                   // IsIssueChecked = callset.IsIssueChecked ?? false,
                                   Result = callset.Result,
                                   IssueType = callset.IssueType,
                                   Frequency = callset.Frequency,
                                   IssueReproducePath = callset.IssueReproducePath,
                                   IssueComment = callset.IssueComment,
                                   UploadedFile = callset.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = callset.StartTime,
                                   EndTime = callset.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                               };
                models = callsets.ToList();


            }

            return models;

        }

        public List<SwQcMessageModel> GetMessageForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMessageModel>();
            if (projectId > 0)
            {
                var messages = from swa in _dbEntities.SwQcAssigns
                               join message in _dbEntities.SwQcMassages on swa.SwQcAssignId equals message.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on message.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                               where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                            && swa.Status == "QCCOMPLETED"
                            && swa.SwQcUserId == message.Added

                               select new SwQcMessageModel
                               {

                                   SwQcMassageId = message.SwQcMassageId,
                                   ProjectMasterId = projectId,
                                   //IsIssueChecked = message.IsIssueChecked ?? false,
                                   Result = message.Result,
                                   IssueType = message.IssueType,
                                   Frequency = message.Frequency,
                                   IssueReproducePath = message.IssueReproducePath,
                                   IssueComment = message.IssueComment,
                                   UploadedFile = message.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = message.StartTime,
                                   EndTime = message.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                               };
                models = messages.ToList();


            }

            return models;
        }

        public List<SwQcToolsCheckModel> GetToolsForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcToolsCheckModel>();
            if (projectId > 0)
            {
                var tools = from swa in _dbEntities.SwQcAssigns
                            join tool in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals tool.SwQcAssignId
                            join sii in _dbEntities.SwQcIssues on tool.SwQcIssueId equals sii.SwQcIssueId
                            join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                            where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                        && swa.Status == "QCCOMPLETED"
                        && swa.SwQcUserId == tool.Added

                            select new SwQcToolsCheckModel
                            {

                                SwQcToolsCheckId = tool.SwQcToolsCheckId,
                                ProjectMasterId = projectId,
                                // IsIssueChecked = tool.IsIssueChecked ?? false,
                                Result = tool.Result,
                                IssueType = tool.IssueType,
                                Frequency = tool.Frequency,
                                IssueReproducePath = tool.IssueReproducePath,
                                IssueComment = tool.IssueComment,
                                UploadedFile = tool.UploadedFile,
                                SwQcAssignId = swa.SwQcAssignId,
                                QcCategoryName = sii.QcCategoryName,
                                SwQcIssueId = sii.SwQcIssueId,
                                SwQcDescription = sii.QcDescription,
                                StartTime = tool.StartTime,
                                EndTime = tool.EndTime,
                                UserFullName = cmn.UserFullName,
                                EmployeeCode = cmn.EmployeeCode,
                                SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                            };
                models = tools.ToList();


            }

            return models;
        }

        public List<SwQcCameraModel> GetCameraForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCameraModel>();
            if (projectId > 0)
            {
                var cameras = from swa in _dbEntities.SwQcAssigns
                              join camera in _dbEntities.SwQcCameras on swa.SwQcAssignId equals camera.SwQcAssignId
                              join sii in _dbEntities.SwQcIssues on camera.SwQcIssueId equals sii.SwQcIssueId
                              join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                              where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                          && swa.Status == "QCCOMPLETED"
                          && swa.SwQcUserId == camera.Added

                              select new SwQcCameraModel
                              {

                                  SwQcCameraId = camera.SwQcCameraId,
                                  ProjectMasterId = projectId,
                                  // IsIssueChecked = camera.IsIssueChecked ?? false,
                                  Result = camera.Result,
                                  IssueType = camera.IssueType,
                                  Frequency = camera.Frequency,
                                  IssueReproducePath = camera.IssueReproducePath,
                                  IssueComment = camera.IssueComment,
                                  UploadedFile = camera.UploadedFile,
                                  SwQcAssignId = swa.SwQcAssignId,
                                  QcCategoryName = sii.QcCategoryName,
                                  SwQcIssueId = sii.SwQcIssueId,
                                  SwQcDescription = sii.QcDescription,
                                  StartTime = camera.StartTime,
                                  EndTime = camera.EndTime,
                                  UserFullName = cmn.UserFullName,
                                  EmployeeCode = cmn.EmployeeCode,
                                  SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                              };
                models = cameras.ToList();


            }

            return models;
        }

        public List<SwQcDisplayLoopModel> GetDisplayLoopForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayLoopModel>();
            if (projectId > 0)
            {
                var disloops = from swa in _dbEntities.SwQcAssigns
                               join disloop in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals disloop.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on disloop.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                               where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                           && swa.Status == "QCCOMPLETED"
                           && swa.SwQcUserId == disloop.Added

                               select new SwQcDisplayLoopModel
                               {

                                   SwQcDisplayLoopId = disloop.SwQcDisplayLoopId,
                                   ProjectMasterId = projectId,
                                   //IsIssueChecked = disloop.IsIssueChecked ?? false,
                                   Result = disloop.Result,
                                   IssueType = disloop.IssueType,
                                   Frequency = disloop.Frequency,
                                   IssueReproducePath = disloop.IssueReproducePath,
                                   IssueComment = disloop.IssueComment,
                                   UploadedFile = disloop.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = disloop.StartTime,
                                   EndTime = disloop.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                               };
                models = disloops.ToList();


            }

            return models;
        }
        public List<SwQcDisplayModel> GetDisplayForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayModel>();
            if (projectId > 0)
            {
                var diss = from swa in _dbEntities.SwQcAssigns
                           join dis in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals dis.SwQcAssignId
                           join sii in _dbEntities.SwQcIssues on dis.SwQcIssueId equals sii.SwQcIssueId
                           join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                           where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                       && swa.Status == "QCCOMPLETED"
                       && swa.SwQcUserId == dis.Added

                           select new SwQcDisplayModel
                           {

                               SwQcDisplayId = dis.SwQcDisplayId,
                               ProjectMasterId = projectId,
                               // IsIssueChecked = dis.IsIssueChecked ?? false,
                               Result = dis.Result,
                               IssueType = dis.IssueType,
                               Frequency = dis.Frequency,
                               IssueReproducePath = dis.IssueReproducePath,
                               IssueComment = dis.IssueComment,
                               UploadedFile = dis.UploadedFile,
                               SwQcAssignId = swa.SwQcAssignId,
                               QcCategoryName = sii.QcCategoryName,
                               SwQcIssueId = sii.SwQcIssueId,
                               SwQcDescription = sii.QcDescription,
                               StartTime = dis.StartTime,
                               EndTime = dis.EndTime,
                               UserFullName = cmn.UserFullName,
                               EmployeeCode = cmn.EmployeeCode,
                               SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                           };
                models = diss.ToList();


            }

            return models;
        }

        public List<SwQcSettingModel> GetSettingForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcSettingModel>();
            if (projectId > 0)
            {
                var settingss = from swa in _dbEntities.SwQcAssigns
                                join setin in _dbEntities.SwQcSettings on swa.SwQcAssignId equals setin.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on setin.SwQcIssueId equals sii.SwQcIssueId
                                join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                            && swa.Status == "QCCOMPLETED"
                            && swa.SwQcUserId == setin.Added

                                select new SwQcSettingModel
                                {

                                    SwQcSettingsId = setin.SwQcSettingsId,
                                    ProjectMasterId = projectId,
                                    //IsIssueChecked = setin.IsIssueChecked ?? false,
                                    Result = setin.Result,
                                    IssueType = setin.IssueType,
                                    Frequency = setin.Frequency,
                                    IssueReproducePath = setin.IssueReproducePath,
                                    IssueComment = setin.IssueComment,
                                    UploadedFile = setin.UploadedFile,
                                    SwQcAssignId = swa.SwQcAssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = setin.StartTime,
                                    EndTime = setin.EndTime,
                                    UserFullName = cmn.UserFullName,
                                    EmployeeCode = cmn.EmployeeCode,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                };
                models = settingss.ToList();


            }

            return models;
        }

        public List<SwQcMultimediaModel> GetMultimediaForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMultimediaModel>();
            if (projectId > 0)
            {
                var multis = from swa in _dbEntities.SwQcAssigns
                             join multi in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals multi.SwQcAssignId
                             join sii in _dbEntities.SwQcIssues on multi.SwQcIssueId equals sii.SwQcIssueId
                             join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                             where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                         && swa.Status == "QCCOMPLETED"
                         && swa.SwQcUserId == multi.Added

                             select new SwQcMultimediaModel
                             {

                                 SwQcMultimediaId = multi.SwQcMultimediaId,
                                 ProjectMasterId = projectId,
                                 // IsIssueChecked = multi.IsIssueChecked ?? false,
                                 Result = multi.Result,
                                 IssueType = multi.IssueType,
                                 Frequency = multi.Frequency,
                                 IssueReproducePath = multi.IssueReproducePath,
                                 IssueComment = multi.IssueComment,
                                 UploadedFile = multi.UploadedFile,
                                 SwQcAssignId = swa.SwQcAssignId,
                                 QcCategoryName = sii.QcCategoryName,
                                 SwQcIssueId = sii.SwQcIssueId,
                                 SwQcDescription = sii.QcDescription,
                                 StartTime = multi.StartTime,
                                 EndTime = multi.EndTime,
                                 UserFullName = cmn.UserFullName,
                                 EmployeeCode = cmn.EmployeeCode,
                                 SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                             };
                models = multis.ToList();


            }

            return models;
        }

        public List<SwQcGoogleServiceModel> GetGoogleServiceForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGoogleServiceModel>();
            if (projectId > 0)
            {
                var googles = from swa in _dbEntities.SwQcAssigns
                              join google in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals google.SwQcAssignId
                              join sii in _dbEntities.SwQcIssues on google.SwQcIssueId equals sii.SwQcIssueId
                              join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                              where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                             && swa.Status == "QCCOMPLETED"
                             && swa.SwQcUserId == google.Added

                              select new SwQcGoogleServiceModel
                              {

                                  SwQcGoogleServicesId = google.SwQcGoogleServicesId,
                                  ProjectMasterId = projectId,
                                  // IsIssueChecked = google.IsIssueChecked ?? false,
                                  Result = google.Result,
                                  IssueType = google.IssueType,
                                  Frequency = google.Frequency,
                                  IssueReproducePath = google.IssueReproducePath,
                                  IssueComment = google.IssueComment,
                                  UploadedFile = google.UploadedFile,
                                  SwQcAssignId = swa.SwQcAssignId,
                                  QcCategoryName = sii.QcCategoryName,
                                  SwQcIssueId = sii.SwQcIssueId,
                                  SwQcDescription = sii.QcDescription,
                                  StartTime = google.StartTime,
                                  EndTime = google.EndTime,
                                  UserFullName = cmn.UserFullName,
                                  EmployeeCode = cmn.EmployeeCode,
                                  SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                              };
                models = googles.ToList();


            }

            return models;
        }

        public List<SwQcStorageCheckModel> GetStorageCheckForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStorageCheckModel>();
            if (projectId > 0)
            {
                var storages = from swa in _dbEntities.SwQcAssigns
                               join storage in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals storage.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                               where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                              && swa.Status == "QCCOMPLETED"
                              && swa.SwQcUserId == storage.Added

                               select new SwQcStorageCheckModel
                               {

                                   SwQcStorageCheckId = storage.SwQcStorageCheckId,
                                   ProjectMasterId = projectId,
                                   //IsIssueChecked = storage.IsIssueChecked ?? false,
                                   Result = storage.Result,
                                   IssueType = storage.IssueType,
                                   Frequency = storage.Frequency,
                                   IssueReproducePath = storage.IssueReproducePath,
                                   IssueComment = storage.IssueComment,
                                   UploadedFile = storage.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = storage.StartTime,
                                   EndTime = storage.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                               };
                models = storages.ToList();


            }

            return models;

        }

        public List<SwQcGameModel> GetGameForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGameModel>();
            if (projectId > 0)
            {
                var storages = from swa in _dbEntities.SwQcAssigns
                               join storage in _dbEntities.SwQcGames on swa.SwQcAssignId equals storage.SwQcAssignId
                               join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
                               join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                               where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                            && swa.Status == "QCCOMPLETED"
                            && swa.SwQcUserId == storage.Added

                               select new SwQcGameModel
                               {
                                   SwQcGameId = storage.SwQcGameId,
                                   ProjectMasterId = projectId,
                                   //IsIssueChecked = storage.IsIssueChecked ?? false,
                                   Result = storage.Result,
                                   IssueType = storage.IssueType,
                                   Frequency = storage.Frequency,
                                   IssueReproducePath = storage.IssueReproducePath,
                                   IssueComment = storage.IssueComment,
                                   UploadedFile = storage.UploadedFile,
                                   SwQcAssignId = swa.SwQcAssignId,
                                   QcCategoryName = sii.QcCategoryName,
                                   SwQcIssueId = sii.SwQcIssueId,
                                   SwQcDescription = sii.QcDescription,
                                   StartTime = storage.StartTime,
                                   EndTime = storage.EndTime,
                                   UserFullName = cmn.UserFullName,
                                   EmployeeCode = cmn.EmployeeCode,
                                   SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                               };
                models = storages.ToList();


            }

            return models;
        }

        public List<SwQcTestingAppModel> GetTestingAppForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcTestingAppModel>();
            if (projectId > 0)
            {
                var tests = from swa in _dbEntities.SwQcAssigns
                            join test in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals test.SwQcAssignId
                            join sii in _dbEntities.SwQcIssues on test.SwQcIssueId equals sii.SwQcIssueId
                            join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                            where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                         && swa.Status == "QCCOMPLETED"
                         && swa.SwQcUserId == test.Added

                            select new SwQcTestingAppModel
                            {
                                SwQcTestingAppId = test.SwQcTestingAppId,
                                ProjectMasterId = projectId,
                                //IsIssueChecked = test.IsIssueChecked ?? false,
                                Result = test.Result,
                                IssueType = test.IssueType,
                                Frequency = test.Frequency,
                                IssueReproducePath = test.IssueReproducePath,
                                IssueComment = test.IssueComment,
                                UploadedFile = test.UploadedFile,
                                SwQcAssignId = swa.SwQcAssignId,
                                QcCategoryName = sii.QcCategoryName,
                                SwQcIssueId = sii.SwQcIssueId,
                                SwQcDescription = sii.QcDescription,
                                StartTime = test.StartTime,
                                EndTime = test.EndTime,
                                UserFullName = cmn.UserFullName,
                                EmployeeCode = cmn.EmployeeCode,
                                SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                            };
                models = tests.ToList();


            }

            return models;
        }

        public List<SwQcFileManagerModel> GetFileManageForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcFileManagerModel>();
            if (projectId > 0)
            {
                var filess = from swa in _dbEntities.SwQcAssigns
                             join fil in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals fil.SwQcAssignId
                             join sii in _dbEntities.SwQcIssues on fil.SwQcIssueId equals sii.SwQcIssueId
                             join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                             where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                             && swa.Status == "QCCOMPLETED"
                             && swa.SwQcUserId == fil.Added

                             select new SwQcFileManagerModel
                             {
                                 SwQcFileManagerId = fil.SwQcFileManagerId,
                                 ProjectMasterId = projectId,
                                 // IsIssueChecked = fil.IsIssueChecked ?? false,
                                 Result = fil.Result,
                                 IssueType = fil.IssueType,
                                 Frequency = fil.Frequency,
                                 IssueReproducePath = fil.IssueReproducePath,
                                 IssueComment = fil.IssueComment,
                                 UploadedFile = fil.UploadedFile,
                                 SwQcAssignId = swa.SwQcAssignId,
                                 QcCategoryName = sii.QcCategoryName,
                                 SwQcIssueId = sii.SwQcIssueId,
                                 SwQcDescription = sii.QcDescription,
                                 StartTime = fil.StartTime,
                                 EndTime = fil.EndTime,
                                 UserFullName = cmn.UserFullName,
                                 EmployeeCode = cmn.EmployeeCode,
                                 SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                             };
                models = filess.ToList();


            }

            return models;
        }

        public List<SwQcConnectivityModel> GetConnectivityForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcConnectivityModel>();
            if (projectId > 0)
            {
                var connts = from swa in _dbEntities.SwQcAssigns
                             join cont in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals cont.SwQcAssignId
                             join sii in _dbEntities.SwQcIssues on cont.SwQcIssueId equals sii.SwQcIssueId
                             join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                             where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                            && swa.Status == "QCCOMPLETED"
                            && swa.SwQcUserId == cont.Added

                             select new SwQcConnectivityModel
                             {
                                 SwQcConnectivityId = cont.SwQcConnectivityId,
                                 ProjectMasterId = projectId,
                                 //IsIssueChecked = cont.IsIssueChecked ?? false,
                                 Result = cont.Result,
                                 IssueType = cont.IssueType,
                                 Frequency = cont.Frequency,
                                 IssueReproducePath = cont.IssueReproducePath,
                                 IssueComment = cont.IssueComment,
                                 UploadedFile = cont.UploadedFile,
                                 SwQcAssignId = swa.SwQcAssignId,
                                 QcCategoryName = sii.QcCategoryName,
                                 SwQcIssueId = sii.SwQcIssueId,
                                 SwQcDescription = sii.QcDescription,
                                 StartTime = cont.StartTime,
                                 EndTime = cont.EndTime,
                                 UserFullName = cmn.UserFullName,
                                 EmployeeCode = cmn.EmployeeCode,
                                 SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                             };
                models = connts.ToList();


            }

            return models;
        }

        public List<SwQcShutDownModel> GetShutDownForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcShutDownModel>();
            if (projectId > 0)
            {
                var shuts = from swa in _dbEntities.SwQcAssigns
                            join shut in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals shut.SwQcAssignId
                            join sii in _dbEntities.SwQcIssues on shut.SwQcIssueId equals sii.SwQcIssueId
                            join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                            where swa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                            && swa.Status == "QCCOMPLETED"
                            && swa.SwQcUserId == shut.Added

                            select new SwQcShutDownModel
                            {
                                SwQcShutDownId = shut.SwQcShutDownId,
                                ProjectMasterId = projectId,
                                // IsIssueChecked = shut.IsIssueChecked ?? false,
                                Result = shut.Result,
                                IssueType = shut.IssueType,
                                Frequency = shut.Frequency,
                                IssueReproducePath = shut.IssueReproducePath,
                                IssueComment = shut.IssueComment,
                                UploadedFile = shut.UploadedFile,
                                SwQcAssignId = swa.SwQcAssignId,
                                QcCategoryName = sii.QcCategoryName,
                                SwQcIssueId = sii.SwQcIssueId,
                                SwQcDescription = sii.QcDescription,
                                StartTime = shut.StartTime,
                                EndTime = shut.EndTime,
                                UserFullName = cmn.UserFullName,
                                EmployeeCode = cmn.EmployeeCode,
                                SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                            };
                models = shuts.ToList();


            }

            return models;
        }

        public List<SwQcProjectWiseIssueViewModel> GetProjectWiseIssueViewModelsForDetails(long projectId, long swqcInchargeId)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcProjectWiseIssueViewModel>();
            if (projectId > 0)
            {

                var swQcPro = from spa in _dbEntities.SwQcProjectWiseIssues
                              join swa in _dbEntities.SwQcAssigns on spa.SwQcAssignId equals swa.SwQcAssignId
                              join sia in _dbEntities.SwQcInchargeAssigns on spa.SwQcInchargeAssignId equals sia.SwQcInchargeAssignId
                              join cmnn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmnn.CmnUserId
                              where spa.ProjectMasterId == projectId && swa.SwQcInchargeAssignId == swqcInchargeId
                              && swa.Status == "QCCOMPLETED"
                              && spa.SwQcInchargeAssignId == swa.SwQcInchargeAssignId
                              // && sia.SwQcInchargeUserId == userId
                              //&& swa.SwQcAssignId==spa.SwQcAssignId



                              select new SwQcProjectWiseIssueViewModel
                              {
                                  ProjectMasterId = projectId,
                                  IssueName = spa.IssueName,
                                  Comment = spa.Comment,
                                  RefBy = spa.RefBy,
                                  RefernceModule = spa.RefernceModule,
                                  //IsSmart = spa.IsSmart,
                                  //IsFeature = spa.IsFeature,
                                  //IsWalpad = spa.IsWalpad,
                                  Result = spa.Result,
                                  IssueType = spa.IssueType,
                                  Frequency = spa.Frequency,
                                  IssueReproducePath = spa.IssueReproducePath,
                                  SwQcAssignId = spa.SwQcAssignId,
                                  SwQcInchargeAssignId = spa.SwQcInchargeAssignId,
                                  SwQcProjectWiseIssueId = spa.SwQcProjectWiseIssueId,
                                  StartTime = spa.StartTime,
                                  EndTime = spa.EndTime,
                                  UserFullName = cmnn.UserFullName,
                                  EmployeeCode = cmnn.EmployeeCode,
                                  UploadedFile = spa.Upload
                              };
                models = swQcPro.ToList();
            }
            return models;
        }



        #endregion

        //#region Get Methods Of Details For All

        //public List<SwQcStartUpModel> AllGetStartUpsForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcStartUpModel>();
        //    if (projectId > 0)
        //    {
        //        var startUps = from swa in _dbEntities.SwQcAssigns
        //                       join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

        //                       where swa.ProjectMasterId == projectId
        //                       && swa.Status == "RECOMMENDED"
        //                       && swa.SwQcUserId == startUp.Added


        //                       select new SwQcStartUpModel
        //                       {

        //                           SwQcStartUpId = startUp.SwQcStartUpId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = startUp.IsIssueChecked ?? false,
        //                           IssueComment = startUp.IssueComment,
        //                           UploadedFile = startUp.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = startUp.StartTime,
        //                           EndTime = startUp.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId
        //                           //  Added =swa.SwQcUserId

        //                       };
        //        models = startUps.ToList();


        //    }

        //    return models;
        //}
        //public List<SwQcCallSettingModel> AllGetCallSettingForDetails(long projectId)
        //{

        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcCallSettingModel>();
        //    if (projectId > 0)
        //    {
        //        var callsets = from swa in _dbEntities.SwQcAssigns
        //                       join callset in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals callset.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on callset.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                       where swa.ProjectMasterId == projectId
        //                      && swa.Status == "RECOMMENDED"
        //                      && swa.SwQcUserId == callset.Added

        //                       select new SwQcCallSettingModel
        //                       {

        //                           SwQcCallSettingId = callset.SwQcCallSettingId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = callset.IsIssueChecked ?? false,
        //                           IssueComment = callset.IssueComment,
        //                           UploadedFile = callset.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = callset.StartTime,
        //                           EndTime = callset.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                       };
        //        models = callsets.ToList();


        //    }

        //    return models;

        //}

        //public List<SwQcMessageModel> AllGetMessageForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcMessageModel>();
        //    if (projectId > 0)
        //    {
        //        var messages = from swa in _dbEntities.SwQcAssigns
        //                       join message in _dbEntities.SwQcMassages on swa.SwQcAssignId equals message.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on message.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                       where swa.ProjectMasterId == projectId
        //                    && swa.Status == "RECOMMENDED"
        //                    && swa.SwQcUserId == message.Added

        //                       select new SwQcMessageModel
        //                       {

        //                           SwQcMassageId = message.SwQcMassageId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = message.IsIssueChecked ?? false,
        //                           IssueComment = message.IssueComment,
        //                           UploadedFile = message.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = message.StartTime,
        //                           EndTime = message.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                       };
        //        models = messages.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcToolsCheckModel> AllGetToolsForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcToolsCheckModel>();
        //    if (projectId > 0)
        //    {
        //        var tools = from swa in _dbEntities.SwQcAssigns
        //                    join tool in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals tool.SwQcAssignId
        //                    join sii in _dbEntities.SwQcIssues on tool.SwQcIssueId equals sii.SwQcIssueId
        //                    join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                    where swa.ProjectMasterId == projectId
        //                && swa.Status == "RECOMMENDED"
        //                && swa.SwQcUserId == tool.Added

        //                    select new SwQcToolsCheckModel
        //                    {

        //                        SwQcToolsCheckId = tool.SwQcToolsCheckId,
        //                        ProjectMasterId = projectId,
        //                        IsIssueChecked = tool.IsIssueChecked ?? false,
        //                        IssueComment = tool.IssueComment,
        //                        UploadedFile = tool.UploadedFile,
        //                        SwQcAssignId = swa.SwQcAssignId,
        //                        QcCategoryName = sii.QcCategoryName,
        //                        SwQcIssueId = sii.SwQcIssueId,
        //                        SwQcDescription = sii.QcDescription,
        //                        StartTime = tool.StartTime,
        //                        EndTime = tool.EndTime,
        //                        UserFullName = cmn.UserFullName,
        //                        EmployeeCode = cmn.EmployeeCode,
        //                        SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                    };
        //        models = tools.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcCameraModel> AllGetCameraForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcCameraModel>();
        //    if (projectId > 0)
        //    {
        //        var cameras = from swa in _dbEntities.SwQcAssigns
        //                      join camera in _dbEntities.SwQcCameras on swa.SwQcAssignId equals camera.SwQcAssignId
        //                      join sii in _dbEntities.SwQcIssues on camera.SwQcIssueId equals sii.SwQcIssueId
        //                      join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

        //                      where swa.ProjectMasterId == projectId
        //                  && swa.Status == "RECOMMENDED"
        //                  && swa.SwQcUserId == camera.Added

        //                      select new SwQcCameraModel
        //                      {

        //                          SwQcCameraId = camera.SwQcCameraId,
        //                          ProjectMasterId = projectId,
        //                          IsIssueChecked = camera.IsIssueChecked ?? false,
        //                          IssueComment = camera.IssueComment,
        //                          UploadedFile = camera.UploadedFile,
        //                          SwQcAssignId = swa.SwQcAssignId,
        //                          QcCategoryName = sii.QcCategoryName,
        //                          SwQcIssueId = sii.SwQcIssueId,
        //                          SwQcDescription = sii.QcDescription,
        //                          StartTime = camera.StartTime,
        //                          EndTime = camera.EndTime,
        //                          UserFullName = cmn.UserFullName,
        //                          EmployeeCode = cmn.EmployeeCode,
        //                          SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                      };
        //        models = cameras.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcDisplayLoopModel> AllGetDisplayLoopForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcDisplayLoopModel>();
        //    if (projectId > 0)
        //    {
        //        var disloops = from swa in _dbEntities.SwQcAssigns
        //                       join disloop in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals disloop.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on disloop.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                       where swa.ProjectMasterId == projectId
        //                   && swa.Status == "RECOMMENDED"
        //                   && swa.SwQcUserId == disloop.Added

        //                       select new SwQcDisplayLoopModel
        //                       {

        //                           SwQcDisplayLoopId = disloop.SwQcDisplayLoopId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = disloop.IsIssueChecked ?? false,
        //                           IssueComment = disloop.IssueComment,
        //                           UploadedFile = disloop.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = disloop.StartTime,
        //                           EndTime = disloop.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                       };
        //        models = disloops.ToList();


        //    }

        //    return models;
        //}
        //public List<SwQcDisplayModel> AllGetDisplayForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcDisplayModel>();
        //    if (projectId > 0)
        //    {
        //        var diss = from swa in _dbEntities.SwQcAssigns
        //                   join dis in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals dis.SwQcAssignId
        //                   join sii in _dbEntities.SwQcIssues on dis.SwQcIssueId equals sii.SwQcIssueId
        //                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                   where swa.ProjectMasterId == projectId
        //               && swa.Status == "RECOMMENDED"
        //               && swa.SwQcUserId == dis.Added

        //                   select new SwQcDisplayModel
        //                   {

        //                       SwQcDisplayId = dis.SwQcDisplayId,
        //                       ProjectMasterId = projectId,
        //                       IsIssueChecked = dis.IsIssueChecked ?? false,
        //                       IssueComment = dis.IssueComment,
        //                       UploadedFile = dis.UploadedFile,
        //                       SwQcAssignId = swa.SwQcAssignId,
        //                       QcCategoryName = sii.QcCategoryName,
        //                       SwQcIssueId = sii.SwQcIssueId,
        //                       SwQcDescription = sii.QcDescription,
        //                       StartTime = dis.StartTime,
        //                       EndTime = dis.EndTime,
        //                       UserFullName = cmn.UserFullName,
        //                       EmployeeCode = cmn.EmployeeCode,
        //                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                   };
        //        models = diss.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcSettingModel> AllGetSettingForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcSettingModel>();
        //    if (projectId > 0)
        //    {
        //        var settingss = from swa in _dbEntities.SwQcAssigns
        //                        join setin in _dbEntities.SwQcSettings on swa.SwQcAssignId equals setin.SwQcAssignId
        //                        join sii in _dbEntities.SwQcIssues on setin.SwQcIssueId equals sii.SwQcIssueId
        //                        join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                        where swa.ProjectMasterId == projectId
        //                    && swa.Status == "RECOMMENDED"
        //                    && swa.SwQcUserId == setin.Added

        //                        select new SwQcSettingModel
        //                        {

        //                            SwQcSettingsId = setin.SwQcSettingsId,
        //                            ProjectMasterId = projectId,
        //                            IsIssueChecked = setin.IsIssueChecked ?? false,
        //                            IssueComment = setin.IssueComment,
        //                            UploadedFile = setin.UploadedFile,
        //                            SwQcAssignId = swa.SwQcAssignId,
        //                            QcCategoryName = sii.QcCategoryName,
        //                            SwQcIssueId = sii.SwQcIssueId,
        //                            SwQcDescription = sii.QcDescription,
        //                            StartTime = setin.StartTime,
        //                            EndTime = setin.EndTime,
        //                            UserFullName = cmn.UserFullName,
        //                            EmployeeCode = cmn.EmployeeCode,
        //                            SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                        };
        //        models = settingss.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcMultimediaModel> AllGetMultimediaForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcMultimediaModel>();
        //    if (projectId > 0)
        //    {
        //        var multis = from swa in _dbEntities.SwQcAssigns
        //                     join multi in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals multi.SwQcAssignId
        //                     join sii in _dbEntities.SwQcIssues on multi.SwQcIssueId equals sii.SwQcIssueId
        //                     join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                     where swa.ProjectMasterId == projectId
        //                 && swa.Status == "RECOMMENDED"
        //                 && swa.SwQcUserId == multi.Added

        //                     select new SwQcMultimediaModel
        //                     {

        //                         SwQcMultimediaId = multi.SwQcMultimediaId,
        //                         ProjectMasterId = projectId,
        //                         IsIssueChecked = multi.IsIssueChecked ?? false,
        //                         IssueComment = multi.IssueComment,
        //                         UploadedFile = multi.UploadedFile,
        //                         SwQcAssignId = swa.SwQcAssignId,
        //                         QcCategoryName = sii.QcCategoryName,
        //                         SwQcIssueId = sii.SwQcIssueId,
        //                         SwQcDescription = sii.QcDescription,
        //                         StartTime = multi.StartTime,
        //                         EndTime = multi.EndTime,
        //                         UserFullName = cmn.UserFullName,
        //                         EmployeeCode = cmn.EmployeeCode,
        //                         SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                     };
        //        models = multis.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcGoogleServiceModel> AllGetGoogleServiceForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcGoogleServiceModel>();
        //    if (projectId > 0)
        //    {
        //        var googles = from swa in _dbEntities.SwQcAssigns
        //                      join google in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals google.SwQcAssignId
        //                      join sii in _dbEntities.SwQcIssues on google.SwQcIssueId equals sii.SwQcIssueId
        //                      join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                      where swa.ProjectMasterId == projectId
        //                     && swa.Status == "RECOMMENDED"
        //                     && swa.SwQcUserId == google.Added

        //                      select new SwQcGoogleServiceModel
        //                      {

        //                          SwQcGoogleServicesId = google.SwQcGoogleServicesId,
        //                          ProjectMasterId = projectId,
        //                          IsIssueChecked = google.IsIssueChecked ?? false,
        //                          IssueComment = google.IssueComment,
        //                          UploadedFile = google.UploadedFile,
        //                          SwQcAssignId = swa.SwQcAssignId,
        //                          QcCategoryName = sii.QcCategoryName,
        //                          SwQcIssueId = sii.SwQcIssueId,
        //                          SwQcDescription = sii.QcDescription,
        //                          StartTime = google.StartTime,
        //                          EndTime = google.EndTime,
        //                          UserFullName = cmn.UserFullName,
        //                          EmployeeCode = cmn.EmployeeCode,
        //                          SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                      };
        //        models = googles.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcStorageCheckModel> AllGetStorageCheckForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcStorageCheckModel>();
        //    if (projectId > 0)
        //    {
        //        var storages = from swa in _dbEntities.SwQcAssigns
        //                       join storage in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals storage.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                       where swa.ProjectMasterId == projectId
        //                      && swa.Status == "RECOMMENDED"
        //                      && swa.SwQcUserId == storage.Added

        //                       select new SwQcStorageCheckModel
        //                       {

        //                           SwQcStorageCheckId = storage.SwQcStorageCheckId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = storage.IsIssueChecked ?? false,
        //                           IssueComment = storage.IssueComment,
        //                           UploadedFile = storage.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = storage.StartTime,
        //                           EndTime = storage.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                       };
        //        models = storages.ToList();


        //    }

        //    return models;

        //}

        //public List<SwQcGameModel> AllGetGameForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcGameModel>();
        //    if (projectId > 0)
        //    {
        //        var storages = from swa in _dbEntities.SwQcAssigns
        //                       join storage in _dbEntities.SwQcGames on swa.SwQcAssignId equals storage.SwQcAssignId
        //                       join sii in _dbEntities.SwQcIssues on storage.SwQcIssueId equals sii.SwQcIssueId
        //                       join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                       where swa.ProjectMasterId == projectId
        //                    && swa.Status == "RECOMMENDED"
        //                    && swa.SwQcUserId == storage.Added

        //                       select new SwQcGameModel
        //                       {
        //                           SwQcGameId = storage.SwQcGameId,
        //                           ProjectMasterId = projectId,
        //                           IsIssueChecked = storage.IsIssueChecked ?? false,
        //                           IssueComment = storage.IssueComment,
        //                           UploadedFile = storage.UploadedFile,
        //                           SwQcAssignId = swa.SwQcAssignId,
        //                           QcCategoryName = sii.QcCategoryName,
        //                           SwQcIssueId = sii.SwQcIssueId,
        //                           SwQcDescription = sii.QcDescription,
        //                           StartTime = storage.StartTime,
        //                           EndTime = storage.EndTime,
        //                           UserFullName = cmn.UserFullName,
        //                           EmployeeCode = cmn.EmployeeCode,
        //                           SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                       };
        //        models = storages.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcTestingAppModel> AllGetTestingAppForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcTestingAppModel>();
        //    if (projectId > 0)
        //    {
        //        var tests = from swa in _dbEntities.SwQcAssigns
        //                    join test in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals test.SwQcAssignId
        //                    join sii in _dbEntities.SwQcIssues on test.SwQcIssueId equals sii.SwQcIssueId
        //                    join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                    where swa.ProjectMasterId == projectId
        //                 && swa.Status == "RECOMMENDED"
        //                 && swa.SwQcUserId == test.Added

        //                    select new SwQcTestingAppModel
        //                    {
        //                        SwQcTestingAppId = test.SwQcTestingAppId,
        //                        ProjectMasterId = projectId,
        //                        IsIssueChecked = test.IsIssueChecked ?? false,
        //                        IssueComment = test.IssueComment,
        //                        UploadedFile = test.UploadedFile,
        //                        SwQcAssignId = swa.SwQcAssignId,
        //                        QcCategoryName = sii.QcCategoryName,
        //                        SwQcIssueId = sii.SwQcIssueId,
        //                        SwQcDescription = sii.QcDescription,
        //                        StartTime = test.StartTime,
        //                        EndTime = test.EndTime,
        //                        UserFullName = cmn.UserFullName,
        //                        EmployeeCode = cmn.EmployeeCode,
        //                        SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                    };
        //        models = tests.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcFileManagerModel> AllGetFileManageForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcFileManagerModel>();
        //    if (projectId > 0)
        //    {
        //        var filess = from swa in _dbEntities.SwQcAssigns
        //                     join fil in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals fil.SwQcAssignId
        //                     join sii in _dbEntities.SwQcIssues on fil.SwQcIssueId equals sii.SwQcIssueId
        //                     join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                     where swa.ProjectMasterId == projectId
        //                     && swa.Status == "RECOMMENDED"
        //                     && swa.SwQcUserId == fil.Added

        //                     select new SwQcFileManagerModel
        //                     {
        //                         SwQcFileManagerId = fil.SwQcFileManagerId,
        //                         ProjectMasterId = projectId,
        //                         IsIssueChecked = fil.IsIssueChecked ?? false,
        //                         IssueComment = fil.IssueComment,
        //                         UploadedFile = fil.UploadedFile,
        //                         SwQcAssignId = swa.SwQcAssignId,
        //                         QcCategoryName = sii.QcCategoryName,
        //                         SwQcIssueId = sii.SwQcIssueId,
        //                         SwQcDescription = sii.QcDescription,
        //                         StartTime = fil.StartTime,
        //                         EndTime = fil.EndTime,
        //                         UserFullName = cmn.UserFullName,
        //                         EmployeeCode = cmn.EmployeeCode,
        //                         SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                     };
        //        models = filess.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcConnectivityModel> AllGetConnectivityForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcConnectivityModel>();
        //    if (projectId > 0)
        //    {
        //        var connts = from swa in _dbEntities.SwQcAssigns
        //                     join cont in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals cont.SwQcAssignId
        //                     join sii in _dbEntities.SwQcIssues on cont.SwQcIssueId equals sii.SwQcIssueId
        //                     join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                     where swa.ProjectMasterId == projectId
        //                    && swa.Status == "RECOMMENDED"
        //                    && swa.SwQcUserId == cont.Added

        //                     select new SwQcConnectivityModel
        //                     {
        //                         SwQcConnectivityId = cont.SwQcConnectivityId,
        //                         ProjectMasterId = projectId,
        //                         IsIssueChecked = cont.IsIssueChecked ?? false,
        //                         IssueComment = cont.IssueComment,
        //                         UploadedFile = cont.UploadedFile,
        //                         SwQcAssignId = swa.SwQcAssignId,
        //                         QcCategoryName = sii.QcCategoryName,
        //                         SwQcIssueId = sii.SwQcIssueId,
        //                         SwQcDescription = sii.QcDescription,
        //                         StartTime = cont.StartTime,
        //                         EndTime = cont.EndTime,
        //                         UserFullName = cmn.UserFullName,
        //                         EmployeeCode = cmn.EmployeeCode,
        //                         SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                     };
        //        models = connts.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcShutDownModel> AllGetShutDownForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcShutDownModel>();
        //    if (projectId > 0)
        //    {
        //        var shuts = from swa in _dbEntities.SwQcAssigns
        //                    join shut in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals shut.SwQcAssignId
        //                    join sii in _dbEntities.SwQcIssues on shut.SwQcIssueId equals sii.SwQcIssueId
        //                    join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
        //                    where swa.ProjectMasterId == projectId
        //                    && swa.Status == "RECOMMENDED"
        //                    && swa.SwQcUserId == shut.Added

        //                    select new SwQcShutDownModel
        //                    {
        //                        SwQcShutDownId = shut.SwQcShutDownId,
        //                        ProjectMasterId = projectId,
        //                        IsIssueChecked = shut.IsIssueChecked ?? false,
        //                        IssueComment = shut.IssueComment,
        //                        UploadedFile = shut.UploadedFile,
        //                        SwQcAssignId = swa.SwQcAssignId,
        //                        QcCategoryName = sii.QcCategoryName,
        //                        SwQcIssueId = sii.SwQcIssueId,
        //                        SwQcDescription = sii.QcDescription,
        //                        StartTime = shut.StartTime,
        //                        EndTime = shut.EndTime,
        //                        UserFullName = cmn.UserFullName,
        //                        EmployeeCode = cmn.EmployeeCode,
        //                        SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

        //                    };
        //        models = shuts.ToList();


        //    }

        //    return models;
        //}

        //public List<SwQcProjectWiseIssueViewModel> AllGetProjectWiseIssueViewModelsForDetails(long projectId)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    var fileManager = new FileManager();
        //    var models = new List<SwQcProjectWiseIssueViewModel>();
        //    if (projectId > 0)
        //    {

        //        var swQcPro = from spa in _dbEntities.SwQcProjectWiseIssues
        //                      join swa in _dbEntities.SwQcAssigns on spa.SwQcAssignId equals swa.SwQcAssignId
        //                      join sia in _dbEntities.SwQcInchargeAssigns on spa.SwQcInchargeAssignId equals sia.SwQcInchargeAssignId
        //                      join cmnn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmnn.CmnUserId
        //                      where spa.ProjectMasterId == projectId
        //                      && swa.Status == "RECOMMENDED"
        //                      && spa.SwQcInchargeAssignId == swa.SwQcInchargeAssignId
        //                      //&& sia.SwQcInchargeUserId == userId
        //                      //&& swa.SwQcAssignId==spa.SwQcAssignId



        //                      select new SwQcProjectWiseIssueViewModel
        //                      {
        //                          ProjectMasterId = projectId,
        //                          IssueName = spa.IssueName,
        //                          Comment = spa.Comment,
        //                          RefBy = spa.RefBy,
        //                          RefernceModule = spa.RefernceModule,
        //                          //IsSmart = spa.IsSmart,
        //                          //IsFeature = spa.IsFeature,
        //                          //IsWalpad = spa.IsWalpad,
        //                          Piority = spa.Piority,
        //                          Frequency = spa.Frequency,
        //                          SwQcAssignId = spa.SwQcAssignId,
        //                          SwQcInchargeAssignId = spa.SwQcInchargeAssignId,
        //                          SwQcProjectWiseIssueId = spa.SwQcProjectWiseIssueId,
        //                          StartTime = spa.StartTime,
        //                          EndTime = spa.EndTime,
        //                          UserFullName = cmnn.UserFullName,
        //                          EmployeeCode = cmnn.EmployeeCode,
        //                          UploadedFile = spa.Upload
        //                      };
        //        models = swQcPro.ToList();
        //    }
        //    return models;
        //}



        //#endregion

        #region Re-Assign QcIncharge to QC


        public string SaveQcInchargeToQcReAssignProject(string testPhaseId, long pMasterId, string projectName, long pSwQcInId, string multiple1,
            string ApproxInchargeToQcDeliveryDate, string SwInchargeAssignToQcComment, long pPrPmAssignId, string pmDate, string softwareName, string softwareNo)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            DateTime date;
            DateTime.TryParseExact(ApproxInchargeToQcDeliveryDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
                DateTimeStyles.None, out date);

            DateTime ApproxInchargeToQcDeliveryDate1 = date;

            DateTime date1;
            DateTime.TryParseExact(pmDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
                DateTimeStyles.None, out date1);

            DateTime pmDate1 = date1;
            var multiple11 = multiple1.Split(',');

            SwQcHeadAssignsFromPm assign = null;
            if (pSwQcInId != 0)
            {
                assign =
              _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.SwQcHeadAssignId == pSwQcInId && x.Status != "RECOMMENDED");
                assign.SwQcFinishedTime = null;
                assign.Status = "ASSIGNED";
                assign.SwQcHeadToQcAssignTime = DateTime.Now;
                assign.SwQcHeadToQcAssignComment = SwInchargeAssignToQcComment;

                _dbEntities.Entry(assign).State = EntityState.Modified;
                _dbEntities.SaveChanges();

                foreach (string qcperson in multiple11)
                {

                    long qcId = Convert.ToInt64(qcperson);

                    var dbModel =
                 _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(
                     i => i.ProjectMasterId == pMasterId && i.SwQcUserId == qcId && i.SwQcHeadAssignId == pSwQcInId);

                    var proMas = _dbEntities.ProjectMasters.FirstOrDefault(i => i.ProjectMasterId == pMasterId);

                    if (dbModel != null)
                    {

                        dbModel.Status = "ASSIGNED";
                        dbModel.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                        dbModel.Updated = userId;
                        dbModel.UpdatedDate = DateTime.Now;
                        dbModel.SwQcEndTime = null;
                        dbModel.SwQcStartTime = assign.SwQcHeadToQcAssignTime;
                        dbModel.SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime;
                        dbModel.SwQcHeadToQcAssignComment = SwInchargeAssignToQcComment;
                        dbModel.Updated = userId;
                        dbModel.UpdatedDate = DateTime.Now;

                        _dbEntities.Entry(dbModel).State = EntityState.Modified;

                        ///////////////////Newlyassign to QC///////////////

                        SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                        swQcInactiveOrAssignLog.SwQcUserId = qcId;
                        swQcInactiveOrAssignLog.Status = "REASSIGN";
                        swQcInactiveOrAssignLog.AssignComment = SwInchargeAssignToQcComment;
                        swQcInactiveOrAssignLog.Added = userId;
                        swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        _dbEntities.SaveChanges();

                    }
                    else
                    {
                        SwQcAssignsFromQcHead model1 = new SwQcAssignsFromQcHead
                        {
                            ProjectMasterId = pMasterId,
                            SwQcHeadAssignId = pSwQcInId,
                            ProjectPmAssignId = pPrPmAssignId,
                            SwQcUserId = qcId,
                            OrderNumber = proMas.OrderNuber,
                            ProjectName = proMas.ProjectName,
                            ProjectType = proMas.ProjectType,
                            SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime,
                            SwQcHeadToQcAssignComment = SwInchargeAssignToQcComment,
                            SwQcStartTime = assign.SwQcHeadToQcAssignTime,
                            PmToQcHeadAssignTime = Convert.ToDateTime(pmDate),
                            ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                            PriorityFromQcHead = "HIGH",
                            Status = "ASSIGNED",
                            SoftwareVersionName = softwareName,
                            SoftwareVersionNo = Convert.ToInt32(softwareNo),
                            TestPhaseID = Convert.ToInt32(testPhaseId),
                            ReceiveDate = DateTime.Now,
                            Added = userId,
                            AddedDate = DateTime.Now,
                        };
                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model1);


                        ///////////////////Newlyassign to QC///////////////

                        SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                        swQcInactiveOrAssignLog.SwQcUserId = qcId;
                        swQcInactiveOrAssignLog.Status = "REASSIGN";
                        swQcInactiveOrAssignLog.AssignComment = SwInchargeAssignToQcComment;
                        swQcInactiveOrAssignLog.Added = userId;
                        swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        _dbEntities.SaveChanges();

                    }
                }
            }
            else if (pSwQcInId == 0)
            {
                foreach (string qcperson in multiple11)
                {

                    long qcId = Convert.ToInt64(qcperson);

                    var dbModel =
                 _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(
                     i => i.ProjectMasterId == pMasterId && i.SwQcUserId == qcId && i.SwQcHeadAssignId == pSwQcInId);

                    var proMas = _dbEntities.ProjectMasters.FirstOrDefault(i => i.ProjectMasterId == pMasterId);

                    if (dbModel != null)
                    {
                        dbModel.Status = "ASSIGNED";
                        dbModel.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                        dbModel.Updated = userId;
                        dbModel.UpdatedDate = DateTime.Now;
                        dbModel.SwQcEndTime = null;
                        dbModel.SwQcHeadToQcAssignTime = dbModel.SwQcHeadToQcAssignTime;
                        dbModel.SwQcStartTime = dbModel.SwQcHeadToQcAssignTime;
                        dbModel.Updated = userId;
                        dbModel.UpdatedDate = DateTime.Now;

                        _dbEntities.Entry(dbModel).State = EntityState.Modified;

                        ///////////////////Newlyassign to QC///////////////

                        SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                        swQcInactiveOrAssignLog.SwQcUserId = qcId;
                        swQcInactiveOrAssignLog.Status = "REASSIGN";
                        swQcInactiveOrAssignLog.AssignComment = SwInchargeAssignToQcComment;
                        swQcInactiveOrAssignLog.Added = userId;
                        swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        _dbEntities.SaveChanges();

                    }
                    else
                    {
                        SwQcAssignsFromQcHead model1 = new SwQcAssignsFromQcHead
                        {
                            ProjectMasterId = pMasterId,
                            SwQcHeadAssignId = pSwQcInId,
                            ProjectPmAssignId = pPrPmAssignId,
                            SwQcUserId = qcId,
                            OrderNumber = proMas.OrderNuber,
                            ProjectName = proMas.ProjectName,
                            ProjectType = proMas.ProjectType,
                            SwQcHeadToQcAssignTime = DateTime.Now,
                            SwQcStartTime = DateTime.Now,
                            PmToQcHeadAssignTime = Convert.ToDateTime(pmDate),
                            ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                            PriorityFromQcHead = "HIGH",
                            Status = "ASSIGNED",
                            SoftwareVersionName = softwareName,
                            SoftwareVersionNo = Convert.ToInt32(softwareNo),
                            TestPhaseID = Convert.ToInt32(testPhaseId),
                            ReceiveDate = DateTime.Now,
                            Added = userId,
                            AddedDate = DateTime.Now,
                        };
                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model1);


                        ///////////////////Newlyassign to QC///////////////

                        SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                        swQcInactiveOrAssignLog.SwQcUserId = qcId;
                        swQcInactiveOrAssignLog.Status = "REASSIGN";
                        swQcInactiveOrAssignLog.AssignComment = SwInchargeAssignToQcComment;
                        swQcInactiveOrAssignLog.Added = userId;
                        swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        _dbEntities.SaveChanges();

                    }
                }
            }
            _dbEntities.SaveChanges();

            return "OK";
        }
        #endregion

        #region AssignMutipleQc
        public List<PmQcAssignModel> GetPmQcAssignModels()
        {
            String query = String.Format(@"select pm.*,
            pt.TypeName,sia.ProjectManagerAssignToQcInTime,
            ppa.AssignUserId,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.AssignUserId) 
            AssignUserName,ppa.AssignDate,ppa.ProjectManagerUserId,ppa.ProjectPmAssignId,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId) 
            ProjectManagerUserName,
            sia.SwQcInchargeAssignId,sia.ProjectManagerAssignToQcInTime,
            sia.SwQcInchargeUserId,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=sia.SwQcInchargeUserId) 
            QcInchargeUserName,
            sia.ProjectManagerAssignComment,sia.TestPhaseIDFromPm,tp.TestPhaseName,sia.ProjectManagerSampleNo
            from ProjectMasters pm
            inner join ProjectTypes pt
            on pm.ProjectTypeId=pt.ProjectTypeId
            inner join ProjectPmAssigns ppa
            on pm.ProjectMasterId=ppa.ProjectMasterId
            inner join SwQcInchargeAssigns sia
            on sia.ProjectMasterId=pm.ProjectMasterId
            left join TestPhase tp on tp.TestPhaseID=sia.TestPhaseIDFromPm
            where sia.Status='NEW'  and ppa.Status not in ('INACTIVE') ");
            List<PmQcAssignModel> models = GenereticRepo<PmQcAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }

        public List<PmQcAssignModel> GetPmToQcHeadAssignModels()
        {
            //            String query = String.Format(@"select distinct sm.SwQcHeadAssignId,sm.AccessoriesTestType,pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,pm.DisplayName,pm.DisplaySize,pm.ProcessorName,pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,
            //            sm.ProjectManagerSampleNo,
            //            pm.SourcingType,pm.ProjectType,tp.TestPhaseName,sm.SoftwareVersionName,sm.SoftwareVersionNo,
            //            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.AssignUserId) AssignUserName,ppa.AssignDate,
            //            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId and ppa.Status not in ('INACTIVE')) ProjectManagerUserName,
            //            (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.SwQcHeadUserId) QcInchargeUserName,ppa.ProjectPmAssignId,ppa.ProjectManagerUserId,sm.PmToQcHeadAssignComment,sm.PmToQcHeadAssignTime,sm.SwQcHeadUserId
            //
            //            from ProjectMasters pm 
            //            left join ProjectPmAssigns ppa on pm.ProjectMasterId=ppa.ProjectMasterId and ppa.Status not in ('INACTIVE')
            //            left join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sm on sm.ProjectMasterId=pm.ProjectMasterId
            //            left join SwQcTestPhase tp on tp.TestPhaseID=sm.TestPhaseID where sm.Status='NEW' order by sm.PmToQcHeadAssignTime desc");

            String query = String.Format(@"select distinct
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.Added) AssignUserName,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId and ppa.Status not in ('INACTIVE')) ProjectManagerUserName,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.SwQcHeadUserId) QcInchargeUserName,
            case when ppa.ProjectPmAssignId is null then 0 else ppa.ProjectPmAssignId end as ProjectPmAssignId,
            case when ppa.ProjectManagerUserId is null then 0 else ppa.ProjectManagerUserId end as ProjectManagerUserId,

            pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,pm.DisplayName,pm.DisplaySize,pm.ProcessorName,
            pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,pm.SourcingType,pm.ProjectType, 
            case when sm.ProjectManagerSampleNo is null then 0 else sm.ProjectManagerSampleNo end as ProjectManagerSampleNo,
            sm.SwQcHeadAssignId,case when sm.Status='NEWASSIGNED' then 'Os Requirement Analysis' else sm.AccessoriesTestType end as  AccessoriesTestType,tp.TestPhaseName,sm.SoftwareVersionName,
            sm.SoftwareVersionNo,sm.PmToQcHeadAssignComment,sm.PmToQcHeadAssignTime,sm.SwQcHeadUserId

            from ProjectMasters pm 
            left join ProjectPmAssigns ppa on pm.ProjectMasterId=ppa.ProjectMasterId and ppa.Status not in ('INACTIVE')
            left join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sm on sm.ProjectMasterId=pm.ProjectMasterId
            left join SwQcTestPhase tp on tp.TestPhaseID=sm.TestPhaseID 
            where sm.Status in ('NEW','NEWASSIGNED') order by sm.PmToQcHeadAssignTime desc");
            List<PmQcAssignModel> models = GenereticRepo<PmQcAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }
            }
            return models;
        }
        public string SaveAssignMuliplePerson(string projectMasterId, string swQcInchargeAssignId, string projectPmAssignId,
            string swInchargeAssignToQcComment, string[] multiple, string approxInchargeToQcDeliveryDate, string accessoriesTestType)
        {
            long ProjectMasterId = Convert.ToInt64(projectMasterId);
            long SwQcInchargeAssignId = Convert.ToInt64(swQcInchargeAssignId);
            long ProjectPmAssignId = Convert.ToInt64(projectPmAssignId);
            DateTime date;
            DateTime.TryParseExact(approxInchargeToQcDeliveryDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
            DateTimeStyles.None, out date);

            DateTime ApproxInchargeToQcDeliveryDate1 = date;

            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.ProjectMasters where pm.ProjectMasterId == ProjectMasterId select pm).FirstOrDefault();

            SwQcHeadAssignsFromPm assign = new SwQcHeadAssignsFromPm();


            if (accessoriesTestType == "Os Requirement Analysis")
            {
                assign =
                   _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(
                       x => x.SwQcHeadAssignId == SwQcInchargeAssignId && x.Status != "RECOMMENDED");
                assign.Status = "ASSIGNEDTOQC";
                assign.SwQcHeadToQcAssignTime = DateTime.Now;
                assign.SwQcHeadToQcAssignComment = swInchargeAssignToQcComment;
                assign.Updated = userId;
                assign.UpdatedDate = DateTime.Now;
                _dbEntities.SaveChanges();

                foreach (string qcperson in multiple)
                {
                    long qcId = Convert.ToInt64(qcperson);
                    if (assign.Status == "ASSIGNEDTOQC")
                    {
                        SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead();

                        model.ProjectMasterId = ProjectMasterId;
                        model.ProjectName = query.ProjectName;
                        model.ProjectType = query.ProjectType;
                        model.OrderNumber = query.OrderNuber;
                        model.SwQcHeadAssignId = SwQcInchargeAssignId;
                        model.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                        model.PriorityFromQcHead = "HIGH";
                        model.ProjectPmAssignId = ProjectPmAssignId;
                        model.PmToQcHeadAssignTime = assign.PmToQcHeadAssignTime;
                        model.SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime;
                        model.SwQcHeadToQcAssignComment = swInchargeAssignToQcComment;
                        model.SoftwareVersionName = assign.SoftwareVersionName;
                        model.SoftwareVersionNo = assign.SoftwareVersionNo;
                        model.SwQcStartTime = assign.SwQcHeadToQcAssignTime;
                        model.SwQcUserId = qcId;
                        model.Status = "ASSIGNEDTOQC";
                        model.Added = userId;
                        model.TestPhaseID = assign.TestPhaseID;
                        // model.// FieldTestFrom="PM",
                        model.AddedDate = DateTime.Now;

                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                        _dbEntities.SaveChanges();
                    }
                }

            }
            else
            {
                assign =
              _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.SwQcHeadAssignId == SwQcInchargeAssignId && x.Status != "RECOMMENDED");
                assign.Status = "ASSIGNED";
                assign.SwQcHeadToQcAssignTime = DateTime.Now;
                assign.SwQcHeadToQcAssignComment = swInchargeAssignToQcComment;
                assign.Updated = userId;
                assign.UpdatedDate = DateTime.Now;
                _dbEntities.SaveChanges();

                var query3 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                              join tstPhase in _dbEntities.SwQcTestPhases on swQcHead.TestPhaseID equals tstPhase.TestPhaseID
                              where swQcHead.SwQcHeadAssignId == SwQcInchargeAssignId && swQcHead.ProjectMasterId == ProjectMasterId
                              select tstPhase).FirstOrDefault();

                foreach (string qcperson in multiple)
                {
                    long qcId = Convert.ToInt64(qcperson);
                    if (query3.TestPhaseName.Trim() != "Field (Network Test)" &&
                        query3.TestPhaseName.Trim() != "Accessories Test")
                    {
                        SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead();

                        model.ProjectMasterId = ProjectMasterId;
                        model.ProjectName = query.ProjectName;
                        model.ProjectType = query.ProjectType;
                        model.OrderNumber = query.OrderNuber;
                        model.SwQcHeadAssignId = SwQcInchargeAssignId;
                        model.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                        model.PriorityFromQcHead = "HIGH";
                        model.ProjectPmAssignId = ProjectPmAssignId;
                        model.PmToQcHeadAssignTime = assign.PmToQcHeadAssignTime;
                        model.SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime;
                        model.SwQcHeadToQcAssignComment = swInchargeAssignToQcComment;
                        model.SoftwareVersionName = assign.SoftwareVersionName;
                        model.SoftwareVersionNo = assign.SoftwareVersionNo;
                        model.SwQcStartTime = assign.SwQcHeadToQcAssignTime;
                        model.SwQcUserId = qcId;
                        if (assign.Status == "ASSIGNEDTOQC")
                        {
                            model.Status = "ASSIGNEDTOQC";
                        }
                        else
                        {
                            model.Status = "ASSIGNED";
                        }
                        model.Added = userId;
                        model.TestPhaseID = assign.TestPhaseID;
                        // model.// FieldTestFrom="PM",
                        model.AddedDate = DateTime.Now;

                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                        _dbEntities.SaveChanges();
                    }
                    else if (query3.TestPhaseName.Trim() == "Field (Network Test)")
                    {
                        SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead
                        {
                            ProjectMasterId = ProjectMasterId,
                            ProjectName = query.ProjectName,
                            ProjectType = query.ProjectType,
                            OrderNumber = query.OrderNuber,
                            SwQcHeadAssignId = SwQcInchargeAssignId,
                            ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                            PriorityFromQcHead = "HIGH",
                            ProjectPmAssignId = ProjectPmAssignId,
                            PmToQcHeadAssignTime = assign.PmToQcHeadAssignTime,
                            SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime,
                            SwQcHeadToQcAssignComment = swInchargeAssignToQcComment,
                            SoftwareVersionName = assign.SoftwareVersionName,
                            SoftwareVersionNo = assign.SoftwareVersionNo,
                            SwQcStartTime = assign.SwQcHeadToQcAssignTime,
                            SwQcUserId = qcId,
                            Status = "ASSIGNED",
                            TestPhaseID = assign.TestPhaseID,
                            FieldTestFrom = assign.FieldTestFrom,
                            FieldTestID = assign.FieldTestID,
                            Added = userId,
                            AddedDate = DateTime.Now

                        };

                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                        _dbEntities.SaveChanges();
                    }
                    else if (query3.TestPhaseName.Trim() == "Accessories Test")
                    {
                        SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead
                        {
                            ProjectMasterId = ProjectMasterId,
                            ProjectName = query.ProjectName,
                            ProjectType = query.ProjectType,
                            OrderNumber = query.OrderNuber,
                            SwQcHeadAssignId = SwQcInchargeAssignId,
                            ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                            PriorityFromQcHead = "HIGH",
                            ProjectPmAssignId = ProjectPmAssignId,
                            PmToQcHeadAssignTime = assign.PmToQcHeadAssignTime,
                            SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime,
                            SwQcHeadToQcAssignComment = swInchargeAssignToQcComment,
                            SoftwareVersionName = assign.SoftwareVersionName,
                            SoftwareVersionNo = assign.SoftwareVersionNo,
                            SwQcStartTime = assign.SwQcHeadToQcAssignTime,
                            SwQcUserId = qcId,
                            Status = "ASSIGNED",
                            TestPhaseID = assign.TestPhaseID,
                            AccessoriesTestType = assign.AccessoriesTestType,
                            Added = userId,
                            AddedDate = DateTime.Now
                        };

                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                        _dbEntities.SaveChanges();
                    }
                }//
            }




            _dbEntities.SaveChanges();
            return "ok";
        }
        #endregion

        #region Qc Incharge to PM
        public List<VmSwInchargeViewModel> GetAllProjectForSendToQcInchargeToPmList()
        {

            var models = new List<VmSwInchargeViewModel>();

            var dbIssues1 = from pm in _dbEntities.ProjectMasters
                            join pma in _dbEntities.ProjectPmAssigns on pm.ProjectMasterId equals pma.ProjectMasterId
                            join sqia in _dbEntities.SwQcInchargeAssigns on pm.ProjectMasterId equals sqia.ProjectMasterId
                            join cmU in _dbEntities.CmnUsers on pma.ProjectManagerUserId equals cmU.CmnUserId
                            join tp in _dbEntities.TestPhases on sqia.TestPhaseID equals tp.TestPhaseID
                            where
                            (pm.ProjectMasterId == pma.ProjectMasterId) && (sqia.Status == "QCCOMPLETED") &&
                            (pm.ProjectMasterId == sqia.ProjectMasterId) && (pma.ProjectManagerUserId == cmU.CmnUserId && pma.Status == "ASSIGNED")
                            && !(_dbEntities.SwQcAssigns.Any(i => (i.Status == "ASSIGNED" || i.Status == "PAUSED" || i.Status == "NEW") && i.ProjectMasterId == pm.ProjectMasterId))

                            select new VmSwInchargeViewModel
                            {
                                ProjectMasterId = pm.ProjectMasterId,
                                ProjectPmAssignId = pma.ProjectPmAssignId,
                                SwQcInchargeAssignId = sqia.SwQcInchargeAssignId,
                                SupplierName = pm.SupplierName,
                                ProjectName = pm.ProjectName,
                                SupplierModelName = pm.SupplierName,
                                OsName = pm.OsName,
                                OsVersion = pm.OsVersion,
                                DisplayName = pm.DisplayName,
                                DisplaySize = pm.DisplaySize,
                                ProcessorClock = pm.ProcessorClock,
                                ProcessorName = pm.ProcessorName,
                                FrontCamera = pm.FrontCamera,
                                BackCamera = pm.BackCamera,
                                Ram = pm.Ram,
                                Rom = pm.Rom,
                                Battery = pm.Battery,
                                NumberOfSample = pm.NumberOfSample,
                                OrderNuber = pm.OrderNuber,
                                ProjectManagerUserId = pma.ProjectManagerUserId,
                                UserFullName = cmU.UserFullName,
                                CmnUserId = cmU.CmnUserId,
                                AssignDate = pma.AssignDate,
                                ProjectManagerAssignToQcInTime = sqia.ProjectManagerAssignToQcInTime,
                                SwQcInchargeAssignTime = sqia.SwQcInchargeAssignTime,
                                ApproxPmToQcDeliveryDate = sqia.ApproxPmToQcDeliveryDate,
                                ApproxProjectFinishDate = (DateTime)pm.ApproxProjectFinishDate,
                                TestPhaseID = (long)sqia.TestPhaseID,
                                TestPhaseName = tp.TestPhaseName,
                                ProjectManagerSampleNo = sqia.ProjectManagerSampleNo

                            };
            models = dbIssues1.ToList();

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;

        }
        //public string SoftWareQcInchargeToPm(long pMasterId, string swQcInchargeComment, long userId, long pSwQcInId)
        //{
        //    var dbModel =
        //        _dbEntities.SwQcInchargeAssigns.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcInchargeAssignId == pSwQcInId);

        //    if (dbModel != null)
        //    {

        //        dbModel.SwQcInchargeEndComment = swQcInchargeComment;
        //        dbModel.Status = "RECOMMENDED";
        //        dbModel.SwQcInchargeEndTime = DateTime.Now;
        //        dbModel.Updated = userId;
        //        dbModel.UpdatedDate = DateTime.Now;
        //        dbModel.QcInchargeToPmProjectSubmitTime = DateTime.Now;
        //        _dbEntities.SwQcInchargeAssigns.AddOrUpdate(dbModel);

        //    }

        //    try
        //    {
        //        //List<SwQcAssign> results = (from sqa in _dbEntities.SwQcAssigns
        //        //                            where sqa.ProjectMasterId == pMasterId
        //        //                            select sqa).ToList();

        //        //foreach (SwQcAssign sqa in results)
        //        //{
        //        //    sqa.Status = "RECOMMENDED";
        //        //}
        //        List<SwQcAssign> results = (from sqa in _dbEntities.SwQcAssigns
        //                                    where sqa.SwQcInchargeAssignId == pSwQcInId && sqa.Status != "INACTIVE"
        //                                    select sqa).ToList();

        //        foreach (SwQcAssign sqa in results)
        //        {
        //            sqa.Status = "RECOMMENDED";
        //        }
        //        _dbEntities.SaveChanges();



        //        return "OK";
        //    }
        //    catch (Exception)
        //    {

        //        return "NO";
        //    }
        //}
        public List<SwQcAssignsFromQcHeadModel> GetCompletedProjectForQcHeadToPmSubmit()
        {
            //            var query = _dbEntities.Database.SqlQuery<VmSwQcHeadViewModel>(@"select distinct pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
            //STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
            //and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
            //sqi.TestPhaseID,sp.TestPhaseName,
            //case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
            //where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
            //case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
            //where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID ) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime,
            //case when cm2.UserFullName is null then (select top 1 UserFullName from CellPhoneProject.dbo.SwQcAssignsFromQcHead left join CmnUsers on SwQcAssignsFromQcHead.Added=CmnUsers.CmnUserId
            //where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID)
            //else cm2.UserFullName end as ProjectAssignedBy,
            //(select top 1 ApproxInchargeToQcDeliveryDate from CellPhoneProject.dbo.SwQcAssignsFromQcHead where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseId) as ApproxInchargeToQcDeliveryDate,
            //pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,sqpm.ProjectPmAssignId
            //
            //from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
            //left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
            //left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
            //left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
            //left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID
            //left join CellPhoneProject.dbo.CmnUsers cm2 on cm2.CmnUserId=sqpm.ProjectManagerUserId
            //
            //where pm.SourcingType is not null and sqi.status in ('QCCOMPLETED') 
            //and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
            //group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
            //sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName,cm2.UserFullName,ApproxInchargeToQcDeliveryDate,
            //pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,sqpm.ProjectPmAssignId
            //order by sqi.PmToQcHeadAssignTime desc").ToList();
            //            var query = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct sqpm.Status,sqi.ProjectMasterId,pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory,
            //             sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.AccessoriesTestType,
            //            sqi.PmToQcHeadAssignTime,
            //            STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
            //            and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
            //            sqi.TestPhaseID,sp.TestPhaseName,
            //            case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
            //            where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
            //
            //            case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
            //            where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID ) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime,
            //
            //            case when cm2.UserFullName is null then (select top 1 UserFullName from CellPhoneProject.dbo.SwQcAssignsFromQcHead left join CmnUsers on SwQcAssignsFromQcHead.Added=CmnUsers.CmnUserId
            //            where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID)
            //            else cm2.UserFullName end as ProjectAssignedBy,
            //
            //
            //            (select top 1 ApproxInchargeToQcDeliveryDate from CellPhoneProject.dbo.SwQcAssignsFromQcHead where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseId) as ApproxInchargeToQcDeliveryDate,
            //            pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,
            //
            //            case when sqpm.ProjectPmAssignId is null then (select top 1 ProjectPmAssignId from CellPhoneProject.dbo.SwQcHeadAssignsFromPm
            //            where ProjectMasterId=sqi.ProjectMasterId and SoftwareVersionNo=sqi.SoftwareVersionNo) else sqpm.ProjectPmAssignId end as ProjectPmAssignId
            //
            //            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
            //            left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId 
            //            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName 
            //            left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
            //            left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID
            //            left join CellPhoneProject.dbo.CmnUsers cm2 on cm2.CmnUserId=sqpm.ProjectManagerUserId  where 
            //
            //            pm.SourcingType is not null and sqi.status  in ('QCCOMPLETED') and sqi.SwQcHeadAssignId !=0
            //            and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
            //            group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
            //            sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName,cm2.UserFullName,ApproxInchargeToQcDeliveryDate,
            //            pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,sqpm.ProjectPmAssignId,
            //            sqi.ProjectMasterId,sqpm.Status,sqi.SwQcHeadAssignId,sqi.AccessoriesTestType
            //            order by sqi.PmToQcHeadAssignTime desc").ToList();

            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct sqpm.Status,sqi.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory,
sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.AccessoriesTestType,
sqi.PmToQcHeadAssignTime,
STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
sqi.TestPhaseID,sp.TestPhaseName,sqpm.SwQcHeadToQcAssignTime,sqpm.SwQcFinishedTime,

case when cm2.UserFullName is null then (select top 1 UserFullName from CellPhoneProject.dbo.SwQcAssignsFromQcHead left join CellPhoneProject.dbo.CmnUsers on SwQcAssignsFromQcHead.Added=CmnUsers.CmnUserId
where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID)
else cm2.UserFullName end as ProjectAssignedBy,


(select top 1 ApproxInchargeToQcDeliveryDate from CellPhoneProject.dbo.SwQcAssignsFromQcHead where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseId order by ApproxInchargeToQcDeliveryDate desc) as ApproxInchargeToQcDeliveryDate,
pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,

case when sqpm.ProjectPmAssignId is null then (select top 1 ProjectPmAssignId from CellPhoneProject.dbo.SwQcHeadAssignsFromPm
where ProjectMasterId=sqi.ProjectMasterId and SoftwareVersionNo=sqi.SoftwareVersionNo) else sqpm.ProjectPmAssignId end as ProjectPmAssignId

from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId 
left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=sqi.ProjectMasterId 
left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID
left join CellPhoneProject.dbo.CmnUsers cm2 on cm2.CmnUserId=sqpm.ProjectManagerUserId  where 

pm.SourcingType is not null and sqi.status  in ('QCCOMPLETED') and sqi.SwQcHeadAssignId !=0
and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
group by sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName,cm2.UserFullName,ApproxInchargeToQcDeliveryDate,
pm.OsName,pm.OsVersion,pm.DisplayName,pm.DisplaySize,pm.ProcessorClock,pm.ProcessorName,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,sqpm.ProjectManagerSampleNo,pm.Chipset,sqpm.ProjectPmAssignId,
sqi.ProjectMasterId,sqpm.Status,sqi.SwQcHeadAssignId,sqi.AccessoriesTestType
order by sqi.PmToQcHeadAssignTime desc").ToList();
            foreach (var model in query)
            {
                model.ProjectName = model.ProjectName + " (" + CommonConversion.AddOrdinal(model.OrderNumber) + " Order)" + " (" + model.PoCategory + ")";

            }

            List<SwQcAssignsFromQcHeadModel> query3 = new List<SwQcAssignsFromQcHeadModel>();
            foreach (var query1 in query)
            {

                if (!(_dbEntities.SwQcAssignsFromQcHeads.Any(i => (i.Status == "ASSIGNED" || i.Status == "PAUSED" || i.Status == "NEW")
                       && (i.SwQcHeadAssignId == query1.SwQcHeadAssignId) && i.ProjectMasterId == query1.ProjectMasterId)))
                {
                    query3.Add(query1);
                }
            }

            return query3;
        }

        #endregion

        #region QC to Incharge Final Project Submit
        public List<ProjectMasterModel> GetProjectList(long projectId)
        {
            if (projectId > 0)
            {
                var startUps = from qcIssue in _dbEntities.ProjectMasters
                               join startUp in _dbEntities.SwQcInchargeAssigns on qcIssue.ProjectMasterId equals startUp.ProjectMasterId
                               where (startUp.ProjectMasterId) == startUp.ProjectMasterId && (startUp.Status == "ASSIGNED")
                               select new ProjectMasterModel
                               {

                                   ProjectMasterId = startUp.ProjectMasterId,
                                   ProjectName = qcIssue.ProjectName,
                                   Date = DateTime.Now
                               };
            }
            return new List<ProjectMasterModel>();
        }
        public string SoftwareQcToQcInchargeProjectSubmit(long sPMasterId, long sQcUserId, string proStatus, long sQcInchargeAssignId)
        {

            String userIdentity =
       System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var dbModel =
                _dbEntities.SwQcInchargeAssigns.FirstOrDefault(x => x.SwQcInchargeAssignId == sQcInchargeAssignId);

            if (dbModel != null)
            {

                dbModel.Status = "QCCOMPLETED";
                dbModel.UpdatedDate = DateTime.Now;
                dbModel.QcProjectFinisedTime = DateTime.Now;
                _dbEntities.SwQcInchargeAssigns.AddOrUpdate(dbModel);

            }
            try
            {


                List<SwQcAssign> dbModel1 = (from sqa in _dbEntities.SwQcAssigns
                                             where sqa.SwQcInchargeAssignId == sQcInchargeAssignId && sqa.ProjectMasterId == sPMasterId && sqa.Status != "INACTIVE"
                                             && sqa.SwQcUserId == sQcUserId
                                             select sqa).ToList();

                foreach (SwQcAssign sqa in dbModel1)
                {
                    sqa.SwQcEndTime = DateTime.Now;
                    sqa.Status = "QCCOMPLETED";
                    sqa.Updated = userId;
                    sqa.UpdatedDate = DateTime.Now;

                }
                _dbEntities.SaveChanges();



                return "OK";
            }
            catch (Exception)
            {

                return "NO";
            }
        }
        #endregion

        #region Filed test

        public string SaveFieldTest(long pMasterId, long phwQcInuId, string[] ddlUsers,
            List<SwFieldTestDetailModel> details, string comparedWith,
            string issueOf, string comment)
        {
            String userIdentity =
                System.Web.HttpContext.Current.User.Identity.Name;
            ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);
            long lastinsertedId = 0;
            if (userId != null)
            {
                SwFieldTest test = new SwFieldTest
                {
                    IssueOf = issueOf,
                    ComparedWith = comparedWith,
                    Added = userId,
                    AddedDate = DateTime.Now,
                    SwQcInchargeAssignId = userId,
                    ProjectMasterId = pMasterId,
                    FieldTestAssignCommentFromIncharge = comment

                };

                _dbEntities.SwFieldTests.AddOrUpdate(test);
                _dbEntities.SaveChanges();

                lastinsertedId = test.SwFieldTestId;
            }

            foreach (var user in ddlUsers)
            {
                if (lastinsertedId != null)
                {
                    SwFieldTestAssign assign = new SwFieldTestAssign
                    {
                        SwFieldTestId = lastinsertedId,
                        Added = userId,
                        AddedDate = DateTime.Now,
                        Updated = userId,
                        UpdatedDate = DateTime.Now,
                        FieldTestAssignDate = DateTime.Now,
                        SwQcUserId = Convert.ToInt64(user),
                        FieldTestAssignComment = comment,
                        ProjectMasterId = pMasterId

                    };
                    _dbEntities.SwFieldTestAssigns.AddOrUpdate(assign);
                    _dbEntities.SaveChanges();
                }

            }
            foreach (var detail in details)
            {
                if (lastinsertedId != null)
                {
                    SwFieldTestDetail assign1 = new SwFieldTestDetail
                    {
                        SwFieldTestId = lastinsertedId,
                        ProjectMasterId = pMasterId,
                        Added = userId,
                        AddedDate = DateTime.Now,
                        Updated = userId,
                        UpdatedDate = DateTime.Now,
                        TestDate = detail.TestDate,
                        Location = detail.Location,
                        Severity = detail.Severity,
                        Description = detail.Description,
                        Condition_Op_TT_dbm = detail.Condition_Op_TT_dbm,
                        Condition_Op_TT_Bar = detail.Condition_Op_TT_Bar,
                        Condition_Op_RB_dbm = detail.Condition_Op_RB_dbm,
                        Condition_Op_RB_Bar = detail.Condition_Op_RB_Bar,
                        Condition_Op_BL_dbm = detail.Condition_Op_BL_dbm,
                        Condition_Op_BL_Bar = detail.Condition_Op_BL_Bar,
                        Condition_Op_AT_dbm = detail.Condition_Op_AT_dbm,
                        Condition_Op_AT_Bar = detail.Condition_Op_AT_Bar,
                        Ref_Op_TT_dbm = detail.Ref_Op_TT_dbm,
                        Ref_Op_TT_Bar = detail.Ref_Op_TT_Bar,
                        Ref_Op_RB_dbm = detail.Ref_Op_RB_dbm,
                        Ref_Op_RB_Bar = detail.Ref_Op_RB_Bar,
                        Ref_Op_BL_dbm = detail.Ref_Op_BL_dbm,
                        Ref_Op_BL_Bar = detail.Ref_Op_BL_Bar,
                        Ref_Op_AT_dbm = detail.Ref_Op_AT_dbm,
                        Ref_Op_AT_Bar = detail.Ref_Op_AT_Bar,
                        Remarks = detail.Remarks,

                    };
                    _dbEntities.SwFieldTestDetails.AddOrUpdate(assign1);
                    _dbEntities.SaveChanges();
                }

            }
            //  _dbEntities.SaveChanges();
            return "ok";

            /*
          SwFieldTest test = new SwFieldTest
          {
              IssueOf = issueOf,
              ComparedWith = comparedWith,
          };
          foreach (var user in ddlUsers)
          {
              SwFieldTestAssign assign = new SwFieldTestAssign
              {
                  Added = userId,
                  AddedDate = DateTime.Now,
                  Updated = userId,
                  UpdatedDate = DateTime.Now,
                  FieldTestAssignDate = DateTime.Now,
                  SwQcUserId = Convert.ToInt64(user),
                  FieldTestAssignComment = COMMENT

              };

          }
          foreach (SwFieldTestDetail detail in details)
          {

              detail.Added = userId;
              detail.AddedDate = DateTime.Now;
              detail.Updated = userId;
              detail.UpdatedDate = DateTime.Now;
          }
           */
        }

        //public List<ProjectMasterModel> GetProjectListForFieldTest()
        //{

        //            select pm.*,sia.* from ProjectMasters pm 
        //left join SwQcInchargeAssigns sia on pm.ProjectMasterId=sia.ProjectMasterId
        //where ProjectStatus='APPROVED' 
        //and pm.ProjectMasterId in (select ProjectMasterId from SwQcInchargeAssigns where ProjectMasterId=pm.ProjectMasterId)
        //    //string query = string.Format(@"select * from ProjectMasters where ProjectStatus='APPROVED' ");
        //    //var getUserInfoByUserId = _dbEntities.Database.SqlQuery<ProjectMasterModel>(query).ToList().FirstOrDefault();
        //    //return new List<ProjectMasterModel> {getUserInfoByUserId};

        //    List<ProjectMaster> list = _dbEntities.ProjectMasters.Where(x => x.ProjectStatus == "APPROVED" && (_dbEntities.SwQcInchargeAssigns.Any(i => i.ProjectMasterId == x.ProjectMasterId))).ToList();

        //    List<ProjectMasterModel> models = GenericMapper<ProjectMaster, ProjectMasterModel>.GetDestinationList(list);
        //    return models;

        //}

        public List<ProjectMasterModel> GetProjectListForFieldTest()
        {

            //           var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select pm.*,sia.* from ProjectMasters pm 
            //            left join SwQcInchargeAssigns sia on pm.ProjectMasterId=sia.ProjectMasterId
            //            where pm.ProjectStatus='APPROVED' 
            //            and pm.ProjectMasterId in (select ProjectMasterId from SwQcInchargeAssigns where ProjectMasterId=pm.ProjectMasterId)").ToList();

            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select * from ProjectMasters pm 
             where pm.ProjectStatus='APPROVED' 
             and pm.ProjectMasterId in (select ProjectMasterId from HwQcInchargeAssigns hqa where hqa.ProjectMasterId=pm.ProjectMasterId)").ToList();
            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName + " -->> (" + CommonConversion.AddOrdinal(model.OrderNuber) + " Order)";

            }
            return getSwProject;
        }
        public List<SwQcInchargeAssignModel> GetSwQcInchargeAssignModelsForFieldTest()
        {
            var getSwInchargeProject = _dbEntities.Database.SqlQuery<SwQcInchargeAssignModel>(@"select pm.*,sia.* from ProjectMasters pm 
            left join SwQcInchargeAssigns sia on pm.ProjectMasterId=sia.ProjectMasterId
            where ProjectStatus='APPROVED' 
            and pm.ProjectMasterId in (select ProjectMasterId from SwQcInchargeAssigns where ProjectMasterId=pm.ProjectMasterId)").ToList();


            foreach (var project in getSwInchargeProject)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return getSwInchargeProject;
        }



        #endregion

        #region Field test report

        public List<ProjectMasterModel> GetFieldTestCompletedProjectList()
        {
            var models = new List<ProjectMasterModel>();
            var dbIssues1 = Queryable.Distinct(from ft in _dbEntities.SwFieldTests
                                               join pm in _dbEntities.ProjectMasters on ft.ProjectMasterId equals pm.ProjectMasterId

                                               where

                                                   pm.ProjectStatus == "APPROVED"
                                               select new ProjectMasterModel
                                               {
                                                   ProjectMasterId = pm.ProjectMasterId,
                                                   ProjectName = pm.ProjectName,

                                               });

            models = dbIssues1.ToList();

            return models;
        }
        public List<SwFieldTestReportView> GetFieldTestProjectLisForPrintReport(long projectId, long userId)
        {
            var models = new List<SwFieldTestReportView>();

            var dbIssues1 = from ft in _dbEntities.SwFieldTests
                            join pm in _dbEntities.ProjectMasters on ft.ProjectMasterId equals pm.ProjectMasterId
                            join pma in _dbEntities.ProjectPmAssigns on pm.ProjectMasterId equals pma.ProjectMasterId
                            //join hwa in _dbEntities.HwQcInchargeAssigns  on ft.SwQcInchargeAssignId equals hwa.HwQcInchargeUserId
                            join cmn in _dbEntities.CmnUsers on pma.ProjectManagerUserId equals cmn.CmnUserId

                            where
                                pm.ProjectStatus == "APPROVED" && pm.ProjectMasterId == projectId && ft.SwQcInchargeAssignId == userId

                            select new SwFieldTestReportView
                            {
                                ProjectMasterId = projectId,
                                CmnUserId = pma.ProjectManagerUserId,
                                SwFieldTestId = ft.SwFieldTestId,
                                //SwQcInchargeAssignId = userId,
                                HwQcInchargeUserId = userId,
                                IssueOf = ft.IssueOf,
                                ComparedWith = ft.ComparedWith,
                                ProjectType = pm.ProjectType,
                                ProjectName = pm.ProjectName,
                                OsVersion = pm.OsVersion,
                                OsName = pm.OsName,
                                SupplierModelName = pm.SupplierModelName,
                                SupplierName = pm.SupplierName,
                                UserFullName = cmn.UserFullName,
                                UserName = cmn.UserName,
                                ProjectManagerUserId = cmn.CmnUserId,
                                AddedDate = ft.AddedDate

                            };

            models = dbIssues1.ToList();

            return models;
        }

        #endregion

        #region Add new Issues  && Get Issues

        public List<SwQcProjectWiseIssueViewModel> GetSwQcProjectWiseIssueViewModelss(long pMasterId, long pSwQcInId, long pSwQcAssignId)
        {
            String userIdentity =
         System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var models = new List<SwQcProjectWiseIssueViewModel>();

            var dbIssues1 = from swqcproWise in _dbEntities.SwQcProjectWiseIssues

                            where
                                 swqcproWise.ProjectMasterId == pMasterId && swqcproWise.SwQcInchargeAssignId == pSwQcInId
                                 && swqcproWise.SwQcAssignId == pSwQcAssignId && swqcproWise.Added == userId

                            select new SwQcProjectWiseIssueViewModel
                            {
                                ProjectMasterId = pMasterId,
                                SwQcInchargeAssignId = pSwQcInId,
                                SwQcAssignId = pSwQcAssignId,
                                IssueName = swqcproWise.IssueName,
                                Comment = swqcproWise.Comment,
                                RefernceModule = swqcproWise.RefernceModule,
                                RefBy = swqcproWise.RefBy,
                                Result = swqcproWise.Result,
                                IssueType = swqcproWise.IssueType,
                                Frequency = swqcproWise.Frequency,
                                IssueReproducePath = swqcproWise.IssueReproducePath,
                                StartTime = swqcproWise.StartTime,
                                EndTime = swqcproWise.EndTime,
                                UploadedFile = swqcproWise.Upload
                            };

            models = dbIssues1.ToList();

            return models;
        }

        public List<string> GetIssueModules(string type)
        {
            List<String> list = (from emp in _dbEntities.SwQcIssueCategories
                                 where emp.IsActive == true
                                 orderby emp.OrdersOfIssues ascending
                                 group emp by emp.QcCategoryName into empg
                                 select empg.Key).ToList();

            return list;
        }
        public string SaveProjectWiseIssues(List<SwQcProjectWiseIssueViewModel> issueList, long pMasterId, long pSwQcInId, long pSwQcAssignId)
        {
            String userIdentity =
           System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var swQcProWiseModel in issueList)
            {
                SwQcProjectWiseIssue model = new SwQcProjectWiseIssue
                   {
                       ProjectMasterId = pMasterId,
                       SwQcInchargeAssignId = pSwQcInId,
                       SwQcAssignId = pSwQcAssignId,
                       IssueName = swQcProWiseModel.IssueName,
                       Comment = swQcProWiseModel.Comment,
                       RefernceModule = swQcProWiseModel.RefernceModule,
                       RefBy = userId,
                       Result = swQcProWiseModel.Result,
                       IssueType = swQcProWiseModel.IssueType,
                       Frequency = swQcProWiseModel.Frequency,
                       IssueReproducePath = swQcProWiseModel.IssueReproducePath,
                       StartTime = swQcProWiseModel.StartTime,
                       EndTime = swQcProWiseModel.EndTime,
                       Upload = swQcProWiseModel.UploadedFile,
                       Added = userId,
                       AddedDate = DateTime.Now

                   };
                _dbEntities.SwQcProjectWiseIssues.AddOrUpdate(model);

                //if (swQcProWiseModel.PhoneType == "Smart")
                //{
                //     SwQcProjectWiseIssue model = new SwQcProjectWiseIssue
                //        {
                //            ProjectMasterId = pMasterId,
                //            SwQcInchargeAssignId = pSwQcInId,
                //            SwQcAssignId = pSwQcAssignId,
                //            IssueName = swQcProWiseModel.IssueName,
                //            Comment = swQcProWiseModel.Comment,
                //            RefernceModule=swQcProWiseModel.RefernceModule,
                //            RefBy = swQcProWiseModel.RefBy,
                //            Piority = swQcProWiseModel.Piority,
                //            StartTime = swQcProWiseModel.StartTime,
                //            EndTime = swQcProWiseModel.EndTime,
                //            Upload = swQcProWiseModel.UploadedFile,
                //            IsSmart = true,
                //            Added= userId,
                //            AddedDate = DateTime.Now

                //        };
                //     _dbEntities.SwQcProjectWiseIssues.AddOrUpdate(model);
                //}
                //else if (swQcProWiseModel.PhoneType == "Walpad")
                //{
                //    SwQcProjectWiseIssue model = new SwQcProjectWiseIssue
                //    {
                //        ProjectMasterId = pMasterId,
                //        SwQcInchargeAssignId = pSwQcInId,
                //        SwQcAssignId = pSwQcAssignId,
                //        IssueName = swQcProWiseModel.IssueName,
                //        Comment = swQcProWiseModel.Comment,
                //        RefernceModule = swQcProWiseModel.RefernceModule,
                //        RefBy = swQcProWiseModel.RefBy,
                //        Piority = swQcProWiseModel.Piority,
                //        StartTime = swQcProWiseModel.StartTime,
                //        EndTime = swQcProWiseModel.EndTime,
                //        Upload = swQcProWiseModel.UploadedFile,
                //        IsWalpad = true,
                //        Added = userId,
                //        AddedDate = DateTime.Now

                //    };
                //    _dbEntities.SwQcProjectWiseIssues.AddOrUpdate(model);
                //}
                //else if (swQcProWiseModel.PhoneType == "Feature")
                //{
                //    SwQcProjectWiseIssue model = new SwQcProjectWiseIssue
                //    {
                //        ProjectMasterId = pMasterId,
                //        SwQcInchargeAssignId = pSwQcInId,
                //        SwQcAssignId = pSwQcAssignId,
                //        IssueName = swQcProWiseModel.IssueName,
                //        Comment = swQcProWiseModel.Comment,
                //        RefernceModule = swQcProWiseModel.RefernceModule,
                //        RefBy = swQcProWiseModel.RefBy,
                //        Piority = swQcProWiseModel.Piority,
                //        StartTime = swQcProWiseModel.StartTime,
                //        EndTime = swQcProWiseModel.EndTime,
                //        Upload = swQcProWiseModel.UploadedFile,
                //        IsFeature = true,
                //        Added = userId,
                //        AddedDate = DateTime.Now

                //    };
                //    _dbEntities.SwQcProjectWiseIssues.AddOrUpdate(model);
                //}

            }


            _dbEntities.SaveChanges();
            return "ok";
        }

        #endregion

        #region Paused or Restart any project
        public string SaveSwPauseOrRestartAssignedProject(long pMasterId, string projectHeadRemarks, long pSwQcInId, string projectName, long pmHeadAssignId)
        {
            String userIdentity =
                HttpContext.Current.User.Identity.Name;
            ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var dbModel =
               _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcHeadAssignId == pSwQcInId);

            if (dbModel != null)
            {
                dbModel.Status = "PAUSED";
                dbModel.UpdatedDate = DateTime.Now;
                dbModel.Updated = userId;
                _dbEntities.SwQcHeadAssignsFromPms.AddOrUpdate(dbModel);
                _dbEntities.SaveChanges();

                SwQcHeadStatusChangeActivity swQcPausedOrRestart = new SwQcHeadStatusChangeActivity();
                swQcPausedOrRestart.ProjectMasterId = pMasterId;
                swQcPausedOrRestart.SwQcHeadAssignId = pSwQcInId;
                swQcPausedOrRestart.ProjectPmAssignId = pmHeadAssignId;
                swQcPausedOrRestart.Status = "PAUSED";
                swQcPausedOrRestart.PausedReason = projectHeadRemarks;
                swQcPausedOrRestart.ActivityDate = DateTime.Now;
                swQcPausedOrRestart.IsPaused = true;
                swQcPausedOrRestart.IsReStart = false;
                swQcPausedOrRestart.Added = userId;
                swQcPausedOrRestart.AddedDate = DateTime.Now;
                _dbEntities.SwQcHeadStatusChangeActivities.Add(swQcPausedOrRestart);
                _dbEntities.SaveChanges();
            }
            try
            {
                List<SwQcAssignsFromQcHead> results = (from sqa in _dbEntities.SwQcAssignsFromQcHeads
                                                       where sqa.SwQcHeadAssignId == pSwQcInId && sqa.ProjectMasterId == pMasterId && sqa.Status != "INACTIVE"
                                                       select sqa).ToList();

                foreach (SwQcAssignsFromQcHead sqa in results)
                {
                    sqa.Status = "PAUSED";
                    sqa.UpdatedDate = DateTime.Now;
                    sqa.Updated = userId;
                }
                _dbEntities.SaveChanges();

                return "OK";
            }
            catch (Exception)
            {
                return "NO";
            }
        }

        public string SaveSwRestartAssignedProject(long pMasterId, long pSwQcInId, string projectName, long pmHeadAssignId)
        {
            String userIdentity =
                System.Web.HttpContext.Current.User.Identity.Name;
            ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var dbModel =
               _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcHeadAssignId == pSwQcInId);

            if (dbModel != null)
            {

                dbModel.Status = "ASSIGNED";
                dbModel.SwQcHeadToQcAssignTime = DateTime.Now;
                dbModel.UpdatedDate = DateTime.Now;
                dbModel.Updated = userId;
                _dbEntities.SwQcHeadAssignsFromPms.AddOrUpdate(dbModel);
                _dbEntities.SaveChanges();

                SwQcHeadStatusChangeActivity swQcPausedOrRestart = new SwQcHeadStatusChangeActivity();
                swQcPausedOrRestart.ProjectMasterId = pMasterId;
                swQcPausedOrRestart.SwQcHeadAssignId = pSwQcInId;
                swQcPausedOrRestart.ProjectPmAssignId = pmHeadAssignId;
                swQcPausedOrRestart.Status = "ASSIGNED";
                swQcPausedOrRestart.ActivityDate = DateTime.Now;
                swQcPausedOrRestart.IsPaused = false;
                swQcPausedOrRestart.IsReStart = true;
                swQcPausedOrRestart.Added = userId;
                swQcPausedOrRestart.AddedDate = DateTime.Now;
                _dbEntities.SwQcHeadStatusChangeActivities.Add(swQcPausedOrRestart);
                _dbEntities.SaveChanges();
            }

            try
            {
                List<SwQcAssignsFromQcHead> results = (from sqa in _dbEntities.SwQcAssignsFromQcHeads
                                                       where sqa.SwQcHeadAssignId == pSwQcInId && sqa.ProjectMasterId == pMasterId && sqa.Status != "INACTIVE"
                                                       select sqa).ToList();

                foreach (SwQcAssignsFromQcHead sqa in results)
                {
                    sqa.Status = "ASSIGNED";
                    sqa.SwQcHeadToQcAssignTime = dbModel.SwQcHeadToQcAssignTime;
                    sqa.SwQcStartTime = dbModel.SwQcHeadToQcAssignTime;
                    sqa.UpdatedDate = DateTime.Now;
                    sqa.Updated = userId;
                }
                _dbEntities.SaveChanges();

                return "OK";
            }
            catch (Exception)
            {

                return "NO";
            }
        }

        #endregion

        #region Report Dashboard

        //public List<ProjectMaster> GetProjectListForReportOfQcIncharge()
        //{
        //    var pmLists = _dbEntities.ProjectMasters.ToList();
        //    return pmLists;
        //}

        public List<SoftwareCustomModelForDashboard> GetAllProjectListDetailsForInchargeReport(string startValue, string endValue, string emplyCode)
        {
            string getAssignedProjectToQCStatusForInchargeDashboardQuery;

            if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
            {
                //                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.ProjectName,pm.OrderNuber,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,
                //                cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,sqia.Status,sqia.QcInchargeToQcAssignTime,sqia.QcProjectFinisedTime,sqia.QcInchargeToPmProjectSubmitTime,
                //                STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssigns sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                //                and sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
                //                WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                //                STUFF((SELECT ', '  + sw.SwInchargeAssignToQcComment FROM  SwQcAssigns sw where sw.ProjectMasterId=pm.ProjectMasterId  and sw.Status not in ('INACTIVE')
                //                and sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
                //                ORDER BY sw.SwInchargeAssignToQcComment FOR XML PATH('')),1,2,'')  AS  SwInchargeAssignToQcComment,
                //                STUFF((SELECT ', '  + sw.Status FROM  SwQcAssigns sw where sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                //                and sw.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
                //                ORDER BY sw.SwQcUserId FOR XML PATH('')),1,2,'')  AS  AllAssignedQcsProjectStatus
                //                from ProjectMasters pm
                //                inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
                //                inner join TestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
                //                inner join SwQcAssigns si on sqia.SwQcInchargeAssignId = si.SwQcInchargeAssignId
                //                inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
                //                inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId
                //                where pm.ProjectMasterId=si.ProjectMasterId and sqia.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  and
                //                sqia.QcInchargeToQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                //                and  ((sqia.QcProjectFinisedTime  between '{0} 00:00:01' And '{1} 23:59:59') or sqia.QcProjectFinisedTime is null )
                //                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                //                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                //                sqia.SwQcInchargeAssignTime,cmn.UserFullName,
                //                sqia.ProjectManagerAssignToQcInTime,sqia.Status,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,sqia.QcInchargeToQcAssignTime,
                //                sqia.QcProjectFinisedTime,sqia.QcInchargeToPmProjectSubmitTime,pm.OrderNuber", startValue, endValue);

                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.SourcingType,sqia.SoftwareVersionName,sqia.SoftwareVersionNo,pm.ProjectName,pm.OrderNuber,pm.SupplierModelName,pm.SupplierName,sqia.SwQcHeadAssignId,sqia.TestPhaseID,tp.TestPhaseName,
                cmn.UserFullName as ProjectManagerUserName,sqia.PmToQcHeadAssignTime,sqia.Status,sqia.SwQcHeadToQcAssignTime,sqia.SwQcFinishedTime,sqia.SwQcHeadToPmSubmitTime,
                STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=sqia.SwQcHeadAssignId 
                WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                STUFF((SELECT ', '  + sw.SwQcHeadToQcAssignComment FROM  SwQcAssignsFromQcHead sw where sw.ProjectMasterId=pm.ProjectMasterId  and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=sqia.SwQcHeadAssignId 
                ORDER BY sw.SwQcHeadToQcAssignComment FOR XML PATH('')),1,2,'')  AS  SwInchargeAssignToQcComment,
                STUFF((SELECT ', '  + sw.Status FROM  SwQcAssignsFromQcHead sw where sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=sqia.SwQcHeadAssignId 
                ORDER BY sw.SwQcUserId FOR XML PATH('')),1,2,'')  AS  AllAssignedQcsProjectStatus,
                sqia.IsFinalPhaseMP,
                case when sqia.IsFinalPhaseMP='true' then 'YES' else 'NO' end as IsFinalPhaseMPs,sqia.SwQcHeadToQcAssignComment


                from ProjectMasters pm
                inner join SwQcHeadAssignsFromPm sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
                inner join SwQcTestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
                inner join SwQcAssignsFromQcHead si on sqia.SwQcHeadAssignId = si.SwQcHeadAssignId
                inner join CmnUsers cmn on sqia.ProjectManagerUserId = cmn.CmnUserId
                where pm.ProjectMasterId=si.ProjectMasterId and sqia.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  and
                sqia.SwQcHeadToQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                and  ((sqia.SwQcFinishedTime  between '{0} 00:00:01' And '{1} 23:59:59') or sqia.SwQcFinishedTime is null )
                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                sqia.SwQcHeadToPmSubmitTime,cmn.UserFullName,
                sqia.PmToQcHeadAssignTime,sqia.Status,sqia.SwQcHeadAssignId,sqia.TestPhaseID,tp.TestPhaseName,sqia.SwQcHeadToQcAssignTime,
                sqia.SwQcFinishedTime,sqia.SwQcHeadToPmSubmitTime,pm.OrderNuber,sqia.SoftwareVersionName,sqia.SoftwareVersionNo,pm.SourcingType,sqia.IsFinalPhaseMP,sqia.SwQcHeadToQcAssignComment", startValue, endValue);
            }
            else
            {
                //                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.OrderNuber,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,
                //                cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,si.Status,si.SwQcAssignTime,si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime, 
                //                si.SwInchargeAssignToQcComment,cmn1.UserFullName as QcAssignedPerson,cmn1.EmployeeCode as QcAssignedPersonID
                //                from ProjectMasters pm
                //                inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
                //                inner join TestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
                //                inner join SwQcAssigns si on sqia.SwQcInchargeAssignId = si.SwQcInchargeAssignId
                //                inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
                //                inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId
                //                inner join CmnUsers cmn1 on si.SwQcUserId=cmn1.CmnUserId 
                //                and si.ProjectMasterId=pm.ProjectMasterId 
                //                and si.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
                //                where pm.ProjectMasterId=si.ProjectMasterId and sqia.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  			
                //                and si.SwQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                //                and  ((si.SwQcEndTime  between '{0} 00:00:01' And '{1} 23:59:59') or si.SwQcEndTime is null )
                //                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                //                and cmn1.EmployeeCode='{2}'
                //                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                //                sqia.SwQcInchargeAssignTime,cmn.UserFullName,
                //                sqia.ProjectManagerAssignToQcInTime,si.Status,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,si.SwQcAssignTime,pm.OrderNuber,
                //                si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime,si.SwInchargeAssignToQcComment,cmn1.UserFullName,cmn1.EmployeeCode
                //                order by pm.ProjectMasterId desc", startValue, endValue, emplyCode);
                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.OrderNuber,pm.SourcingType,sqia.SoftwareVersionName,sqia.SoftwareVersionNo,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,sqia.SwQcHeadToQcAssignTime,sqia.SwQcHeadAssignId,sqia.TestPhaseID,tp.TestPhaseName,
                cmn.UserFullName as ProjectManagerUserName,sqia.PmToQcHeadAssignTime,si.Status,si.SwQcStartTime,si.SwQcEndTime,sqia.SwQcHeadToPmSubmitTime, 
                si.SwQcHeadToQcAssignComment,cmn1.UserFullName as QcAssignedPerson,cmn1.EmployeeCode as QcAssignedPersonID,
                sqia.IsFinalPhaseMP,
                case when sqia.IsFinalPhaseMP='true' then 'YES' else 'NO' end as IsFinalPhaseMPs,sqia.SwQcHeadToQcAssignComment
                from ProjectMasters pm
                inner join SwQcHeadAssignsFromPm sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
                inner join SwQcTestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
                inner join SwQcAssignsFromQcHead si on sqia.SwQcHeadAssignId = si.SwQcHeadAssignId
                inner join CmnUsers cmn on sqia.ProjectManagerUserId = cmn.CmnUserId
                inner join CmnUsers cmn1 on si.SwQcUserId=cmn1.CmnUserId 
                and si.ProjectMasterId=pm.ProjectMasterId 
                and si.SwQcHeadAssignId=sqia.SwQcHeadAssignId 
                where pm.ProjectMasterId=si.ProjectMasterId and sqia.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  			
                and si.SwQcStartTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                and  ((si.SwQcEndTime  between '{0} 00:00:01' And '{1} 23:59:59') or si.SwQcEndTime is null )
                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                and cmn1.EmployeeCode='{2}'
                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                sqia.SwQcHeadToQcAssignTime,cmn.UserFullName,
                sqia.PmToQcHeadAssignTime,si.Status,sqia.SwQcHeadAssignId,sqia.TestPhaseID,tp.TestPhaseName,si.SwQcStartTime,pm.OrderNuber,
                si.SwQcEndTime,sqia.SwQcHeadToPmSubmitTime,si.SwQcHeadToQcAssignComment,cmn1.UserFullName,cmn1.EmployeeCode,pm.SourcingType,
                sqia.SoftwareVersionName,sqia.SoftwareVersionNo,sqia.IsFinalPhaseMP,sqia.SwQcHeadToQcAssignComment
                order by pm.ProjectMasterId desc", startValue, endValue, emplyCode);
            }


            var getAssignedProjectToQCStatusForInchargeDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();

            foreach (var project in getAssignedProjectToQCStatusForInchargeDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ", " + project.SourcingType + ")";
                }

            }

            return getAssignedProjectToQCStatusForInchargeDashboard;

        }

        public List<SoftwareCustomModelForDashboard> GetAllFieldTestListForInchargeReport(string startValue, string endValue, string emplyCode)
        {
            string getAssignedProjectToQCStatusForInchargeDashboardQuery;

            if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
            {
                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.SourcingType,si.SoftwareVersionName,si.SoftwareVersionNo,pm.ProjectName,pm.OrderNuber,pm.SupplierModelName,pm.SupplierName,
                si.SwQcHeadAssignId,si.TestPhaseID,tp.TestPhaseName,
                cmn.UserFullName as ProjectManagerUserName,si.PmToQcHeadAssignTime,si.Status,si.SwQcHeadToQcAssignTime,si.SwQcEndTime,si.SwQcHeadToPmSubmitTime,
                STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=si.SwQcHeadAssignId 
                WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                STUFF((SELECT ', '  + sw.SwQcHeadToQcAssignComment FROM  SwQcAssignsFromQcHead sw where sw.ProjectMasterId=pm.ProjectMasterId  and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=si.SwQcHeadAssignId 
                ORDER BY sw.SwQcHeadToQcAssignComment FOR XML PATH('')),1,2,'')  AS  SwQcHeadToQcAssignComment,
                STUFF((SELECT ', '  + sw.Status FROM  SwQcAssignsFromQcHead sw where sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')
                and sw.SwQcHeadAssignId=si.SwQcHeadAssignId 
                ORDER BY sw.SwQcUserId FOR XML PATH('')),1,2,'')  AS  AllAssignedQcsProjectStatus,
                si.IsFinalPhaseMP,
                case when si.IsFinalPhaseMP='true' then 'YES' else 'NO' end as IsFinalPhaseMPs,si.SwQcHeadToQcAssignComment

                from ProjectMasters pm
                inner join SwQcAssignsFromQcHead si on pm.ProjectMasterId = si.ProjectMasterId
                inner join SwQcTestPhase tp on tp.TestPhaseID=si.TestPhaseID
                inner join CmnUsers cmn on si.Added = cmn.CmnUserId
                where pm.ProjectMasterId=si.ProjectMasterId and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  and
                si.SwQcHeadToQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                and  ((si.SwQcEndTime  between '{0} 00:00:01' And '{1} 23:59:59') or si.SwQcEndTime is null )
                --si.SwQcHeadToQcAssignTime  between '2019-01-01 00:00:01' And '2019-04-01 23:59:59' 
                --and  ((si.SwQcEndTime  between '2019-01-01 00:00:01' And '2019-04-01 23:59:59') or si.SwQcEndTime is null )
                and si.SwQcHeadAssignId=0
                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                si.SwQcHeadToPmSubmitTime,cmn.UserFullName,
                si.PmToQcHeadAssignTime,si.Status,si.SwQcHeadAssignId,si.TestPhaseID,tp.TestPhaseName,si.SwQcHeadToQcAssignTime,
                si.SwQcEndTime,si.SwQcHeadToPmSubmitTime,pm.OrderNuber,si.SoftwareVersionName,si.SoftwareVersionNo,pm.SourcingType,si.IsFinalPhaseMP,si.SwQcHeadToQcAssignComment", startValue, endValue);
            }
            else
            {
                getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.OrderNuber,pm.SourcingType,si.SoftwareVersionName,si.SoftwareVersionNo,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,si.SwQcHeadToQcAssignTime,si.SwQcHeadAssignId,si.TestPhaseID,tp.TestPhaseName,
                cmn.UserFullName as ProjectManagerUserName,si.PmToQcHeadAssignTime,si.Status,si.SwQcStartTime,si.SwQcEndTime,si.SwQcHeadToPmSubmitTime, 
                si.SwQcHeadToQcAssignComment,cmn1.UserFullName as QcAssignedPerson,cmn1.EmployeeCode as QcAssignedPersonID,
                si.IsFinalPhaseMP,
                case when si.IsFinalPhaseMP='true' then 'YES' else 'NO' end as IsFinalPhaseMPs,si.SwQcHeadToQcAssignComment
                from ProjectMasters pm
                inner join SwQcAssignsFromQcHead si on si.ProjectMasterId = pm.ProjectMasterId
                inner join SwQcTestPhase tp on tp.TestPhaseID=si.TestPhaseID
                inner join CmnUsers cmn on si.Added = cmn.CmnUserId
                inner join CmnUsers cmn1 on si.SwQcUserId=cmn1.CmnUserId 
 
                where pm.ProjectMasterId=si.ProjectMasterId and si.SwQcHeadAssignId=0 and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED') 	
                --si.SwQcHeadToQcAssignTime  between '2019-01-01 00:00:01' And '2019-04-01 23:59:59' 
                --and  ((si.SwQcEndTime  between '2019-01-01 00:00:01' And '2019-04-01 23:59:59') or si.SwQcEndTime is null )	
                and si.SwQcHeadToQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
                and  ((si.SwQcEndTime  between '{0} 00:00:01' And '{1} 23:59:59') or si.SwQcEndTime is null)
                and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
                and cmn1.EmployeeCode='{2}'
                group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
                si.SwQcHeadToQcAssignTime,cmn.UserFullName,
                si.PmToQcHeadAssignTime,si.Status,si.SwQcHeadAssignId,si.TestPhaseID,tp.TestPhaseName,si.SwQcStartTime,pm.OrderNuber,
                si.SwQcEndTime,si.SwQcHeadToPmSubmitTime,si.SwQcHeadToQcAssignComment,cmn1.UserFullName,cmn1.EmployeeCode,pm.SourcingType,
                si.SoftwareVersionName,si.SoftwareVersionNo,si.IsFinalPhaseMP,si.SwQcHeadToQcAssignComment
                order by pm.ProjectMasterId desc", startValue, endValue, emplyCode);
            }


            var getAssignedProjectToQCStatusForInchargeDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();

            foreach (var project in getAssignedProjectToQCStatusForInchargeDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ", " + project.SourcingType + ")";
                }

            }

            return getAssignedProjectToQCStatusForInchargeDashboard;
        }


        public string AllApproveForChaina(List<SwQcIssueDetailModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                if (insResult.SwQcAssignId != 0 && insResult.SwQcIssueId != 0)
                {
                    var swqc = (from c in _dbEntities.SwQcIssueDetails
                                where c.SwQcAssignId == insResult.SwQcAssignId && c.SwQcIssueId == insResult.SwQcIssueId
                                select c).FirstOrDefault();


                    swqc.IsApprovedForChina = true;
                    swqc.Updated = userId;
                    swqc.UpdatedDate = DateTime.Now;
                    _dbEntities.SwQcIssueDetails.AddOrUpdate(swqc);

                    _dbEntities.SaveChanges();
                }

            }
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string SwQcIssueDelete(SwQcIssueDetailModel supplierUpdate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var insertIntoDeleteLog = (from c in _dbEntities.SwQcIssueDetails
                                       where c.SwQcIssueId == supplierUpdate.SwQcIssueId
                                       select c).FirstOrDefault();

            if (insertIntoDeleteLog != null)
            {
                var qcdeLog = new SwQcIssueDetailsDeleteLog();
                qcdeLog.SwQcIssueId = insertIntoDeleteLog.SwQcIssueId;
                qcdeLog.SwQcHeadAssignId = insertIntoDeleteLog.SwQcHeadAssignId;
                qcdeLog.SwQcAssignId = insertIntoDeleteLog.SwQcAssignId;
                qcdeLog.ProjectPmAssignId = insertIntoDeleteLog.ProjectPmAssignId;
                qcdeLog.ProjectMasterId = insertIntoDeleteLog.ProjectMasterId;
                qcdeLog.OrderNumber = insertIntoDeleteLog.OrderNumber;
                qcdeLog.ProjectName = insertIntoDeleteLog.ProjectName;
                qcdeLog.ProjectType = insertIntoDeleteLog.ProjectType;
                qcdeLog.IssueScenario = insertIntoDeleteLog.IssueScenario;
                qcdeLog.ExpectedOutcome = insertIntoDeleteLog.ExpectedOutcome;
                qcdeLog.IssueDetails = insertIntoDeleteLog.IssueDetails;
                qcdeLog.RefernceModule = insertIntoDeleteLog.RefernceModule;
                qcdeLog.Frequency = insertIntoDeleteLog.Frequency;
                qcdeLog.IssueReproducePath = insertIntoDeleteLog.IssueReproducePath;
                qcdeLog.Attachment = insertIntoDeleteLog.Attachment;
                qcdeLog.IssueType = insertIntoDeleteLog.IssueType;
                qcdeLog.Result = insertIntoDeleteLog.Result;
                qcdeLog.TestPhaseID = insertIntoDeleteLog.TestPhaseID;
                qcdeLog.SoftwareVersionName = insertIntoDeleteLog.SoftwareVersionName;
                qcdeLog.SoftwareVersionNo = insertIntoDeleteLog.SoftwareVersionNo;
                qcdeLog.FilesUrl = insertIntoDeleteLog.FilesUrl;
                qcdeLog.FilesDetail = insertIntoDeleteLog.FilesDetail;
                qcdeLog.Upload = insertIntoDeleteLog.Upload;
                qcdeLog.IsFile = insertIntoDeleteLog.IsFile;
                qcdeLog.IsIssue = insertIntoDeleteLog.IsIssue;
                qcdeLog.WaltonQcComDate = insertIntoDeleteLog.WaltonQcComDate;
                qcdeLog.WaltonQcComment = insertIntoDeleteLog.WaltonQcComment;
                qcdeLog.WaltonQcStatus = insertIntoDeleteLog.WaltonQcStatus;
                qcdeLog.FixedVersion = insertIntoDeleteLog.FixedVersion;
                qcdeLog.SupplierComDate = insertIntoDeleteLog.SupplierComDate;
                qcdeLog.SupplierComment = insertIntoDeleteLog.SupplierComment;
                qcdeLog.SupplierStatus = insertIntoDeleteLog.SupplierStatus;
                qcdeLog.WaltonPmComDate = insertIntoDeleteLog.WaltonPmComDate;
                qcdeLog.WaltonPmComment = insertIntoDeleteLog.WaltonPmComment;
                qcdeLog.WaltonPmStatus = insertIntoDeleteLog.WaltonPmStatus;
                qcdeLog.IsSmart = insertIntoDeleteLog.IsSmart;
                qcdeLog.IsFeature = insertIntoDeleteLog.IsFeature;
                qcdeLog.IsWalpad = insertIntoDeleteLog.IsWalpad;
                qcdeLog.IsTab = insertIntoDeleteLog.IsTab;
                qcdeLog.IsApprovedForChina = insertIntoDeleteLog.IsApprovedForChina;
                qcdeLog.IsApprovedForIncentive = insertIntoDeleteLog.IsApprovedForIncentive;
                qcdeLog.FieldTestFrom = insertIntoDeleteLog.FieldTestFrom;
                qcdeLog.SupplierFeedbackForAppend = insertIntoDeleteLog.SupplierFeedbackForAppend;
                qcdeLog.Added = insertIntoDeleteLog.Added;
                qcdeLog.AddedDate = insertIntoDeleteLog.AddedDate;
                qcdeLog.Updated = insertIntoDeleteLog.Updated;
                qcdeLog.UpdatedDate = insertIntoDeleteLog.UpdatedDate;
                qcdeLog.IssueSerial = insertIntoDeleteLog.IssueSerial;

                _dbEntities.SwQcIssueDetailsDeleteLogs.Add(qcdeLog);
                _dbEntities.SaveChanges();

            }
            var updatedAssembly = (from c in _dbEntities.SwQcIssueDetails
                                   where c.SwQcIssueId == supplierUpdate.SwQcIssueId
                                   select c).FirstOrDefault();

            _dbEntities.SwQcIssueDetails.Remove(updatedAssembly);
            _dbEntities.SaveChanges();
            return "OK";
        }



        #region com
        //        public List<SoftwareCustomModelForDashboard> GetAllProjectListDetailsOfQcPersonForInchargeReport(string startValue, string endValue, string emplyCode)
        //        {

        //            string getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,
        //            cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,si.Status,si.SwQcAssignTime,si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime, 
        //            si.SwInchargeAssignToQcComment,cmn1.UserFullName as QcAssignedPerson,cmn1.EmployeeCode as QcAssignedPersonID
        //            from ProjectMasters pm
        //            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
        //            inner join TestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
        //            inner join SwQcAssigns si on sqia.SwQcInchargeAssignId = si.SwQcInchargeAssignId
        //            inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
        //            inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId
        //            inner join CmnUsers cmn1 on si.SwQcUserId=cmn1.CmnUserId 
        //            and si.ProjectMasterId=pm.ProjectMasterId 
        //            and si.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
        //            where pm.ProjectMasterId=si.ProjectMasterId and sqia.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  			
        //            and sqia.QcInchargeToQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
        //            and  ((sqia.QcProjectFinisedTime  between '{0} 00:00:01' And '{1} 23:59:59') or sqia.QcProjectFinisedTime is null )
        //            and si.Status in ('RECOMMENDED','PAUSED','QCCOMPLETED','ASSIGNED')  
        //            and cmn1.EmployeeCode='{2}'
        //            group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
        //            sqia.SwQcInchargeAssignTime,cmn.UserFullName,
        //            sqia.ProjectManagerAssignToQcInTime,si.Status,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,si.SwQcAssignTime,
        //            si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime,si.SwInchargeAssignToQcComment,cmn1.UserFullName,cmn1.EmployeeCode
        //            order by pm.ProjectMasterId desc", startValue, endValue, emplyCode);

        //            var getAssignedProjectToQCStatusForInchargeDashboard =
        //                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
        //                    getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();
        //            return getAssignedProjectToQCStatusForInchargeDashboard;

        //        }
        #endregion
        /// ////////////showing Report Data Details after click on TestPhaase///////////
        public List<SwQcStartUpModel> GetStartUpsForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStartUpModel>();

            if (projectId > 0)
            {

                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var startUps = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStartUpModel
                                   {

                                       SwQcStartUpId = startUp.SwQcStartUpId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = startUps.ToList();

                }
                else
                {
                    var startUps1 = from swa in _dbEntities.SwQcAssigns
                                    join startUp in _dbEntities.SwQcStartUps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                    join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                    join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                    where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                    && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                    && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                    // ReSharper disable once ImplicitlyCapturedClosure
                                    select new SwQcStartUpModel
                                    {

                                        SwQcStartUpId = startUp.SwQcStartUpId,
                                        ProjectMasterId = projectId,
                                        IsIssueChecked = startUp.IsIssueChecked ?? false,
                                        IssueComment = startUp.IssueComment,
                                        Result = startUp.Result,
                                        IssueType = startUp.IssueType,
                                        Frequency = startUp.Frequency,
                                        IssueReproducePath = startUp.IssueReproducePath,
                                        UploadedFile = startUp.UploadedFile,
                                        SwQcAssignId = swa.SwQcAssignId,
                                        QcCategoryName = sii.QcCategoryName,
                                        SwQcIssueId = sii.SwQcIssueId,
                                        SwQcDescription = sii.QcDescription,
                                        StartTime = startUp.StartTime,
                                        EndTime = startUp.EndTime,
                                        UserFullName = cmn.UserFullName,
                                        EmployeeCode = cmn.EmployeeCode,
                                        SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId,

                                    };
                    models = startUps1.ToList();

                }

            }

            return models;
        }

        public List<SwQcCallSettingModel> GetCallSettingForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCallSettingModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var callset = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCallSettingModel
                                  {

                                      SwQcCallSettingId = startUp.SwQcCallSettingId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = callset.ToList();
                }
                else
                {
                    var callset = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcCallSettings on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                      //&& swa.Status == "QCCOMPLETED"
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCallSettingModel
                                  {

                                      SwQcCallSettingId = startUp.SwQcCallSettingId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = callset.ToList();
                }



            }

            return models;
        }

        public List<SwQcMessageModel> GetMessageForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMessageModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var messg = from swa in _dbEntities.SwQcAssigns
                                join startUp in _dbEntities.SwQcMassages on swa.SwQcAssignId equals startUp.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId
                                && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                 && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcMessageModel
                                {

                                    SwQcMassageId = startUp.SwQcMassageId,
                                    ProjectMasterId = projectId,
                                    IsIssueChecked = startUp.IsIssueChecked ?? false,
                                    IssueComment = startUp.IssueComment,
                                    Result = startUp.Result,
                                    IssueType = startUp.IssueType,
                                    Frequency = startUp.Frequency,
                                    IssueReproducePath = startUp.IssueReproducePath,
                                    UploadedFile = startUp.UploadedFile,
                                    SwQcAssignId = swa.SwQcAssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = startUp.StartTime,
                                    EndTime = startUp.EndTime,
                                    UserFullName = cmn.UserFullName,
                                    EmployeeCode = cmn.EmployeeCode,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                };
                    models = messg.ToList();
                }
                else
                {
                    var messg = from swa in _dbEntities.SwQcAssigns
                                join startUp in _dbEntities.SwQcMassages on swa.SwQcAssignId equals startUp.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcMessageModel
                                {

                                    SwQcMassageId = startUp.SwQcMassageId,
                                    ProjectMasterId = projectId,
                                    IsIssueChecked = startUp.IsIssueChecked ?? false,
                                    IssueComment = startUp.IssueComment,
                                    Result = startUp.Result,
                                    IssueType = startUp.IssueType,
                                    Frequency = startUp.Frequency,
                                    IssueReproducePath = startUp.IssueReproducePath,
                                    UploadedFile = startUp.UploadedFile,
                                    SwQcAssignId = swa.SwQcAssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = startUp.StartTime,
                                    EndTime = startUp.EndTime,
                                    UserFullName = cmn.UserFullName,
                                    EmployeeCode = cmn.EmployeeCode,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                };
                    models = messg.ToList();
                }



            }

            return models;
        }

        public List<SwQcToolsCheckModel> GetToolsForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcToolsCheckModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var tollschk = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcToolsCheckModel
                                   {

                                       SwQcToolsCheckId = startUp.SwQcToolsCheckId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = tollschk.ToList();
                }
                else
                {
                    var tollschk = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcToolsChecks on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                   where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                       //&& swa.Status == "QCCOMPLETED"
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcToolsCheckModel
                                   {

                                       SwQcToolsCheckId = startUp.SwQcToolsCheckId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = tollschk.ToList();
                }



            }

            return models;
        }

        public List<SwQcCameraModel> GetCameraForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcCameraModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var cameras = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcCameras on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                      //&& swa.Status == "QCCOMPLETED"
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCameraModel
                                  {

                                      SwQcCameraId = startUp.SwQcCameraId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = cameras.ToList();

                }
                else
                {
                    var cameras = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcCameras on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcCameraModel
                                  {

                                      SwQcCameraId = startUp.SwQcCameraId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = cameras.ToList();

                }


            }

            return models;
        }

        public List<SwQcDisplayLoopModel> GetDisplayLoopForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayLoopModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var displayLoop = from swa in _dbEntities.SwQcAssigns
                                      join startUp in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals startUp.SwQcAssignId
                                      join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                      join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                      // ReSharper disable once ImplicitlyCapturedClosure
                                      where swa.ProjectMasterId == projectId
                                      && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                       && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                      // ReSharper disable once ImplicitlyCapturedClosure
                                      select new SwQcDisplayLoopModel
                                      {

                                          SwQcDisplayLoopId = startUp.SwQcDisplayLoopId,
                                          ProjectMasterId = projectId,
                                          IsIssueChecked = startUp.IsIssueChecked ?? false,
                                          IssueComment = startUp.IssueComment,
                                          Result = startUp.Result,
                                          IssueType = startUp.IssueType,
                                          Frequency = startUp.Frequency,
                                          IssueReproducePath = startUp.IssueReproducePath,
                                          UploadedFile = startUp.UploadedFile,
                                          SwQcAssignId = swa.SwQcAssignId,
                                          QcCategoryName = sii.QcCategoryName,
                                          SwQcIssueId = sii.SwQcIssueId,
                                          SwQcDescription = sii.QcDescription,
                                          StartTime = startUp.StartTime,
                                          EndTime = startUp.EndTime,
                                          UserFullName = cmn.UserFullName,
                                          EmployeeCode = cmn.EmployeeCode,
                                          SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                      };
                    models = displayLoop.ToList();
                }
                else
                {
                    var displayLoop = from swa in _dbEntities.SwQcAssigns
                                      join startUp in _dbEntities.SwQcDisplayLoops on swa.SwQcAssignId equals startUp.SwQcAssignId
                                      join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                      join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                      where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                      && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                       && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                      // ReSharper disable once ImplicitlyCapturedClosure
                                      select new SwQcDisplayLoopModel
                                      {

                                          SwQcDisplayLoopId = startUp.SwQcDisplayLoopId,
                                          ProjectMasterId = projectId,
                                          IsIssueChecked = startUp.IsIssueChecked ?? false,
                                          IssueComment = startUp.IssueComment,
                                          Result = startUp.Result,
                                          IssueType = startUp.IssueType,
                                          Frequency = startUp.Frequency,
                                          IssueReproducePath = startUp.IssueReproducePath,
                                          UploadedFile = startUp.UploadedFile,
                                          SwQcAssignId = swa.SwQcAssignId,
                                          QcCategoryName = sii.QcCategoryName,
                                          SwQcIssueId = sii.SwQcIssueId,
                                          SwQcDescription = sii.QcDescription,
                                          StartTime = startUp.StartTime,
                                          EndTime = startUp.EndTime,
                                          UserFullName = cmn.UserFullName,
                                          EmployeeCode = cmn.EmployeeCode,
                                          SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                      };
                    models = displayLoop.ToList();
                }

            }

            return models;
        }

        public List<SwQcDisplayModel> GetDisplayForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcDisplayModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var display = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcDisplayModel
                                  {
                                      SwQcDisplayId = startUp.SwQcDisplayId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = display.ToList();
                }
                else
                {
                    var display = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcDisplays on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcDisplayModel
                                  {
                                      SwQcDisplayId = startUp.SwQcDisplayId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = display.ToList();
                }

            }

            return models;
        }

        public List<SwQcSettingModel> GetSettingForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcSettingModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var settings = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcSettings on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                    && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcSettingModel
                                   {
                                       SwQcSettingsId = startUp.SwQcSettingsId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = settings.ToList();
                }
                else
                {
                    var settings = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcSettings on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                   where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                    && swa.SwQcInchargeAssignId == swqcInchargeAsngId
                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcSettingModel
                                   {
                                       SwQcSettingsId = startUp.SwQcSettingsId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = settings.ToList();
                }

            }

            return models;
        }

        public List<SwQcMultimediaModel> GetMultimediaForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcMultimediaModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var multis = from swa in _dbEntities.SwQcAssigns
                                 join startUp in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals startUp.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                 join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId
                                 && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                 && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcMultimediaModel
                                 {
                                     SwQcMultimediaId = startUp.SwQcMultimediaId,
                                     ProjectMasterId = projectId,
                                     IsIssueChecked = startUp.IsIssueChecked ?? false,
                                     IssueComment = startUp.IssueComment,
                                     Result = startUp.Result,
                                     IssueType = startUp.IssueType,
                                     Frequency = startUp.Frequency,
                                     IssueReproducePath = startUp.IssueReproducePath,
                                     UploadedFile = startUp.UploadedFile,
                                     SwQcAssignId = swa.SwQcAssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = startUp.StartTime,
                                     EndTime = startUp.EndTime,
                                     UserFullName = cmn.UserFullName,
                                     EmployeeCode = cmn.EmployeeCode,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                 };
                    models = multis.ToList();
                }
                else
                {
                    var multis = from swa in _dbEntities.SwQcAssigns
                                 join startUp in _dbEntities.SwQcMultimedias on swa.SwQcAssignId equals startUp.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                 join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                 where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                 && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                 && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcMultimediaModel
                                 {
                                     SwQcMultimediaId = startUp.SwQcMultimediaId,
                                     ProjectMasterId = projectId,
                                     IsIssueChecked = startUp.IsIssueChecked ?? false,
                                     IssueComment = startUp.IssueComment,
                                     Result = startUp.Result,
                                     IssueType = startUp.IssueType,
                                     Frequency = startUp.Frequency,
                                     IssueReproducePath = startUp.IssueReproducePath,
                                     UploadedFile = startUp.UploadedFile,
                                     SwQcAssignId = swa.SwQcAssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = startUp.StartTime,
                                     EndTime = startUp.EndTime,
                                     UserFullName = cmn.UserFullName,
                                     EmployeeCode = cmn.EmployeeCode,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                 };
                    models = multis.ToList();
                }

            }

            return models;
        }

        public List<SwQcGoogleServiceModel> GetGoogleServiceForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGoogleServiceModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var googles = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcGoogleServiceModel
                                  {
                                      SwQcGoogleServicesId = startUp.SwQcGoogleServicesId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = googles.ToList();
                }
                else
                {
                    var googles = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcGoogleServices on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcGoogleServiceModel
                                  {
                                      SwQcGoogleServicesId = startUp.SwQcGoogleServicesId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = googles.ToList();
                }

            }

            return models;
        }

        public List<SwQcStorageCheckModel> GetStorageCheckForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcStorageCheckModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var storages = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   where swa.ProjectMasterId == projectId
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStorageCheckModel
                                   {
                                       SwQcStorageCheckId = startUp.SwQcStorageCheckId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = storages.ToList();
                }
                else
                {
                    var storages = from swa in _dbEntities.SwQcAssigns
                                   join startUp in _dbEntities.SwQcStorageChecks on swa.SwQcAssignId equals startUp.SwQcAssignId
                                   join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                   join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                   where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                   && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                   && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                   // ReSharper disable once ImplicitlyCapturedClosure
                                   select new SwQcStorageCheckModel
                                   {
                                       SwQcStorageCheckId = startUp.SwQcStorageCheckId,
                                       ProjectMasterId = projectId,
                                       IsIssueChecked = startUp.IsIssueChecked ?? false,
                                       IssueComment = startUp.IssueComment,
                                       Result = startUp.Result,
                                       IssueType = startUp.IssueType,
                                       Frequency = startUp.Frequency,
                                       IssueReproducePath = startUp.IssueReproducePath,
                                       UploadedFile = startUp.UploadedFile,
                                       SwQcAssignId = swa.SwQcAssignId,
                                       QcCategoryName = sii.QcCategoryName,
                                       SwQcIssueId = sii.SwQcIssueId,
                                       SwQcDescription = sii.QcDescription,
                                       StartTime = startUp.StartTime,
                                       EndTime = startUp.EndTime,
                                       UserFullName = cmn.UserFullName,
                                       EmployeeCode = cmn.EmployeeCode,
                                       SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                   };
                    models = storages.ToList();
                }

            }

            return models;
        }

        public List<SwQcGameModel> GetGameForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcGameModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var games = from swa in _dbEntities.SwQcAssigns
                                join startUp in _dbEntities.SwQcGames on swa.SwQcAssignId equals startUp.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                where swa.ProjectMasterId == projectId
                                && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcGameModel
                                {
                                    SwQcGameId = startUp.SwQcGameId,
                                    ProjectMasterId = projectId,
                                    IsIssueChecked = startUp.IsIssueChecked ?? false,
                                    IssueComment = startUp.IssueComment,
                                    Result = startUp.Result,
                                    IssueType = startUp.IssueType,
                                    Frequency = startUp.Frequency,
                                    IssueReproducePath = startUp.IssueReproducePath,
                                    UploadedFile = startUp.UploadedFile,
                                    SwQcAssignId = swa.SwQcAssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = startUp.StartTime,
                                    EndTime = startUp.EndTime,
                                    UserFullName = cmn.UserFullName,
                                    EmployeeCode = cmn.EmployeeCode,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                };
                    models = games.ToList();
                }
                else
                {
                    var games = from swa in _dbEntities.SwQcAssigns
                                join startUp in _dbEntities.SwQcGames on swa.SwQcAssignId equals startUp.SwQcAssignId
                                join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                // ReSharper disable once ImplicitlyCapturedClosure
                                select new SwQcGameModel
                                {
                                    SwQcGameId = startUp.SwQcGameId,
                                    ProjectMasterId = projectId,
                                    IsIssueChecked = startUp.IsIssueChecked ?? false,
                                    IssueComment = startUp.IssueComment,
                                    Result = startUp.Result,
                                    IssueType = startUp.IssueType,
                                    Frequency = startUp.Frequency,
                                    IssueReproducePath = startUp.IssueReproducePath,
                                    UploadedFile = startUp.UploadedFile,
                                    SwQcAssignId = swa.SwQcAssignId,
                                    QcCategoryName = sii.QcCategoryName,
                                    SwQcIssueId = sii.SwQcIssueId,
                                    SwQcDescription = sii.QcDescription,
                                    StartTime = startUp.StartTime,
                                    EndTime = startUp.EndTime,
                                    UserFullName = cmn.UserFullName,
                                    EmployeeCode = cmn.EmployeeCode,
                                    SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                };
                    models = games.ToList();
                }

            }

            return models;
        }

        public List<SwQcTestingAppModel> GetTestingAppForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcTestingAppModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var testing = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcTestingAppModel
                                  {
                                      SwQcTestingAppId = startUp.SwQcTestingAppId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = testing.ToList();
                }
                else
                {
                    var testing = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcTestingApps on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcTestingAppModel
                                  {
                                      SwQcTestingAppId = startUp.SwQcTestingAppId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = testing.ToList();
                }

            }

            return models;
        }

        public List<SwQcFileManagerModel> GetFileManageForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcFileManagerModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var testing = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcFileManagerModel
                                  {
                                      SwQcFileManagerId = startUp.SwQcFileManagerId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = testing.ToList();
                }
                else
                {
                    var testing = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcFileManagers on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcFileManagerModel
                                  {
                                      SwQcFileManagerId = startUp.SwQcFileManagerId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = testing.ToList();
                }

            }

            return models;
        }

        public List<SwQcConnectivityModel> GetConnectivityForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcConnectivityModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var connect = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where swa.ProjectMasterId == projectId
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcConnectivityModel
                                  {
                                      SwQcConnectivityId = startUp.SwQcConnectivityId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = connect.ToList();
                }
                else
                {
                    var connect = from swa in _dbEntities.SwQcAssigns
                                  join startUp in _dbEntities.SwQcConnectivities on swa.SwQcAssignId equals startUp.SwQcAssignId
                                  join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                  join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                  where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                  && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcConnectivityModel
                                  {
                                      SwQcConnectivityId = startUp.SwQcConnectivityId,
                                      ProjectMasterId = projectId,
                                      IsIssueChecked = startUp.IsIssueChecked ?? false,
                                      IssueComment = startUp.IssueComment,
                                      Result = startUp.Result,
                                      IssueType = startUp.IssueType,
                                      Frequency = startUp.Frequency,
                                      IssueReproducePath = startUp.IssueReproducePath,
                                      UploadedFile = startUp.UploadedFile,
                                      SwQcAssignId = swa.SwQcAssignId,
                                      QcCategoryName = sii.QcCategoryName,
                                      SwQcIssueId = sii.SwQcIssueId,
                                      SwQcDescription = sii.QcDescription,
                                      StartTime = startUp.StartTime,
                                      EndTime = startUp.EndTime,
                                      UserFullName = cmn.UserFullName,
                                      EmployeeCode = cmn.EmployeeCode,
                                      SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                  };
                    models = connect.ToList();
                }

            }

            return models;
        }

        public List<SwQcShutDownModel> GetShutDownForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcShutDownModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {
                    var shutdn = from swa in _dbEntities.SwQcAssigns
                                 join startUp in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals startUp.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                 join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 where swa.ProjectMasterId == projectId
                                 && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                 && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcShutDownModel
                                 {
                                     SwQcShutDownId = startUp.SwQcShutDownId,
                                     ProjectMasterId = projectId,
                                     IsIssueChecked = startUp.IsIssueChecked ?? false,
                                     IssueComment = startUp.IssueComment,
                                     Result = startUp.Result,
                                     IssueType = startUp.IssueType,
                                     Frequency = startUp.Frequency,
                                     IssueReproducePath = startUp.IssueReproducePath,
                                     UploadedFile = startUp.UploadedFile,
                                     SwQcAssignId = swa.SwQcAssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = startUp.StartTime,
                                     EndTime = startUp.EndTime,
                                     UserFullName = cmn.UserFullName,
                                     EmployeeCode = cmn.EmployeeCode,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                 };
                    models = shutdn.ToList();
                }
                else
                {
                    var shutdn = from swa in _dbEntities.SwQcAssigns
                                 join startUp in _dbEntities.SwQcShutDowns on swa.SwQcAssignId equals startUp.SwQcAssignId
                                 join sii in _dbEntities.SwQcIssues on startUp.SwQcIssueId equals sii.SwQcIssueId
                                 join cmn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmn.CmnUserId

                                 where swa.ProjectMasterId == projectId && cmn.EmployeeCode == emplyCode
                                 && swa.SwQcUserId == startUp.Added && swa.Status != "INACTIVE"
                                 && swa.SwQcInchargeAssignId == swqcInchargeAsngId

                                 // ReSharper disable once ImplicitlyCapturedClosure
                                 select new SwQcShutDownModel
                                 {
                                     SwQcShutDownId = startUp.SwQcShutDownId,
                                     ProjectMasterId = projectId,
                                     IsIssueChecked = startUp.IsIssueChecked ?? false,
                                     IssueComment = startUp.IssueComment,
                                     Result = startUp.Result,
                                     IssueType = startUp.IssueType,
                                     Frequency = startUp.Frequency,
                                     IssueReproducePath = startUp.IssueReproducePath,
                                     UploadedFile = startUp.UploadedFile,
                                     SwQcAssignId = swa.SwQcAssignId,
                                     QcCategoryName = sii.QcCategoryName,
                                     SwQcIssueId = sii.SwQcIssueId,
                                     SwQcDescription = sii.QcDescription,
                                     StartTime = startUp.StartTime,
                                     EndTime = startUp.EndTime,
                                     UserFullName = cmn.UserFullName,
                                     EmployeeCode = cmn.EmployeeCode,
                                     SwQcInchargeAssignId = (long)swa.SwQcInchargeAssignId

                                 };
                    models = shutdn.ToList();
                }

            }

            return models;
        }

        public List<SwQcProjectWiseIssueViewModel> GetProjectWiseIssueViewModelsForDetailsReport(long projectId, long swqcInchargeAsngId, string emplyCode)
        {
            long userId = 0;
            string identity = System.Web.HttpContext.Current.User.Identity.Name;
            if (identity != null)
            {
                userId = Convert.ToInt64(identity);
            }
            var fileManager = new FileManager();
            var models = new List<SwQcProjectWiseIssueViewModel>();
            if (projectId > 0)
            {
                if (String.IsNullOrEmpty(emplyCode) || emplyCode.Trim().Length == 0)
                {

                    var swQcPro = from spa in _dbEntities.SwQcProjectWiseIssues
                                  join swa in _dbEntities.SwQcAssigns on spa.SwQcAssignId equals swa.SwQcAssignId
                                  join sia in _dbEntities.SwQcInchargeAssigns on spa.SwQcInchargeAssignId equals sia.SwQcInchargeAssignId
                                  join cmnn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmnn.CmnUserId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  where spa.ProjectMasterId == projectId
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId && swa.Status != "INACTIVE"
                                  && sia.SwQcInchargeAssignId == swa.SwQcInchargeAssignId
                                  // && sia.SwQcInchargeUserId == userId

                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcProjectWiseIssueViewModel
                                  {
                                      ProjectMasterId = projectId,
                                      IssueName = spa.IssueName,
                                      Comment = spa.Comment,
                                      RefBy = spa.RefBy,
                                      RefernceModule = spa.RefernceModule,
                                      //IsSmart = spa.IsSmart,
                                      //IsFeature = spa.IsFeature,
                                      //IsWalpad = spa.IsWalpad,
                                      Result = spa.Result,
                                      IssueType = spa.IssueType,
                                      Frequency = spa.Frequency,
                                      IssueReproducePath = spa.IssueReproducePath,
                                      SwQcAssignId = spa.SwQcAssignId,
                                      SwQcInchargeAssignId = spa.SwQcInchargeAssignId,
                                      SwQcProjectWiseIssueId = spa.SwQcProjectWiseIssueId,
                                      StartTime = spa.StartTime,
                                      EndTime = spa.EndTime,
                                      UserFullName = cmnn.UserFullName,
                                      EmployeeCode = cmnn.EmployeeCode,
                                      UploadedFile = spa.Upload
                                  };
                    models = swQcPro.ToList();
                }
                else
                {

                    var swQcPro = from spa in _dbEntities.SwQcProjectWiseIssues
                                  join swa in _dbEntities.SwQcAssigns on spa.SwQcAssignId equals swa.SwQcAssignId
                                  join sia in _dbEntities.SwQcInchargeAssigns on spa.SwQcInchargeAssignId equals sia.SwQcInchargeAssignId
                                  join cmnn in _dbEntities.CmnUsers on swa.SwQcUserId equals cmnn.CmnUserId
                                  where spa.ProjectMasterId == projectId && cmnn.EmployeeCode == emplyCode
                                  && swa.SwQcInchargeAssignId == swqcInchargeAsngId && swa.Status != "INACTIVE"
                                      //&& sia.SwQcInchargeUserId == userId
                                    && sia.SwQcInchargeAssignId == swa.SwQcInchargeAssignId
                                  // ReSharper disable once ImplicitlyCapturedClosure
                                  select new SwQcProjectWiseIssueViewModel
                                  {
                                      ProjectMasterId = projectId,
                                      IssueName = spa.IssueName,
                                      Comment = spa.Comment,
                                      RefBy = spa.RefBy,
                                      RefernceModule = spa.RefernceModule,
                                      //IsSmart = spa.IsSmart,
                                      //IsFeature = spa.IsFeature,
                                      //IsWalpad = spa.IsWalpad,
                                      Result = spa.Result,
                                      IssueType = spa.IssueType,
                                      Frequency = spa.Frequency,
                                      IssueReproducePath = spa.IssueReproducePath,
                                      SwQcAssignId = spa.SwQcAssignId,
                                      SwQcInchargeAssignId = spa.SwQcInchargeAssignId,
                                      SwQcProjectWiseIssueId = spa.SwQcProjectWiseIssueId,
                                      StartTime = spa.StartTime,
                                      EndTime = spa.EndTime,
                                      UserFullName = cmnn.UserFullName,
                                      EmployeeCode = cmnn.EmployeeCode,
                                      UploadedFile = spa.Upload
                                  };
                    models = swQcPro.ToList();
                }

            }
            return models;
        }

        #endregion

        #region Qc Report Dashboard
        public List<SoftwareCustomModelForDashboard> GetAllProjectListDetailsForQc(string startValue, string endValue, long userId)
        {

            string getAssignedProjectToQCStatusForInchargeDashboardQuery;

            getAssignedProjectToQCStatusForInchargeDashboardQuery = string.Format(@"select pm.ProjectMasterId,pm.OrderNuber,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,sqia.SwQcInchargeAssignTime,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,
            cmn.UserFullName as ProjectManagerUserName,sqia.ProjectManagerAssignToQcInTime,si.Status,si.SwQcAssignTime,si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime, 
            si.SwInchargeAssignToQcComment,cmn1.UserFullName as QcAssignedPerson,cmn1.EmployeeCode as QcAssignedPersonID,si.InactiveReasonComment
            from ProjectMasters pm
            inner join SwQcInchargeAssigns sqia on pm.ProjectMasterId = sqia.ProjectMasterId 
            inner join TestPhase tp on tp.TestPhaseID=sqia.TestPhaseID
            inner join SwQcAssigns si on sqia.SwQcInchargeAssignId = si.SwQcInchargeAssignId
            inner join ProjectPmAssigns pma on pm.ProjectMasterId = pma.ProjectMasterId
            inner join CmnUsers cmn on pma.ProjectManagerUserId = cmn.CmnUserId
            inner join CmnUsers cmn1 on si.SwQcUserId=cmn1.CmnUserId 
            and si.ProjectMasterId=pm.ProjectMasterId 
            and si.SwQcInchargeAssignId=sqia.SwQcInchargeAssignId 
            where pm.ProjectMasterId=si.ProjectMasterId 
            and si.SwQcAssignTime  between '{0} 00:00:01' And '{1} 23:59:59' 
            and  ((si.SwQcEndTime  between '{0} 00:00:01' And '{1} 23:59:59') or si.SwQcEndTime is null )
            and si.SwQcUserId={2}
            group by pm.ProjectMasterId ,pm.ProjectType,pm.ProjectName,pm.SupplierModelName,pm.SupplierName,
            sqia.SwQcInchargeAssignTime,cmn.UserFullName,
            sqia.ProjectManagerAssignToQcInTime,si.Status,sqia.SwQcInchargeAssignId,sqia.TestPhaseID,tp.TestPhaseName,si.SwQcAssignTime,pm.OrderNuber,
            si.SwQcEndTime,sqia.QcInchargeToPmProjectSubmitTime,si.SwInchargeAssignToQcComment,cmn1.UserFullName,cmn1.EmployeeCode,si.InactiveReasonComment
            order by pm.ProjectMasterId desc", startValue, endValue, userId);

            var getAssignedProjectToQCStatusForInchargeDashboard =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(
                    getAssignedProjectToQCStatusForInchargeDashboardQuery).ToList();

            foreach (var project in getAssignedProjectToQCStatusForInchargeDashboard)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return getAssignedProjectToQCStatusForInchargeDashboard;

        }
        #endregion

        #region Qc person Delete or Newly assign person

        public List<CmnUserModel> GetDeletedPersonNameList(long projectId, long swqcInchargeIds, long projectPmAssignIds)
        {
            string models = String.Format(@"
            select  cmn.UserFullName,cmn.CmnUserId,cmn.EmployeeCode
            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqa 
            left join CellPhoneProject.dbo.CmnUsers cmn on cmn.CmnUserId=sqa.SwQcUserId 
            where sqa.SwQcHeadAssignId='{1}' and sqa.Status not in ('QCCOMPLETED','RECOMMENDED','NEW','INACTIVE')  ORDER BY cmn.UserFullName", projectId, swqcInchargeIds, projectPmAssignIds);

            List<CmnUserModel> getUserInfoByUserId = _dbEntities.Database.SqlQuery<CmnUserModel>(models).ToList();
            return getUserInfoByUserId;
        }
        public string DeleteOrNewAssignQcByQcIncharge(long pMasterId, long pSwQcInId, long pPrPmAssignId,
            string multideleteValue, string multiReassignValue, string approxInchargeToQcDeliveryDate,
            string swInchargeDeleteQcComment, string swQcInchargeReassignToQcComment)
        {
            String userIdentity =
              HttpContext.Current.User.Identity.Name;
            ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            DateTime date;
            DateTime.TryParseExact(approxInchargeToQcDeliveryDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
                DateTimeStyles.None, out date);

            DateTime ApproxInchargeToQcDeliveryDate1 = date;

            if (pSwQcInId != 0)
            {
                if (multideleteValue.ToString().Trim() != "null")
                {

                    var multideleteValue11 = multideleteValue.Split(',');
                    foreach (string qcperson in multideleteValue11)
                    {
                        long qcId = Convert.ToInt64(qcperson);

                        //       var dbModel2 =
                        //_dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcHeadAssignId == pSwQcInId);

                        var dbModel =
                     _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcUserId == qcId && x.SwQcHeadAssignId == pSwQcInId);

                        if (dbModel != null)
                        {
                            dbModel.Status = "INACTIVE";
                            dbModel.UpdatedDate = DateTime.Now;
                            dbModel.Updated = userId;
                            _dbEntities.Entry(dbModel).State = EntityState.Modified;
                            _dbEntities.SaveChanges();
                            ///////////////////Delete/Inactive a QC///////////////

                            SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                            swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                            swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                            swQcInactiveOrAssignLog.ProjectPmAssignId = pPrPmAssignId;
                            swQcInactiveOrAssignLog.SwQcUserId = qcId;
                            swQcInactiveOrAssignLog.Status = "INACTIVE";
                            swQcInactiveOrAssignLog.IsInActive = true;
                            swQcInactiveOrAssignLog.IsAssign = false;
                            swQcInactiveOrAssignLog.InActiveReasonComment = swInchargeDeleteQcComment;
                            swQcInactiveOrAssignLog.ActivityDate = DateTime.Now;
                            swQcInactiveOrAssignLog.Added = userId;
                            swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                            _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                            _dbEntities.SaveChanges();

                        }

                    }

                    _dbEntities.SaveChanges();
                }

                if (multiReassignValue.ToString().Trim() != "null")
                {

                    SwQcHeadAssignsFromPm assign =
                 _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.SwQcHeadAssignId == pSwQcInId);

                    assign.Status = "ASSIGNED";
                    assign.SwQcHeadToQcAssignComment = swQcInchargeReassignToQcComment;
                    assign.SwQcHeadToQcAssignTime = DateTime.Now;
                    assign.Updated = userId;
                    assign.UpdatedDate = DateTime.Now;
                    _dbEntities.Entry(assign).State = EntityState.Modified;
                    _dbEntities.SaveChanges();

                    var multiReassignValue1 = multiReassignValue.Split(',');
                    foreach (string qcperson1 in multiReassignValue1)
                    {

                        long qcId1 = Convert.ToInt64(qcperson1);

                        var dbModel =
                     _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(
                         i => i.ProjectMasterId == pMasterId && i.SwQcUserId == qcId1 && i.SwQcHeadAssignId == pSwQcInId);

                        if (dbModel != null)
                        {
                            dbModel.Status = "ASSIGNED";
                            dbModel.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                            dbModel.Updated = userId;
                            dbModel.UpdatedDate = DateTime.Now;
                            dbModel.SwQcEndTime = null;
                            dbModel.SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime;
                            dbModel.SwQcStartTime = assign.SwQcHeadToQcAssignTime;
                            dbModel.Updated = userId;
                            dbModel.UpdatedDate = DateTime.Now;

                            _dbEntities.Entry(dbModel).State = EntityState.Modified;
                            _dbEntities.SaveChanges();

                            ///////////////////Newlyassign to QC///////////////

                            SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                            swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                            swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                            swQcInactiveOrAssignLog.ProjectPmAssignId = pPrPmAssignId;
                            swQcInactiveOrAssignLog.SwQcUserId = qcId1;
                            swQcInactiveOrAssignLog.Status = "NEWASSIGN";
                            swQcInactiveOrAssignLog.IsInActive = false;
                            swQcInactiveOrAssignLog.IsAssign = true;
                            swQcInactiveOrAssignLog.AssignComment = swQcInchargeReassignToQcComment;
                            swQcInactiveOrAssignLog.ActivityDate = DateTime.Now;
                            swQcInactiveOrAssignLog.Added = userId;
                            swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                            _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                            _dbEntities.SaveChanges();

                        }
                        else
                        {
                            var assign1 = _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(
                            i => i.ProjectMasterId == pMasterId && i.SwQcHeadAssignId == pSwQcInId);

                            SwQcAssignsFromQcHead model1 = new SwQcAssignsFromQcHead
                            {
                                ProjectMasterId = pMasterId,
                                SwQcHeadAssignId = pSwQcInId,
                                ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                                PriorityFromQcHead = "HIGH",
                                ProjectPmAssignId = pPrPmAssignId,
                                PmToQcHeadAssignTime = assign1.PmToQcHeadAssignTime,
                                SwQcUserId = qcId1,
                                Status = "ASSIGNED",
                                SwQcHeadToQcAssignTime = DateTime.Now,
                                SwQcStartTime = DateTime.Now,
                                OrderNumber = assign1.OrderNumber,
                                ProjectName = assign1.ProjectName,
                                ProjectType = assign1.ProjectType,
                                SoftwareVersionName = assign1.SoftwareVersionName,
                                SoftwareVersionNo = assign1.SoftwareVersionNo,
                                TestPhaseID = assign1.TestPhaseID,
                                SwQcHeadToQcAssignComment = swQcInchargeReassignToQcComment,

                                Added = userId,
                                AddedDate = DateTime.Now,

                            };
                            _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model1);
                            _dbEntities.SaveChanges();

                            ///////////////////Newlyassign to QC///////////////

                            SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                            swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                            swQcInactiveOrAssignLog.SwQcHeadAssignId = pSwQcInId;
                            swQcInactiveOrAssignLog.ProjectPmAssignId = pPrPmAssignId;
                            swQcInactiveOrAssignLog.SwQcUserId = qcId1;
                            swQcInactiveOrAssignLog.Status = "NEWASSIGN";
                            swQcInactiveOrAssignLog.IsInActive = false;
                            swQcInactiveOrAssignLog.IsAssign = true;
                            swQcInactiveOrAssignLog.AssignComment = swQcInchargeReassignToQcComment;
                            swQcInactiveOrAssignLog.ActivityDate = DateTime.Now;
                            swQcInactiveOrAssignLog.Added = userId;
                            swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                            _dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                            _dbEntities.SaveChanges();

                        }
                    }

                    List<SwQcAssignsFromQcHead> dbModel1 = (from sqa in _dbEntities.SwQcAssignsFromQcHeads
                                                            where sqa.SwQcHeadAssignId == pSwQcInId && sqa.ProjectMasterId == pMasterId
                                                            && sqa.Status != "INACTIVE"
                                                            select sqa).ToList();

                    foreach (SwQcAssignsFromQcHead sqa in dbModel1)
                    {
                        sqa.Status = "ASSIGNED";
                        sqa.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
                        sqa.SwQcHeadToQcAssignTime = assign.SwQcHeadToQcAssignTime;
                        sqa.SwQcStartTime = assign.SwQcHeadToQcAssignTime;
                        sqa.SwQcHeadToQcAssignComment = swQcInchargeReassignToQcComment;
                        sqa.Updated = userId;
                        sqa.UpdatedDate = DateTime.Now;
                    }

                }
                _dbEntities.SaveChanges();
            }

            _dbEntities.SaveChanges();

            return "OK";
        }


        //public string DeleteQcByQcIncharge(long pMasterId, long pSwQcInId, long pPrPmAssignId, string multideleteValue1, string approxInchargeToQcDeliveryDate, string swInchargeDeleteQcComment)
        //{
        //    String userIdentity =
        //        HttpContext.Current.User.Identity.Name;
        //    ;
        //    long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


        //    var multideleteValue11 = multideleteValue1.Split(',');

        //    foreach (string qcperson in multideleteValue11)
        //    {
        //        long qcId = Convert.ToInt64(qcperson);

        //        var dbModel =
        //     _dbEntities.SwQcAssigns.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcUserId == qcId && x.SwQcInchargeAssignId == pSwQcInId);

        //        if (dbModel != null)
        //        {

        //            dbModel.InactiveReasonComment = swInchargeDeleteQcComment;
        //            dbModel.Status = "INACTIVE";
        //            dbModel.UpdatedDate = DateTime.Now;
        //            dbModel.Updated = userId;
        //            _dbEntities.Entry(dbModel).State = EntityState.Modified;

        //        }              

        //    }

        //    _dbEntities.SaveChanges();

        //    return "ok";    
        //}

        //public string NewlyAssignQcByQcIncharge(long pMasterId, long pSwQcInId, long pPrPmAssignId, string multiReassignValue, string approxInchargeToQcDeliveryDate, string swQcInchargeReassignToQcComment)
        //{
        //    long userId = 0;
        //    string identity = System.Web.HttpContext.Current.User.Identity.Name;
        //    if (identity != null)
        //    {
        //        userId = Convert.ToInt64(identity);
        //    }
        //    DateTime date;
        //    DateTime.TryParseExact(approxInchargeToQcDeliveryDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
        //        DateTimeStyles.None, out date);

        //    DateTime ApproxInchargeToQcDeliveryDate1 = date;


        //    var multiReassignValue1 = multiReassignValue.Split(',');

        //    foreach (string qcperson in multiReassignValue1)
        //    {

        //        long qcId = Convert.ToInt64(qcperson);

        //        var dbModel =
        //     _dbEntities.SwQcAssigns.FirstOrDefault(
        //         i => i.ProjectMasterId == pMasterId && i.SwQcUserId == qcId && i.SwQcInchargeAssignId == pSwQcInId);

        //        if (dbModel != null)
        //        {

        //            dbModel.Status = "ASSIGNED";                     
        //            dbModel.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;
        //            dbModel.Updated = userId;
        //            dbModel.UpdatedDate = DateTime.Now;
        //            dbModel.SwQcEndTime = null;
        //            dbModel.SwQcAssignTime = DateTime.Now;
        //            if (swQcInchargeReassignToQcComment != "")
        //                dbModel.SwInchargeAssignToQcComment = swQcInchargeReassignToQcComment;

        //            _dbEntities.Entry(dbModel).State = EntityState.Modified;
        //        }
        //        else
        //        {
        //            SwQcAssign model1 = new SwQcAssign
        //            {
        //                ProjectMasterId = pMasterId,
        //                SwQcInchargeAssignId = pSwQcInId,
        //                ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
        //                PriorityFromIncharge = "HIGH",
        //                ProjectPmAssignId = pPrPmAssignId,
        //                ReceiveDate = DateTime.Now,
        //                SwInchargeAssignToQcComment = swQcInchargeReassignToQcComment,
        //                Added = userId,
        //                AddedDate = DateTime.Now,
        //                Updated = userId,
        //                UpdatedDate = DateTime.Now,
        //                SwQcAssignTime = DateTime.Now,
        //                SwQcUserId = qcId,
        //                Status = "ASSIGNED",

        //            };
        //            _dbEntities.SwQcAssigns.AddOrUpdate(model1);
        //        }
        //    }
        //    SwQcInchargeAssign assign =
        //   _dbEntities.SwQcInchargeAssigns.FirstOrDefault(x => x.SwQcInchargeAssignId == pSwQcInId);
        //    assign.QcProjectFinisedTime = null;
        //    assign.Status = "ASSIGNED";
        //    assign.QcInchargeToQcAssignTime = DateTime.Now;
        //    assign.QcInchargeToQcReAssignTime = DateTime.Now;
        //    assign.ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1;

        //    _dbEntities.SaveChanges();

        //    return "ok";
        //}

        #endregion

        #region zip all files
        public List<SwQcAllFilesModel> GetAllFilesModel(long projectId, long swqcInchargeId)
        {
            //            string query = string.Format(@"select pm.ProjectMasterId,pm.ProjectName,st.UploadedFile as UploadedFile1,st.SwQcInchargeAssignId,sc.UploadedFile as UploadedFile2 from ProjectMasters pm
            //            left join SwQcStartUps st on pm.ProjectMasterId=st.ProjectMasterId 
            //            left join SwQcCallSetting sc on pm.ProjectMasterId = sc.ProjectMasterId
            //            where st.ProjectMasterId={0} and st.SwQcInchargeAssignId={1}", projectId, swqcInchargeId);
            _dbEntities.Database.CommandTimeout = 6000;
            string query = string.Format(@"select  UploadedFile as UploadedFile1 from SwQcStartUps  where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile2 from SwQcCallSetting  where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile3 from SwQcMassage where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile4 from SwQcToolscheck where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile5 from SwQcCamera where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile6 from SwQcDisplayLoop where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile7 from SwQcDisplay where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile8 from SwQcSettings where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile9 from SwQcMultimedia where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile10 from SwQcGoogleServices where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile11 from SwQcStorageCheck where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile12 from SwQcGame where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile13 from SwQcTestingApp where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile14 from SwQcFileManager where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile15 from SwQcConnectivity where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  UploadedFile as UploadedFile16 from SwQcShutDown where ProjectMasterId={0} and SwQcInchargeAssignId={1} and UploadedFile is not null and UploadedFile not in ('failed')
            union all
            select  Upload as UploadedFile17 from SwQcProjectWiseIssues where ProjectMasterId={0} and SwQcInchargeAssignId={1} and Upload is not null and Upload not in ('failed') ", projectId, swqcInchargeId);
            var exe = _dbEntities.Database.SqlQuery<SwQcAllFilesModel>(query).ToList();
            return exe;
        }
        #endregion

        #region Post production
        public List<SwQcPostProductionAssignModel> GetProjectListForPostProductionAssign()
        {
            String query = String.Format(@"select top 50 
        pm.ProjectMasterId,pm.ProjectTypeId,pm.ProjectName,pm.SupplierId,pm.SupplierName,pm.SupplierModelName,pm.NumberOfSample,pm.SupplierTrustLevel,pm.IsActive,pm.ApproxProjectOrderDate,
        pm.ApproxShipmentDate,pm.IsNew,pm.IsProjectManagerAssigned,pm.ProjectType,pm.OsName,pm.OsVersion,pm.DisplaySize,PM.DisplayName,pm.ProcessorName,pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Battery,pm.SimSlotNumber,pm.SlotType,pm.ProjectStatus,pm.ApproximatePrice,pm.FinalPrice,pm.OrderNuber,
        STUFF((SELECT ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcPostProductionAssign sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId  and sw.Status in ('ASSIGNED')   
        WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPerson,           
        STUFF((SELECT ', '  + sw.Status FROM SwQcPostProductionAssign sw  left join CmnUsers cmn1 on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId  and sw.Status in ('ASSIGNED')   
        WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPersonStatus,

        (select top 1 spp1.SwQcAssignTime from SwQcPostProductionAssign spp1 where spp1.ProjectMasterId=pm.ProjectMasterId  and spp1.Status in ('ASSIGNED')    order by spp1.SwQcAssignTime desc) as SwQcAssignTime

        from ProjectMasters pm 
        left join SwQcPostProductionAssign sppa on pm.ProjectMasterId=sppa.ProjectMasterId and sppa.Status='ASSIGNED' where pm.ProjectStatus='APPROVED' 
        group by pm.ProjectMasterId,pm.ProjectTypeId,pm.ProjectName,pm.SupplierId,pm.SupplierName,pm.SupplierModelName,pm.NumberOfSample,pm.SupplierTrustLevel,pm.IsActive,pm.ApproxProjectOrderDate,
        pm.ApproxShipmentDate,pm.IsNew,pm.IsProjectManagerAssigned,pm.ProjectType,pm.OsName,pm.OsVersion,pm.DisplaySize,PM.DisplayName,pm.ProcessorName,pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram
        ,pm.Battery,pm.SimSlotNumber,pm.SlotType,pm.ProjectStatus,pm.ApproximatePrice,pm.FinalPrice,pm.OrderNuber  order by pm.ProjectMasterId desc  ");
            List<SwQcPostProductionAssignModel> models = GenereticRepo<SwQcPostProductionAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }

        public string DeleteOrNewAssignQcByQcInchargeForPostProduction(long pMasterId,
           string swInchargeDeleteQcComment, string swQcInchargeAssignToQcComment, long sampleNumber,
           string multideleteValue, string multiAssignValue)
        {
            String userIdentity =
              HttpContext.Current.User.Identity.Name;
            ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            if (multideleteValue.ToString().Trim() != "null")
            {

                var multideleteValue11 = multideleteValue.Split(',');
                foreach (string qcperson in multideleteValue11)
                {
                    long qcId = Convert.ToInt64(qcperson);

                    var dbModel =
                 _dbEntities.SwQcPostProductionAssigns.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcUserId == qcId);

                    if (dbModel != null)
                    {

                        dbModel.SwInchargeDeleteQcComment = swInchargeDeleteQcComment;
                        dbModel.Status = "INACTIVE";
                        dbModel.UpdatedDate = DateTime.Now;
                        dbModel.Updated = userId;
                        _dbEntities.Entry(dbModel).State = EntityState.Modified;

                        ///////////////////Delete/Inactive a QC///////////////

                        //SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        //swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        //swQcInactiveOrAssignLog.SwQcInchargeUserId = userId;
                        //swQcInactiveOrAssignLog.SwQcUserId = qcId;
                        //swQcInactiveOrAssignLog.Status = "INACTIVE";
                        //swQcInactiveOrAssignLog.InActiveReasonComment = swInchargeDeleteQcComment;
                        //swQcInactiveOrAssignLog.Added = userId;
                        //swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        //_dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        //_dbEntities.SaveChanges();

                    }

                }

                _dbEntities.SaveChanges();
            }

            if (multiAssignValue.ToString().Trim() != "null")
            {
                var multiAssignValue1 = multiAssignValue.Split(',');
                foreach (string qcperson1 in multiAssignValue1)
                {

                    long qcId1 = Convert.ToInt64(qcperson1);

                    var dbModel =
                 _dbEntities.SwQcPostProductionAssigns.FirstOrDefault(
                     i => i.ProjectMasterId == pMasterId && i.SwQcUserId == qcId1);

                    if (dbModel != null)
                    {

                        dbModel.Status = "ASSIGNED";
                        dbModel.Updated = userId;
                        dbModel.UpdatedDate = DateTime.Now;
                        dbModel.SwQcEndTime = null;
                        dbModel.SwQcAssignTime = DateTime.Now;
                        dbModel.QcReceivedSampleNo = (int?)sampleNumber;

                        if (swInchargeDeleteQcComment != "")
                            dbModel.SwInchargeDeleteQcComment = swInchargeDeleteQcComment;

                        if (swQcInchargeAssignToQcComment != "")
                            dbModel.SwInchargeAssignToQcComment = swQcInchargeAssignToQcComment;

                        _dbEntities.Entry(dbModel).State = EntityState.Modified;


                        ///////////////////Newlyassign to QC///////////////

                        //SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        //swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        //swQcInactiveOrAssignLog.SwQcInchargeAssignId = pSwQcInId;
                        //swQcInactiveOrAssignLog.SwQcInchargeUserId = userId;
                        //swQcInactiveOrAssignLog.SwQcUserId = qcId1;
                        //swQcInactiveOrAssignLog.Status = "NEWASSIGN";
                        //swQcInactiveOrAssignLog.AssignComment = swQcInchargeReassignToQcComment;
                        //swQcInactiveOrAssignLog.Added = userId;
                        //swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        //_dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        //_dbEntities.SaveChanges();

                    }
                    else
                    {
                        SwQcPostProductionAssign model1 = new SwQcPostProductionAssign
                        {
                            ProjectMasterId = pMasterId,
                            SwInchargeAssignToQcComment = swQcInchargeAssignToQcComment,
                            SwInchargeDeleteQcComment = swInchargeDeleteQcComment,
                            QcReceivedSampleNo = (int?)sampleNumber,
                            Added = userId,
                            AddedDate = DateTime.Now,
                            Updated = userId,
                            UpdatedDate = DateTime.Now,
                            SwQcAssignTime = DateTime.Now,
                            SwQcUserId = qcId1,
                            Status = "ASSIGNED",

                        };
                        _dbEntities.SwQcPostProductionAssigns.AddOrUpdate(model1);


                        ///////////////////Newlyassign to QC///////////////

                        //SwQcInactiveOrAssignLog swQcInactiveOrAssignLog = new SwQcInactiveOrAssignLog();
                        //swQcInactiveOrAssignLog.ProjectMasterId = pMasterId;
                        //swQcInactiveOrAssignLog.SwQcInchargeAssignId = pSwQcInId;
                        //swQcInactiveOrAssignLog.SwQcInchargeUserId = userId;
                        //swQcInactiveOrAssignLog.SwQcUserId = qcId1;
                        //swQcInactiveOrAssignLog.Status = "NEWASSIGN";
                        //swQcInactiveOrAssignLog.AssignComment = swQcInchargeReassignToQcComment;
                        //swQcInactiveOrAssignLog.Added = userId;
                        //swQcInactiveOrAssignLog.AddedDate = DateTime.Now;
                        //_dbEntities.SwQcInactiveOrAssignLogs.Add(swQcInactiveOrAssignLog);
                        _dbEntities.SaveChanges();

                    }
                }

                List<SwQcPostProductionAssign> dbModel1 = (from sqa in _dbEntities.SwQcPostProductionAssigns
                                                           where sqa.ProjectMasterId == pMasterId
                                                           && sqa.Status != "INACTIVE"
                                                           select sqa).ToList();

                foreach (SwQcPostProductionAssign sqa in dbModel1)
                {

                    sqa.Status = "ASSIGNED";
                    sqa.Updated = userId;
                    sqa.UpdatedDate = DateTime.Now;

                }
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public List<CmnUserModel> GetDeletedPersonNameListForPostProduction(long projectId)
        {
            string models = String.Format(@"
            select  cmn.UserFullName,cmn.CmnUserId,cmn.EmployeeCode
            from ProjectMasters pm
            inner join SwQcPostProductionAssign sp on sp.ProjectMasterId = pm.ProjectMasterId
            inner join  CmnUsers cmn on sp.SwQcUserId = cmn.CmnUserId and sp.ProjectMasterId=pm.ProjectMasterId 
            where pm.ProjectMasterId=sp.ProjectMasterId 
            and pm.ProjectMasterId={0}
             and sp.Status not in ('INACTIVE')  group by pm.ProjectMasterId 
            ,cmn.UserFullName,cmn.CmnUserId,cmn.EmployeeCode ORDER BY cmn.UserFullName", projectId);


            List<CmnUserModel> getUserInfoByUserId = _dbEntities.Database.SqlQuery<CmnUserModel>(models).ToList();

            return getUserInfoByUserId;
        }

        public string SaveAllProjectIssuesForSwQcModels(List<PostProductionIssueModel> issueList, long pMasterId, long swQcPostPro, string allUsersList)
        {
            String userIdentity =
         System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            foreach (var swQcAllProIssuesModel in issueList)
            {

                PostProductionIssue model = new PostProductionIssue
                {
                    ProjectMasterId = pMasterId,
                    IssueName = swQcAllProIssuesModel.IssueName,
                    Comment = swQcAllProIssuesModel.Comment,
                    IssueType = swQcAllProIssuesModel.IssueType,
                    Frequency = swQcAllProIssuesModel.Frequency,
                    IssueReproducePath = swQcAllProIssuesModel.IssueReproducePath,
                    Upload = swQcAllProIssuesModel.UploadedFile,
                    ViewerIds = allUsersList,
                    SwQcUserId = userId,
                    Added = userId,
                    AddedDate = DateTime.Now,
                    SwQcPostProductAssignId = swQcPostPro
                };
                _dbEntities.PostProductionIssues.AddOrUpdate(model);

            }


            _dbEntities.SaveChanges();
            return "ok";

        }

        public string SaveAllProjectIssuesForMKTModels(List<PostProductionIssueModel> issueList, long pMasterId, string allUsersList)
        {
            String userIdentity =
        System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            foreach (var swQcAllProIssuesModel in issueList)
            {

                PostProductionIssue model = new PostProductionIssue
                {
                    ProjectMasterId = pMasterId,
                    IssueName = swQcAllProIssuesModel.IssueName,
                    Comment = swQcAllProIssuesModel.Comment,
                    IssueType = swQcAllProIssuesModel.IssueType,
                    Frequency = swQcAllProIssuesModel.Frequency,
                    IssueReproducePath = swQcAllProIssuesModel.IssueReproducePath,
                    Upload = swQcAllProIssuesModel.UploadedFile,
                    ViewerIds = allUsersList,
                    SwQcUserId = userId,
                    Added = userId,
                    AddedDate = DateTime.Now
                };
                _dbEntities.PostProductionIssues.AddOrUpdate(model);

            }


            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<ProjectMasterModel> GetProjectMasterModelForPostProduction()
        {
            FileManager manager = new FileManager();
            // string query = string.Format(@"select * from ProjectMasters where ProjectStatus = 'APPROVED' ");
            string query = string.Format(@"select  distinct ProjectName from ProjectMasters where ProjectStatus = 'APPROVED'");

            var getUserInfoByUserId = _dbEntities.Database.SqlQuery<ProjectMasterModel>(query).ToList();

            //foreach (var project in getUserInfoByUserId)
            //{
            //    project.OrderNumberOrdinal = project.OrderNuber != null
            //        ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
            //        : string.Empty;
            //    if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
            //    {
            //        project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
            //    }

            //}

            return getUserInfoByUserId;
        }
        public List<SwQcPostProductionAssignModel> GetProjectListForPostProductionIssueList(long userId)
        {
            String query = String.Format(@"select * from ProjectMasters pm
            left join SwQcPostProductionAssign sppa on sppa.ProjectMasterId=pm.ProjectMasterId
         left join CmnUsers cu on cu.CmnUserId=sppa.SwQcUserId
            where pm.ProjectStatus = 'APPROVED' and sppa.SwQcUserId={0} and sppa.Status='ASSIGNED' ", userId);

            List<SwQcPostProductionAssignModel> models = GenereticRepo<SwQcPostProductionAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }
        public List<PostProductionIssueModel> GetProjectListForPostProductionIssueListAfterSearch(long pMasterId, long userId)
        {
            String query = String.Format(@"select pm.*,sppa.*,apis.* from ProjectMasters pm
            left join SwQcPostProductionAssign sppa on sppa.ProjectMasterId=pm.ProjectMasterId
            left join PostProductionIssues apis on apis.ProjectMasterId=apis.ProjectMasterId and apis.SwQcPostProductAssignId=sppa.SwQcPostProductAssignId
            where pm.ProjectStatus = 'APPROVED' and sppa.SwQcUserId={0} and sppa.ProjectMasterId={1} and sppa.Status='ASSIGNED' ", userId, pMasterId);

            List<PostProductionIssueModel> models = GenereticRepo<PostProductionIssueModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }
        public List<PostProductionIssueModel> GetProjectListForPostProductionIssueListAfterSearchForMK(string pro_name, long userId)
        {
            //            String query = String.Format(@"select * from ProjectMasters pm
            //            left join PostProductionIssues apis on apis.ProjectMasterId=pm.ProjectMasterId 
            //            where pm.ProjectStatus = 'APPROVED' and apis.SwQcUserId={0} and pm.ProjectMasterId={1}  ", userId, pro_name);

            String query = String.Format(@"select * from ProjectMasters pm
            left join PostProductionIssues apis on apis.ProjectMasterId=pm.ProjectMasterId 
            where pm.ProjectStatus = 'APPROVED' and apis.SwQcUserId={0} and pm.ProjectName like '%{1}%'  ", userId, pro_name);

            List<PostProductionIssueModel> models = GenereticRepo<PostProductionIssueModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }

        public List<PostProductionIssueModel> GetProjectListForPostProductionIssueListAfterSearchForAll(long pMasterId, long userId)
        {
            String query = String.Format(@"select * from ProjectMasters pm
            left join PostProductionIssues apis on apis.ProjectMasterId=pm.ProjectMasterId 
			left join CmnUsers cmn on cmn.CmnUserId=apis.SwQcUserId
            where pm.ProjectStatus = 'APPROVED' 
			and pm.ProjectMasterId={0} ", pMasterId);

            List<PostProductionIssueModel> models = GenereticRepo<PostProductionIssueModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;
        }

        public List<ProjectMasterModel> GetProjectOrderNumberList(string projectName)
        {
            String query = String.Format(@"select * from ProjectMasters  where ProjectStatus='APPROVED' and ProjectName like '%{0}%' ", projectName);

            List<ProjectMasterModel> models = GenereticRepo<ProjectMasterModel>.GetList(_dbEntities, query);
            AssignForPostProductionMuliplePersonViewModel assignForPost = new AssignForPostProductionMuliplePersonViewModel();
            assignForPost.DdlOrderNumber = models;
            return models;
        }


        #endregion

        #region SwQc New
        public List<ProjectMasterModel> GetProjectListForSwQc(long userId)
        {
            //            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select distinct qcAssign.SwQcAssignId,inchargeAssign.SwQcHeadAssignId,qcAssign.SwQcHeadToQcAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,
            //            qcAssign.SwQcEndTime,tp.TestPhaseName,inchargeAssign.SoftwareVersionName,inchargeAssign.SoftwareVersionNo,inchargeAssign.PmToQcHeadAssignTime,pm.*
            //            from SwQcAssignsFromQcHead qcAssign 
            //            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            //            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            //            left join SwQcTestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            //            where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0}
            //            order by inchargeAssign.PmToQcHeadAssignTime desc
            //            ", userId).ToList();

            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select distinct qcAssign.SwQcAssignId,qcAssign.SwQcHeadAssignId,qcAssign.SwQcHeadToQcAssignTime,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,
            qcAssign.SwQcEndTime,tp.TestPhaseName,qcAssign.SoftwareVersionName,qcAssign.SwQcUserId,qcAssign.SoftwareVersionNo,qcAssign.PmToQcHeadAssignTime,pm.*
            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on qcAssign.TestPhaseID=tp.TestPhaseID
            where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0} and tp.TestPhaseName not in ('Field (Network Test)','Accessories Test')
            order by qcAssign.PmToQcHeadAssignTime desc", userId).ToList();

            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName + " -->> (" + CommonConversion.AddOrdinal(model.OrderNuber) + " Order)" + " -->> (SV: " + model.SoftwareVersionNo + ")" + " -->> (" + model.TestPhaseName + ")";

            }
            return getSwProject;
        }
        public List<SwQcHeadAssignsFromPmModel> GetProjectListForMPVersionSwQc(long userId)
        {

            var getSwProject = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
           
            select sp.ProjectName,sp.SwQcHeadAssignId,sp.ProjectPmAssignId,sp.ProjectMasterId,sp.OrderNumber,sp.ProjectType,
            sp.SoftwareVersionName,sp.SoftwareVersionNo,
            case when sp.IsFinalPhaseMP='true' then 'YES' else 'NO' end as IsFinalPhaseMPs,sp.PmToQcHeadAssignTime
            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sp where IsFinalPhaseMP='true' order by sp.PmToQcHeadAssignTime desc", userId).ToList();

            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName + " -->> (" + CommonConversion.AddOrdinal(model.OrderNumber) + " Order)" + " -->> (SV: " + model.SoftwareVersionNo + ")" + " -->> (IsMP: " + model.IsFinalPhaseMPs + ")" + " -->> (PmAssignDate: " + model.PmToQcHeadAssignTime.ToString("yyyy-MM-dd HH:mm:ss tt") + ")";

            }
            return getSwProject;
        }

        public List<ProjectDetailsForSwQcModel> GetProjectDetailsForSwQcPersonalFindings(long userId, long pMasterId, long pSwQcInId)
        {
            var queries = _dbEntities.Database.SqlQuery<ProjectDetailsForSwQcModel>(@"select pm.* from CellPhoneProject.dbo.ProjectMasters pm 
            where pm.ProjectMasterId={0} ", pMasterId).ToList();

            return queries;
        }

        public string SaveSwQcPersonalUseFindingsIssueDetails(List<SwQcPersonalUseFindingsIssueDetailModel> issueList, List<SwQcPersonalUseFindingsIssueDetailModel> issueList1, long pMasterId, bool issuesChk,
            bool filesChk, long pSwQcInId, long pPmAssignId)
        {
            String userIdentity =
           System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                          join tstPhase in _dbEntities.SwQcTestPhases on swQcHead.TestPhaseID equals tstPhase.TestPhaseID
                          where swQcHead.SwQcHeadAssignId == pSwQcInId && swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query2 = (from swQcHead in _dbEntities.ProjectMasters
                          where swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query3 = (from tstPhase in _dbEntities.SwQcTestPhases
                          where tstPhase.TestPhaseName == "First version Software Testing"
                          select tstPhase).FirstOrDefault();



            if (issuesChk == true && pSwQcInId != 0)
            {
                foreach (var swQcIssues in issueList)
                {
                    SwQcPersonalUseFindingsIssueDetail model = new SwQcPersonalUseFindingsIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = pSwQcInId;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = query2.ProjectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.ExpectedOutcome = swQcIssues.ExpectedOutcome;
                    model.IssueDetails = swQcIssues.IssueDetails;
                    model.RefernceModule = swQcIssues.RefernceModule;
                    model.Frequency = swQcIssues.Frequency;
                    model.IssueReproducePath = swQcIssues.IssueReproducePath;
                    model.Attachment = swQcIssues.Attachment;
                    model.IssueType = swQcIssues.IssueType;
                    model.Result = swQcIssues.Result;
                    model.TestPhaseID = query3.TestPhaseID;
                    model.SoftwareVersionName = query1.SoftwareVersionName;
                    model.SoftwareVersionNo = query1.SoftwareVersionNo;
                    model.IsFile = false;
                    model.IsIssue = true;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.IsFinalPhaseMP = true;
                    model.Upload = swQcIssues.UploadedFile;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;


                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcPersonalUseFindingsIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }


            if (filesChk == true && pSwQcInId != 0)
            {
                foreach (var swQcIssues in issueList1)
                {
                    SwQcPersonalUseFindingsIssueDetail model = new SwQcPersonalUseFindingsIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = pSwQcInId;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = query2.ProjectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.RefernceModule = swQcIssues.RefernceModules1;
                    model.Attachment = swQcIssues.Attachment;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.Upload = swQcIssues.UploadedFile;
                    model.TestPhaseID = query3.TestPhaseID;
                    model.SoftwareVersionName = query1.SoftwareVersionName;
                    model.SoftwareVersionNo = query1.SoftwareVersionNo;
                    model.IsFinalPhaseMP = true;
                    model.IsFile = true;
                    model.IsIssue = false;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcPersonalUseFindingsIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }

            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<SwQcAssignsFromQcHeadModel> GetProjectListForQcHeadToQcAssign(long userId)
        {
            var fileManager = new FileManager();
            var models = new List<SwQcAssignsFromQcHeadModel>();
            if (userId >= 0)
            {
                var assignProjects = (from qcAssign in _dbEntities.SwQcAssignsFromQcHeads
                                      join inchargeAssign in _dbEntities.SwQcHeadAssignsFromPms on qcAssign.SwQcHeadAssignId equals inchargeAssign.SwQcHeadAssignId
                                      join master in _dbEntities.ProjectMasters on qcAssign.ProjectMasterId equals master.ProjectMasterId
                                      where
                                      qcAssign.Status == "ASSIGNED" && qcAssign.SwQcUserId == userId
                                      select new SwQcAssignsFromQcHeadModel
                                      {
                                          ProjectMasterId = qcAssign.ProjectMasterId,
                                          ProjectName = master.ProjectName,
                                          SwQcAssignId = qcAssign.SwQcAssignId,
                                          SwQcUserId = userId,
                                          Status = qcAssign.Status,
                                          SwQcHeadAssignId = qcAssign.SwQcHeadAssignId,
                                          OrderNumber = master.OrderNuber
                                      }).ToList();
                models = assignProjects;
            }

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNumber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNumber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " -->> (" + project.OrderNumberOrdinal + ")";
                }

            }

            return models;

        }
        public List<SwQcHeadAssignsFromPmModel> GetSwQcHeadAssignModelsFromPmForIssue()
        {
            var getSwInchargeProject = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select pm.*,sia.* from ProjectMasters pm 
            left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sia on pm.ProjectMasterId=sia.ProjectMasterId
            where ProjectStatus='APPROVED' 
            and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectMasterId=pm.ProjectMasterId)").ToList();

            foreach (var project in getSwInchargeProject)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }

            }

            return getSwInchargeProject;
        }

        public List<ProjectDetailsForSwQcModel> GetProjectDetailsForSwQc(long userId, long pMasterId, long pSwQcInId)
        {

            List<ProjectDetailsForSwQcModel> getSwProject = null;

            if (pSwQcInId == 0)
            {
                getSwProject = _dbEntities.Database.SqlQuery<ProjectDetailsForSwQcModel>(@"select distinct qcAssign.SwQcAssignId,qcAssign.SwQcHeadAssignId,qcAssign.SwQcHeadToQcAssignTime,qcAssign.SwQcHeadToQcAssignComment,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,
            qcAssign.SwQcEndTime,tp.TestPhaseName,qcAssign.SoftwareVersionName,qcAssign.SoftwareVersionNo,qcAssign.PmToQcHeadAssignTime,pm.*
            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on qcAssign.TestPhaseID=tp.TestPhaseID
            where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0} and pm.ProjectMasterId={1} 
            and inchargeAssign.SwQcHeadAssignId is null
            order by qcAssign.PmToQcHeadAssignTime desc", userId, pMasterId, pSwQcInId).ToList();

            }
            else if (pSwQcInId != 0)
            {
                getSwProject = _dbEntities.Database.SqlQuery<ProjectDetailsForSwQcModel>(@"select distinct qcAssign.SwQcAssignId,qcAssign.SwQcHeadAssignId,qcAssign.SwQcHeadToQcAssignTime,qcAssign.SwQcHeadToQcAssignComment,qcAssign.ApproxInchargeToQcDeliveryDate,qcAssign.Status,
            qcAssign.SwQcEndTime,tp.TestPhaseName,qcAssign.SoftwareVersionName,qcAssign.SoftwareVersionNo,qcAssign.PmToQcHeadAssignTime,pm.*
            from SwQcAssignsFromQcHead qcAssign 
            left join SwQcHeadAssignsFromPm inchargeAssign on qcAssign.SwQcHeadAssignId = inchargeAssign.SwQcHeadAssignId
            left join ProjectMasters pm on qcAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on qcAssign.TestPhaseID=tp.TestPhaseID
            where qcAssign.Status='ASSIGNED' and qcAssign.SwQcUserId={0} and pm.ProjectMasterId={1} 
            and inchargeAssign.SwQcHeadAssignId={2}
            order by qcAssign.PmToQcHeadAssignTime desc", userId, pMasterId, pSwQcInId).ToList();

            }


            //foreach (var model in getSwProject)
            //{
            //    model.ProjectName = model.ProjectName + " -->> (" + CommonConversion.AddOrdinal(model.OrderNuber) + " Order)" + " -->> (SwVersion: " + model.SoftwareVersionNo + ")";

            //}
            return getSwProject;
        }

        public string SaveSwQcProjectIssueDetails(List<SwQcIssueDetailModel> issueList, List<SwQcIssueDetailModel> issueList1, long pMasterId, bool issuesChk, bool filesChk, long pSwQcInId, long pSwQcAssignId)
        {
            String userIdentity =
            System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                          join tstPhase in _dbEntities.SwQcTestPhases on swQcHead.TestPhaseID equals tstPhase.TestPhaseID
                          where swQcHead.SwQcHeadAssignId == pSwQcInId && swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query2 = (from swQcHead in _dbEntities.ProjectMasters
                          where swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query3 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                          join tstPhase in _dbEntities.SwQcTestPhases on swQcHead.TestPhaseID equals tstPhase.TestPhaseID
                          where swQcHead.SwQcHeadAssignId == pSwQcInId && swQcHead.ProjectMasterId == pMasterId
                          select tstPhase).FirstOrDefault();

            SwQcIssueDetailModel qryForIssueSerial = new SwQcIssueDetailModel();

            if (issuesChk == true && pSwQcInId != 0)
            {

                foreach (var swQcIssues in issueList)
                {
                    qryForIssueSerial = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select top 1 case when IssueSerial is null 
            then 0 else IssueSerial end as IssueSerial
            from SwQcIssueDetails where ProjectName='" + query2.ProjectName + "' order by IssueSerial desc").FirstOrDefault();

                    SwQcIssueDetail model = new SwQcIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = pSwQcInId;
                    model.SwQcAssignId = pSwQcAssignId;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = query2.ProjectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.ExpectedOutcome = swQcIssues.ExpectedOutcome;
                    model.IssueDetails = swQcIssues.IssueDetails;
                    model.RefernceModule = swQcIssues.RefernceModule;
                    model.Frequency = swQcIssues.Frequency;
                    model.IssueReproducePath = swQcIssues.IssueReproducePath;
                    model.Attachment = swQcIssues.Attachment;
                    model.IssueType = swQcIssues.IssueType;
                    model.WaltonQcStatus = "NEW ISSUE";
                    model.Result = swQcIssues.Result;
                    model.TestPhaseID = query1.TestPhaseID;
                    if (query1.TestPhaseID == 5)
                    {
                        model.Demo = "Demo";
                    }

                    model.SoftwareVersionName = query1.SoftwareVersionName.Trim();
                    model.SoftwareVersionNo = query1.SoftwareVersionNo;
                    model.IsFile = false;
                    model.IsIssue = true;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.Upload = swQcIssues.UploadedFile;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;
                    if (qryForIssueSerial == null)
                    {
                        model.IssueSerial = 0 + 1;
                    }
                    else
                    {
                        model.IssueSerial = Convert.ToInt64(qryForIssueSerial.IssueSerial) + 1;

                    }


                    if (query3.TestPhaseName == "Field (Network Test)")
                    {
                        model.FieldTestFrom = "PM";
                    }

                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();

                    //ddCount++;
                }
            }

            if (filesChk == true && pSwQcInId != 0)
            {
                foreach (var swQcIssues in issueList1)
                {
                    SwQcIssueDetail model = new SwQcIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = pSwQcInId;
                    model.SwQcAssignId = pSwQcAssignId;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = query2.ProjectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;

                    if (swQcIssues.IssueScenario == "")
                    {
                        model.IssueScenario = "All Files";
                    }
                    else
                    {
                        model.IssueScenario = swQcIssues.IssueScenario;
                    }
                    model.RefernceModule = swQcIssues.RefernceModules1;
                    model.Attachment = swQcIssues.Attachment;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.Upload = swQcIssues.UploadedFile;
                    model.TestPhaseID = query1.TestPhaseID;
                    model.SoftwareVersionName = query1.SoftwareVersionName.Trim();
                    model.SoftwareVersionNo = query1.SoftwareVersionNo;
                    model.IsFile = true;
                    model.IsIssue = false;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    if (query3.TestPhaseName == "Field (Network Test)")
                    {
                        model.FieldTestFrom = "PM";
                    }

                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }
            _dbEntities.SaveChanges();
            return "ok";
        }
        public List<SwQcIssueDetailModel> GetSwQcIssueDetails(long pMasterId, long pSwQcInId, long pSwQcAssignId)
        {
            String userIdentity =
            System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            List<SwQcIssueDetailModel> getSwProject = null;

            var softver =
                (from ss in _dbEntities.SwQcHeadAssignsFromPms where ss.SwQcHeadAssignId == pSwQcInId select ss)
                    .FirstOrDefault();

            var softId = softver.SoftwareVersionNo;

            if (pSwQcInId != 0)
            {
                getSwProject = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT  case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.[SwQcIssueId],sii.[SwQcHeadAssignId],sii.[SwQcAssignId],sii.[ProjectPmAssignId],sii.[ProjectMasterId],sii.[ProjectName],sii.[ProjectType],sii.[IssueScenario]
                ,sii.[ExpectedOutcome],sii.[IssueDetails],sii.[RefernceModule],sii.[Frequency],sii.[IssueReproducePath],sii.[Attachment]
                ,sii.[IssueType],sii.[Result],sii.[TestPhaseID],sii.[SoftwareVersionName],sii.[SoftwareVersionNo],sii.[FilesUrl],sii.[FilesDetail],sii.[Upload] as UploadedFile,sii.[IsFile],sii.[IsIssue],
                case when sii.IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,sii.FixedVersion    
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sq.SwQcAssignId=sii.SwQcAssignId
                where sii.SoftwareVersionNo={4} and sii.ProjectMasterId={0} and sii.SwQcHeadAssignId={1} and sii.SwQcAssignId={2} and sii.Added={3} and sq.Status='ASSIGNED'
                order by sii.IssueSerial desc", pMasterId, pSwQcInId, pSwQcAssignId, userId, Convert.ToInt32(softver.SoftwareVersionNo)).ToList();

            }
            else if (pSwQcInId == 0)
            {
                getSwProject = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.[SwQcIssueId],sii.[SwQcHeadAssignId],sii.[SwQcAssignId],sii.[ProjectPmAssignId],sii.[ProjectMasterId],sii.[ProjectName],sii.[ProjectType],sii.[IssueScenario]
                ,sii.[ExpectedOutcome],sii.[IssueDetails],sii.[RefernceModule],sii.[Frequency],sii.[IssueReproducePath],sii.[Attachment]
                ,sii.[IssueType],sii.[Result],sii.[TestPhaseID],sii.[SoftwareVersionName],sii.[SoftwareVersionNo],sii.[FilesUrl],sii.[FilesDetail],sii.[Upload] as UploadedFile,sii.[IsFile],sii.[IsIssue],
                case when sii.IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,sii.FixedVersion    
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sq.SwQcAssignId=sii.SwQcAssignId
                where sii.ProjectMasterId={0} and sii.SwQcAssignId={2} and sii.Added={3} and sq.Status='ASSIGNED'
                order by sii.IssueSerial desc", pMasterId, pSwQcInId, pSwQcAssignId, userId).ToList();
            }

            return getSwProject;
        }

        public string SaveSwQcSubmittedProjectToQcHead(long pMasterId, long pSwQcInId, long pSwQcAssignId, long userId)
        {
            if (pSwQcInId != 0)
            {
                var dbModel = _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(i => i.ProjectMasterId == pMasterId &&
                                                                                     i.SwQcAssignId == pSwQcAssignId &&
                                                                                     i.SwQcHeadAssignId == pSwQcInId);
                if (dbModel != null)
                {
                    dbModel.Status = "QCCOMPLETED";
                    dbModel.SwQcEndTime = DateTime.Now;
                    dbModel.Updated = userId;
                    dbModel.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel).State = EntityState.Modified;
                }
                _dbEntities.SaveChanges();


                var dbModel1 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                                join swQc in _dbEntities.SwQcAssignsFromQcHeads on
                                    swQcHead.SwQcHeadAssignId equals swQc.SwQcHeadAssignId
                                where swQc.Status != "INACTIVE" &&
                                      swQcHead.ProjectMasterId == pMasterId && swQcHead.SwQcHeadAssignId == pSwQcInId
                                select new
                                {
                                    swQc.Status,
                                    SwQcHeadStatus = swQcHead.Status,
                                    swQcHead.SwQcFinishedTime,
                                    swQcHead.Updated,
                                    swQcHead.UpdatedDate

                                }).ToList();


                if (dbModel1.Exists(x => x.Status == "ASSIGNED"))
                {
                }
                else
                {
                    var dbModel2 =
                        _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(
                            i => i.SwQcHeadAssignId == pSwQcInId && i.ProjectMasterId == pMasterId);

                    dbModel2.Status = "QCCOMPLETED";
                    dbModel2.SwQcFinishedTime = DateTime.Now;
                    dbModel2.Updated = userId;
                    dbModel2.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel2).State = EntityState.Modified;
                }
            }
            else if (pSwQcInId == 0)//sw qc head id zero hole
            {
                var dbModel = _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(i => i.ProjectMasterId == pMasterId && i.SwQcAssignId == pSwQcAssignId);

                if (dbModel != null)
                {
                    dbModel.Status = "QCCOMPLETED";
                    dbModel.SwQcEndTime = DateTime.Now;
                    dbModel.Updated = userId;
                    dbModel.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel).State = EntityState.Modified;
                }
                _dbEntities.SaveChanges();

            }

            //try
            //{
            //    _dbEntities.SaveChanges();
            //    return "OK";
            //}
            //catch (Exception)
            //{
            //    return "NO";
            //}


            _dbEntities.SaveChanges();
            return "OK";
        }
        public List<ProjectMasterModel> GetProjectListForSwQcHead()
        {

            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
                        select distinct inchargeAssign.ProjectName
                        from SwQcHeadAssignsFromPm inchargeAssign").ToList();

            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName.Trim();

            }
            return getSwProject;
        }
        public List<ProjectMasterModel> GetProjectListForQcHeadIssue()
        {


            //            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
            //            select distinct inchargeAssign.ProjectName
            //            from SwQcHeadAssignsFromPm inchargeAssign").ToList();
            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
            select distinct inchargeAssign.ProjectName,inchargeAssign.ProjectMasterId,inchargeAssign.SwQcHeadAssignId,inchargeAssign.SwQcAssignId
            from SwQcAssignsFromQcHead inchargeAssign where ProjectMasterId=(select top 1 ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead			
            where ProjectName=inchargeAssign.ProjectName
            order by ProjectMasterId desc)
            and
            SwQcHeadAssignId=(select top 1 SwQcHeadAssignId from CellPhoneProject.dbo.SwQcAssignsFromQcHead			
            where ProjectMasterId=inchargeAssign.ProjectMasterId
            order by ProjectMasterId desc)
            and
            SwQcAssignId=(select top 1 SwQcAssignId from CellPhoneProject.dbo.SwQcAssignsFromQcHead			
            where SwQcHeadAssignId=inchargeAssign.SwQcHeadAssignId
            order by ProjectMasterId desc)").ToList();
            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName;
                model.SwQcHeadAssignId = model.SwQcHeadAssignId;
                model.ProjectMasterId = model.ProjectMasterId;
                model.SwQcAssignId = model.SwQcAssignId;

            }
            return getSwProject;
        }


        public List<SwQcIssueCategoryModel> GetIssueCategory()
        {
            _dbEntities.Database.CommandTimeout = 6000;
            var getSwProject = _dbEntities.Database.SqlQuery<SwQcIssueCategoryModel>(@"select distinct [OrdersOfIssues],SwQcIssueCategorytId,QcCategoryName from [CellPhoneProject].[dbo].[SwQcIssueCategory]
            where [IsActive]='true' order by [OrdersOfIssues] asc").ToList();

            return getSwProject;
        }

        public List<SwQcIssueDetailModel> GetSwQcIssueDetailsForSupplier(string projectName, string moduleName, int projectOrders, int softVersionNo, string testPhases)
        {
            List<SwQcIssueDetailModel> query = null;
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            if (projectName.Trim() != null)
            {
                if (projectOrders == 0 && softVersionNo == 0 && moduleName == "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5
                    
                    order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders != 0 && softVersionNo == 0 && moduleName == "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and OrderNumber={2} order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders == 0 && softVersionNo != 0 && moduleName == "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and SoftwareVersionNo={3} order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders == 0 && softVersionNo == 0 && moduleName != "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and RefernceModule like '%" + moduleName + "%'  order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders != 0 && softVersionNo != 0 && moduleName == "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and OrderNumber={2} and SoftwareVersionNo={3}  order by IssueSerial asc ", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders == 0 && softVersionNo != 0 && moduleName != "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and SoftwareVersionNo={3}  and RefernceModule like '%" + moduleName + "%' order by IssueSerial asc ", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders != 0 && softVersionNo == 0 && moduleName != "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and OrderNumber={2}  and RefernceModule like '%" + moduleName + "%' order by IssueSerial asc ", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();
                }
                else if (projectOrders != 0 && softVersionNo != 0 && moduleName != "0" && testPhases != "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],[ExpectedOutcome]
                    ,[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and TestPhaseID !=5 and SoftwareVersionNo={3} and OrderNumber={2} and RefernceModule like '%" + moduleName + "%'  order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId).ToList();

                }
                else if (projectOrders == 0 && softVersionNo != 0 && moduleName == "0" && testPhases == "5")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT [SwQcIssueId], case when IssueSerial is null then 0 else IssueSerial end as IssueSerial,[SwQcHeadAssignId],[SwQcAssignId],[ProjectPmAssignId],[ProjectMasterId],[OrderNumber],[ProjectName],[ProjectType],[IssueScenario],
                    [ExpectedOutcome],[IssueDetails],[RefernceModule],[Frequency],[IssueReproducePath],[Attachment],[IssueType],[Result],[TestPhaseID],[SoftwareVersionName],[SoftwareVersionNo],[FilesUrl],[FilesDetail],[Upload]
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,[WaltonQcComDate],[WaltonQcComment],[FixedVersion],[SupplierComDate],[SupplierComment],[WaltonPmComDate],[WaltonPmComment],[IsSmart],[IsFeature],
                    case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas,SwQcIssueDetails.[Added],SwQcIssueDetails.[AddedDate],IsApprovedForChina,cm.RoleName,WaltonQcStatus,SupplierStatus,cm1.UserFullName,Demo,cm.ExtendedRoleName
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] 
                    left join CellPhoneProject.dbo.CmnUsers cm1 on cm1.CmnUserId=[SwQcIssueDetails].Added
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId={4}
                    where ProjectName={0} and SoftwareVersionNo={3} and TestPhaseID={5}  order by IssueSerial asc", projectName, moduleName, projectOrders, softVersionNo, userId, testPhases).ToList();
                    //Demo='Demo'
                }
            }

            return query;
        }

        public List<SwQcAssignsFromQcHeadModel> GetSwQcsAssignsInfo(string projectName, int projectOrders, int softVersionNo, string testPhases)
        {
            List<SwQcAssignsFromQcHeadModel> swQcAssigns = null;

            if (projectName.Trim() != null)
            {
                //                if (projectOrders == 0 && softVersionNo == 0)
                //                {
                //                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,sqpm.SwQcHeadToQcAssignTime,
                //                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                //                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                //                    sqpm.SwQcFinishedTime
                //
                //                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                //                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                //                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                //                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                //
                //                    where sqi.ProjectName={0} and pm.SourcingType is not null and sqi.Status not in ('INACTIVE')
                //                    and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
                //                    group by pm.ProjectMasterId,
                //                    sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                //                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime
                //                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                //                }
                //                else if (projectOrders != 0 && softVersionNo == 0)
                //                {
                //                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,sqpm.SwQcHeadToQcAssignTime,
                //                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                //                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,sqpm.SwQcFinishedTime
                //
                //                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                //                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                //                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                //                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                //
                //                    where sqi.ProjectName={0} and sqi.OrderNumber={1} and pm.SourcingType is not null and sqi.Status not in ('INACTIVE')
                //                    and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
                //                    group by pm.ProjectMasterId,
                //                    sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                //                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime
                //                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                //                }
                //                else if (projectOrders == 0 && softVersionNo != 0)
                //                {
                //                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,sqpm.SwQcHeadToQcAssignTime,
                //                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                //                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,sqpm.SwQcFinishedTime
                //
                //                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                //                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                //                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                //                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                //
                //                    where sqi.ProjectName={0} and sqi.SoftwareVersionNo={2} and pm.SourcingType is not null and sqi.Status not in ('INACTIVE')
                //                    and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
                //                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                //                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime
                //                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                //                }
                //                else if (projectOrders != 0 && softVersionNo != 0)
                //                {
                //                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct pm.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,sqpm.SwQcHeadToQcAssignTime,
                //                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                //                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,sqpm.SwQcFinishedTime
                //
                //                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                //                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                //                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                //                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                //
                //                    where sqi.ProjectName={0} and sqi.SoftwareVersionNo={2} and sqi.OrderNumber={1} and pm.SourcingType is not null and sqi.Status not in ('INACTIVE')
                //                    and pm.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=pm.ProjectMasterId)
                //                    group by pm.ProjectMasterId,
                //                    sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                //                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime
                //                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                //                }


                if (projectOrders == 0 && softVersionNo == 0 && testPhases == "0")
                {
                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"
                    select distinct sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.ProjectName={0}
                    and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                    sqi.TestPhaseID,sp.TestPhaseName,
                    case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
                    case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime

                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                    left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID

                    where sqi.ProjectName={0}  and sqi.status in ('ASSIGNED','QCCOMPLETED','RECOMMENDED') 
                    and pm.SourcingType in (select top 1 SourcingType from CellPhoneProject.dbo.ProjectMasters where ProjectMasterId=sqpm.ProjectMasterId)
                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName
                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                }
                else if (projectOrders != 0 && softVersionNo == 0 && testPhases == "0")
                {
                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"
                    select distinct sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectName={0} and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                    sqi.TestPhaseID,sp.TestPhaseName,
                    case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
                    case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime

                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                    left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID

                    where sqi.ProjectName={0} and sqi.OrderNumber={1}  and sqi.status in ('ASSIGNED','QCCOMPLETED','RECOMMENDED') 
                    and pm.SourcingType in (select top 1 SourcingType from CellPhoneProject.dbo.ProjectMasters where ProjectMasterId=sqpm.ProjectMasterId)
                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName
                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                }
                else if (projectOrders == 0 && softVersionNo != 0 && testPhases == "0")
                {
                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"
                    select distinct sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectName={0} and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                    sqi.TestPhaseID,sp.TestPhaseName,
                    case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
                    case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime

                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                    left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID

                    where sqi.ProjectName={0} and sqi.SoftwareVersionNo={2}  and sqi.status in ('ASSIGNED','QCCOMPLETED','RECOMMENDED') 
                    and pm.SourcingType in (select top 1 SourcingType from CellPhoneProject.dbo.ProjectMasters where ProjectMasterId=sqpm.ProjectMasterId)
                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName
                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                }
                else if (projectOrders != 0 && softVersionNo != 0 && testPhases == "0")
                {
                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"
                    select distinct sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectName={0} and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                    sqi.TestPhaseID,sp.TestPhaseName,
                    case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
                    case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime

                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                    left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID

                    where sqi.ProjectName={0} and sqi.OrderNumber={1} and sqi.SoftwareVersionNo={2}  and sqi.status in ('ASSIGNED','QCCOMPLETED','RECOMMENDED') 
                    and pm.SourcingType in (select top 1 SourcingType from CellPhoneProject.dbo.ProjectMasters where ProjectMasterId=sqpm.ProjectMasterId)
                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName
                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo).ToList();
                }
                else if (projectOrders == 0 && softVersionNo != 0 && testPhases != "0")
                {
                    swQcAssigns = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct sqi.SwQcHeadAssignId,sqi.ProjectName,pm.SourcingType as PoCategory, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
                    and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectName={0} and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
                    sqi.TestPhaseID,sp.TestPhaseName,
                    case when sqpm.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,
                    case when sqpm.SwQcFinishedTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                    where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID) else sqpm.SwQcHeadToQcAssignTime end as SwQcFinishedTime

                    from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi
                    left join CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqpm on sqpm.SwQcHeadAssignId=sqi.SwQcHeadAssignId
                    left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectName=sqi.ProjectName
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                    left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID

                    where sqi.ProjectName={0}  and sqi.SoftwareVersionNo={2} and sqi.TestPhaseID={3} and sqi.status in ('ASSIGNED','QCCOMPLETED','RECOMMENDED') 
                    and pm.SourcingType in (select top 1 SourcingType from CellPhoneProject.dbo.ProjectMasters where ProjectMasterId=sqpm.ProjectMasterId)
                    group by pm.ProjectMasterId,sqi.ProjectName,pm.SourcingType, sqi.OrderNumber, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                    sqpm.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqpm.SwQcFinishedTime,sqi.TestPhaseID,sp.TestPhaseName
                    order by sqi.PmToQcHeadAssignTime desc", projectName, projectOrders, softVersionNo, testPhases).ToList();
                }

            }
            return swQcAssigns;
        }
        public string UpdateSwQcIssueDetailModelForApprove(SwQcIssueDetailModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcIssueDetails
                                      where c.SwQcAssignId == results.SwQcAssignId && c.SwQcIssueId == results.SwQcIssueId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForChina = true;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }

        public string UpdateSwQcIssueDetailModelForDecline(SwQcIssueDetailModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcIssueDetails
                                      where c.SwQcAssignId == results.SwQcAssignId && c.SwQcIssueId == results.SwQcIssueId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForChina = false;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }

        public string UpdateNewInnovationModelForApprove(SwQcNewInnovationModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcNewInnovations
                                      where c.NewInnovationId == results.NewInnovationId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForIncentive = true;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }
        public string UpdateNewInnovationModelForDecline(SwQcNewInnovationModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcNewInnovations
                                      where c.NewInnovationId == results.NewInnovationId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForIncentive = false;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }

        public string UpdatePersonalFindingsForApprove(SwQcPersonalUseFindingsIssueDetailModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcPersonalUseFindingsIssueDetails
                                      where c.SwQcPrUseFindId == results.SwQcPrUseFindId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForIncentive = true;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }
        public string UpdatePersonalFindingsForDecline(SwQcPersonalUseFindingsIssueDetailModel results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedIssueDetail = (from c in _dbEntities.SwQcPersonalUseFindingsIssueDetails
                                      where c.SwQcPrUseFindId == results.SwQcPrUseFindId
                                      select c).FirstOrDefault();

            updatedIssueDetail.IsApprovedForIncentive = false;
            updatedIssueDetail.Updated = userId;
            updatedIssueDetail.UpdatedDate = DateTime.Now;
            _dbEntities.SaveChanges();

            return "OK";
        }
        public bool GetSupplierFeedbackData(SwQcIssueDetailModel supplierUpdate)
        {
            List<SwQcIssueDetailModel> getIncentiveReports = null;
            if (supplierUpdate.IssueSerial != null && supplierUpdate.SoftwareVersionNo != 0)
            {
                var scenario = supplierUpdate.IssueScenario.Replace("'", "''");

                //                string getIncentiveReportQuery = string.Format(@"select top 1 ProjectName from [CellPhoneProject].[dbo].[SwQcIssueDetails]
                //                where ProjectName ='" + supplierUpdate.ProjectName + "'  and IssueScenario ='{0}'  and SoftwareVersionNo='" + supplierUpdate.SoftwareVersionNo + "' + 1 and [SupplierFeedbackForAppend] in ('SUPPLIER_FEEDBACK') order by AddedDate desc ",
                //                scenario, supplierUpdate.ExpectedOutcome, supplierUpdate.SoftwareVersionNo);

                string getIncentiveReportQuery = string.Format(@"select top 1 ProjectName from [CellPhoneProject].[dbo].[SwQcIssueDetails]
                where ProjectName ='" + supplierUpdate.ProjectName.Trim() + "'  and IssueSerial ={0}  and SoftwareVersionNo='" + supplierUpdate.SoftwareVersionNo + "' + 1 and Demo not in ('Demo') and [SupplierFeedbackForAppend] in ('SUPPLIER_FEEDBACK') order by AddedDate desc ",
                supplierUpdate.IssueSerial, supplierUpdate.ExpectedOutcome, supplierUpdate.SoftwareVersionNo);
                getIncentiveReports =
                   _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        #region com for feedback
        //public string UpdateSwQcIssueDetailModelForSupplier(SwQcIssueDetailModel supplierUpdate)
        //{
        //    String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
        //    long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

        //    var updatedAssembly = (from c in _dbEntities.SwQcIssueDetails
        //                           where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                           select c).FirstOrDefault();

        //    updatedAssembly.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //    updatedAssembly.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //    if (supplierUpdate.WaltonQcStatus != "SELECT")
        //    {
        //        updatedAssembly.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        if (updatedAssembly.WaltonQcStatus == "FIXED")
        //        {
        //            //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
        //            updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-" + updatedAssembly.SoftwareVersionName + ")";
        //        }
        //    }
        //    else
        //    {
        //        updatedAssembly.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
        //    }
        //    updatedAssembly.SupplierComDate = supplierUpdate.SupplierComDate;
        //    updatedAssembly.SupplierComment = supplierUpdate.SupplierComment;
        //    // updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;
        //    if (supplierUpdate.SupplierStatus != "SELECT")
        //    {
        //        updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;

        //    }
        //    else
        //    {
        //        updatedAssembly.SupplierStatus = updatedAssembly.SupplierStatus;
        //    }
        //    updatedAssembly.Updated = userId;
        //    updatedAssembly.UpdatedDate = DateTime.Now;

        //    //version//
        //    if (updatedAssembly.SoftwareVersionNo != 0 && updatedAssembly.SoftwareVersionName == null)
        //    {
        //        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
        //                        where c.ProjectName == supplierUpdate.ProjectName && c.ProjectMasterId == supplierUpdate.ProjectMasterId //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                        && c.SoftwareVersionNo == updatedAssembly.SoftwareVersionNo
        //                        select c).FirstOrDefault();

        //        if (softName != null)
        //        {
        //            updatedAssembly.SoftwareVersionName = softName.SoftwareVersionName;
        //        }
        //    }
        //    //version//


        //    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly);
        //    _dbEntities.SaveChanges();


        //    //bool//
        //    var isSaveCheck = GetSupplierFeedbackData(supplierUpdate);

        //    if ((supplierUpdate.SupplierStatus == "NOT FIXED" ||
        //        supplierUpdate.SupplierStatus == "SUPPLIER CAN'T FIXED") && isSaveCheck != true)
        //    {

        //        var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
        //                                where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                                select c).FirstOrDefault();

        //        updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;

        //        updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
        //        updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
        //        updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

        //        updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
        //        updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
        //        updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
        //        updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
        //        updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
        //        updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
        //        updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
        //        updatedAssembly1.Frequency = updatedAssembly1.Frequency;
        //        updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
        //        updatedAssembly1.Attachment = updatedAssembly1.Attachment;
        //        updatedAssembly1.IssueType = updatedAssembly1.IssueType;
        //        updatedAssembly1.Result = updatedAssembly1.Result;
        //        updatedAssembly1.TestPhaseID = updatedAssembly1.TestPhaseID;
        //        //  updatedAssembly1.SoftwareVersionName = "";
        //        updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

        //        if (updatedAssembly1.SoftwareVersionNo != 0)
        //        {
        //            var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
        //                            where c.ProjectName == supplierUpdate.ProjectName && c.ProjectMasterId == supplierUpdate.ProjectMasterId//&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo
        //                            select c).FirstOrDefault();

        //            if (softName != null)
        //            {
        //                updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
        //            }
        //            else
        //            {
        //                updatedAssembly1.SoftwareVersionName = "";
        //            }
        //        }
        //        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //        updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //        //updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        if (supplierUpdate.WaltonQcStatus != "SELECT")
        //        {
        //            updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //            if (updatedAssembly1.WaltonQcStatus == "FIXED")
        //            {
        //                //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
        //                updatedAssembly1.FixedVersion = "SW-V-" + supplierUpdate.SoftwareVersionNo + " (SW_VER-" + supplierUpdate.SoftwareVersionName + ")";
        //            }
        //        }
        //        else
        //        {
        //            updatedAssembly1.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
        //        }
        //        updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
        //        updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;
        //        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
        //        updatedAssembly1.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
        //        updatedAssembly1.WaltonPmComment = updatedAssembly1.WaltonPmComment;
        //        updatedAssembly1.WaltonPmStatus = updatedAssembly1.WaltonPmStatus;

        //        updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
        //        updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
        //        updatedAssembly1.Upload = updatedAssembly1.Upload;
        //        updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
        //        updatedAssembly1.IsFile = updatedAssembly1.IsFile;
        //        updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
        //        updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
        //        updatedAssembly1.IsTab = updatedAssembly1.IsTab;
        //        updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
        //        updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
        //        updatedAssembly1.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
        //        updatedAssembly1.Updated = userId;
        //        updatedAssembly1.UpdatedDate = DateTime.Now;

        //        _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
        //        _dbEntities.SaveChanges();


        //        SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

        //        swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
        //        swQcIssue.ProjectName = supplierUpdate.ProjectName;
        //        swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
        //        swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
        //        swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
        //        swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
        //        swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //        swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //        if (supplierUpdate.WaltonQcStatus != "SELECT")
        //        {
        //            swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        }
        //        else
        //        {
        //            swQcIssue.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
        //        }
        //        swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
        //        swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
        //        if (supplierUpdate.SupplierStatus != "SELECT")
        //        {
        //            swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
        //        }
        //        else
        //        {
        //            swQcIssue.SupplierStatus = updatedAssembly.SupplierStatus;
        //        }
        //        swQcIssue.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
        //        swQcIssue.WaltonPmComment = updatedAssembly.WaltonPmComment;
        //        swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
        //        swQcIssue.Added = userId;
        //        swQcIssue.AddedDate = DateTime.Now;

        //        _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
        //        _dbEntities.SaveChanges();
        //    }
        //    else if ((supplierUpdate.WaltonQcStatus == "NOT FIXED" ||
        //   supplierUpdate.WaltonQcStatus == "SUPPLIER CAN'T FIXED") && isSaveCheck != true)
        //    {

        //        var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
        //                                where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                                select c).FirstOrDefault();

        //        updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;

        //        updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
        //        updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
        //        updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

        //        updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
        //        updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
        //        updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
        //        updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
        //        updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
        //        updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
        //        updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
        //        updatedAssembly1.Frequency = updatedAssembly1.Frequency;
        //        updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
        //        updatedAssembly1.Attachment = updatedAssembly1.Attachment;
        //        updatedAssembly1.IssueType = updatedAssembly1.IssueType;
        //        updatedAssembly1.Result = updatedAssembly1.Result;
        //        updatedAssembly1.TestPhaseID = updatedAssembly1.TestPhaseID;
        //        //  updatedAssembly1.SoftwareVersionName = "";
        //        updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

        //        if (updatedAssembly1.SoftwareVersionNo != 0)
        //        {
        //            var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
        //                            where c.ProjectName == supplierUpdate.ProjectName && c.ProjectMasterId == supplierUpdate.ProjectMasterId//&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
        //                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo
        //                            select c).FirstOrDefault();

        //            if (softName != null)
        //            {
        //                updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
        //            }
        //            else
        //            {
        //                updatedAssembly1.SoftwareVersionName = "";
        //            }
        //        }
        //        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //        updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //        //updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        if (supplierUpdate.WaltonQcStatus != "SELECT")
        //        {
        //            updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //            if (updatedAssembly1.WaltonQcStatus == "FIXED")
        //            {
        //                //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
        //                updatedAssembly1.FixedVersion = "SW-V-" + supplierUpdate.SoftwareVersionNo + " (SW_VER-" + supplierUpdate.SoftwareVersionName + ")";
        //            }
        //        }
        //        else
        //        {
        //            updatedAssembly1.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
        //        }

        //        updatedAssembly1.SupplierComDate = null;
        //        updatedAssembly1.SupplierComment = null;
        //        updatedAssembly1.SupplierStatus = null;
        //        updatedAssembly1.WaltonPmComDate = null;
        //        updatedAssembly1.WaltonPmComment = null;
        //        updatedAssembly1.WaltonPmStatus = null;

        //        updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
        //        updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
        //        updatedAssembly1.Upload = updatedAssembly1.Upload;
        //        updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
        //        updatedAssembly1.IsFile = updatedAssembly1.IsFile;
        //        updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
        //        updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
        //        updatedAssembly1.IsTab = updatedAssembly1.IsTab;
        //        updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
        //        updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
        //        updatedAssembly1.SupplierFeedbackForAppend = "QC_FEEDBACK";
        //        updatedAssembly1.Updated = userId;
        //        updatedAssembly1.UpdatedDate = DateTime.Now;

        //        _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
        //        _dbEntities.SaveChanges();


        //        SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

        //        swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
        //        swQcIssue.ProjectName = supplierUpdate.ProjectName;
        //        swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
        //        swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
        //        swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
        //        swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
        //        swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //        swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //        if (supplierUpdate.WaltonQcStatus != "SELECT")
        //        {
        //            swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        }
        //        else
        //        {
        //            swQcIssue.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
        //        }
        //        swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
        //        swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
        //        if (supplierUpdate.SupplierStatus != "SELECT")
        //        {
        //            swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
        //        }
        //        else
        //        {
        //            swQcIssue.SupplierStatus = updatedAssembly.SupplierStatus;
        //        }
        //        swQcIssue.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
        //        swQcIssue.WaltonPmComment = updatedAssembly.WaltonPmComment;
        //        swQcIssue.SupplierFeedbackForAppend = "QC_FEEDBACK";
        //        swQcIssue.Added = userId;
        //        swQcIssue.AddedDate = DateTime.Now;

        //        _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
        //        _dbEntities.SaveChanges();
        //    }
        //    else
        //    {
        //        SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

        //        swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
        //        swQcIssue.ProjectName = supplierUpdate.ProjectName;
        //        swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
        //        swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
        //        swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
        //        swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
        //        swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
        //        swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
        //        //swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
        //        if (supplierUpdate.WaltonQcStatus != "SELECT")
        //        {
        //            swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;

        //        }
        //        else
        //        {
        //            swQcIssue.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
        //        }
        //        swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
        //        swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
        //        //swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
        //        if (supplierUpdate.SupplierStatus != "SELECT")
        //        {
        //            swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
        //        }
        //        else
        //        {
        //            swQcIssue.SupplierStatus = updatedAssembly.SupplierStatus;
        //        }
        //        swQcIssue.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
        //        swQcIssue.WaltonPmComment = updatedAssembly.WaltonPmComment;
        //        swQcIssue.Added = userId;
        //        swQcIssue.AddedDate = DateTime.Now;

        //        _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
        //        _dbEntities.SaveChanges();
        //    }

        //    return "OK";
        //}
        #endregion
        public string UpdateSwQcIssueDetailModelForSupplier(SwQcIssueDetailModel supplierUpdate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var isSaveCheck = false;

            if (!string.IsNullOrEmpty(supplierUpdate.WaltonQcStatus))
            {
                supplierUpdate.WaltonQcStatus = supplierUpdate.WaltonQcStatus.Trim();
            }
            if (!string.IsNullOrEmpty(supplierUpdate.WaltonQcStatusSelect))
            {
                supplierUpdate.WaltonQcStatusSelect = supplierUpdate.WaltonQcStatusSelect.Trim();
            }
            if (!string.IsNullOrEmpty(supplierUpdate.SupplierStatus))
            {
                supplierUpdate.SupplierStatus = supplierUpdate.SupplierStatus.Trim();
            }
            if (!string.IsNullOrEmpty(supplierUpdate.SupplierStatusSelect))
            {
                supplierUpdate.SupplierStatusSelect = supplierUpdate.SupplierStatusSelect.Trim();
            }
            #region com1
            //var updatedAssembly = (from c in _dbEntities.SwQcIssueDetails
            //                       where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                       select c).FirstOrDefault();


            //updatedAssembly.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
            //updatedAssembly.WaltonQcComment = supplierUpdate.WaltonQcComment;
            //if (supplierUpdate.WaltonQcStatus != "SELECT")
            //{
            //    updatedAssembly.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
            //    if (updatedAssembly.WaltonQcStatus == "FIXED")
            //    {
            //        //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
            //        updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-" +
            //                                       updatedAssembly.SoftwareVersionName + ")";
            //    }
            //    else
            //    {
            //        updatedAssembly.FixedVersion = "";
            //    }
            //}
            //else
            //{
            //    updatedAssembly.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
            //}
            //updatedAssembly.SupplierComDate = supplierUpdate.SupplierComDate;
            //updatedAssembly.SupplierComment = supplierUpdate.SupplierComment;
            //// updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;
            //if (supplierUpdate.SupplierStatus != "SELECT")
            //{
            //    updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;

            //}
            //else
            //{
            //    updatedAssembly.SupplierStatus = updatedAssembly.SupplierStatus;
            //}
            //updatedAssembly.Updated = userId;
            //updatedAssembly.UpdatedDate = DateTime.Now;

            ////version//
            //if (updatedAssembly.SoftwareVersionNo != 0)
            //{
            //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
            //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                    && c.SoftwareVersionNo == updatedAssembly.SoftwareVersionNo
            //                    select c).FirstOrDefault();

            //    if (softName != null)
            //    {
            //        updatedAssembly.SoftwareVersionName = softName.SoftwareVersionName;
            //    }
            //}
            ////version//


            //_dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly);
            //_dbEntities.SaveChanges();


            #endregion

            //version 1//
            if (supplierUpdate.SoftwareVersionNo == 1)
            {
                var updatedAssembly = (from c in _dbEntities.SwQcIssueDetails
                                       where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                       select c).FirstOrDefault();


                updatedAssembly.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                updatedAssembly.WaltonQcComment = supplierUpdate.WaltonQcComment;
                // updatedAssembly.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                if (supplierUpdate.WaltonQcStatusSelect != "SELECT")
                {
                    updatedAssembly.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                }
                else
                {
                    updatedAssembly.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
                }
                // updatedAssembly.FixedVersion = null;

                if (updatedAssembly.WaltonQcStatus == "FIXED")
                {
                    //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
                    //updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-" +
                    //                               updatedAssembly.SoftwareVersionName + ")";
                    if (updatedAssembly.SoftwareVersionNo != 0 && updatedAssembly.TestPhaseID != 5 && updatedAssembly.TestPhaseID != 10)
                    {

                        var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                          where c.ProjectName == supplierUpdate.ProjectName
                                          && c.SoftwareVersionNo == updatedAssembly.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                          select c).FirstOrDefault();

                        updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                    }
                    else if (updatedAssembly.SoftwareVersionNo != 0 && updatedAssembly.TestPhaseID == 5)
                    {


                        var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                          where c.ProjectName == supplierUpdate.ProjectName
                                                && c.SoftwareVersionNo == updatedAssembly.SoftwareVersionNo && c.TestPhaseID == 5
                                          select c).FirstOrDefault();

                        updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                    }
                    else
                    {
                        updatedAssembly.FixedVersion = "SW-V-" + updatedAssembly.SoftwareVersionNo + " (SW_VER-)";
                    }
                }
                else
                {
                    updatedAssembly.FixedVersion = "";
                }

                updatedAssembly.SupplierComDate = supplierUpdate.SupplierComDate;
                updatedAssembly.SupplierComment = supplierUpdate.SupplierComment;
                updatedAssembly.Demo = updatedAssembly.Demo;
                //  updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;

                if (supplierUpdate.SupplierStatusSelect != "SELECT")
                {
                    updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                }
                else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                {
                    updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;
                }
                // updatedAssembly.TestPhaseID = 1;
                ////version//
                _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly);
                _dbEntities.SaveChanges();

                //new//
                isSaveCheck = GetSupplierFeedbackData(supplierUpdate);

                if (isSaveCheck != true)
                {

                    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
                                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            select c).FirstOrDefault();

                    updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;
                    updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
                    updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
                    updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

                    updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
                    updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
                    updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
                    updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
                    updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
                    updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
                    updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
                    updatedAssembly1.Frequency = updatedAssembly1.Frequency;
                    updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
                    updatedAssembly1.Attachment = updatedAssembly1.Attachment;
                    updatedAssembly1.IssueType = updatedAssembly1.IssueType;
                    updatedAssembly1.Result = updatedAssembly1.Result;
                    updatedAssembly1.TestPhaseID = 1;
                    //  updatedAssembly1.SoftwareVersionName = "";
                    updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

                    //if (updatedAssembly1.SoftwareVersionNo != 0)
                    //{
                    //   var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName
                    //                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //    else
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = "";
                    //    }
                    //}
                    if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5
                                            && c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly1.SoftwareVersionName = "";
                    }
                    //
                    updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    if (supplierUpdate.WaltonQcStatusSelect != "SELECT")
                    {
                        updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    }
                    else
                    {
                        updatedAssembly1.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
                    }

                    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly1.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    updatedAssembly1.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    updatedAssembly1.WaltonPmStatus = updatedAssembly1.WaltonPmStatus;

                    updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
                    updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
                    updatedAssembly1.Upload = updatedAssembly1.Upload;
                    updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
                    updatedAssembly1.IsFile = updatedAssembly1.IsFile;
                    updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
                    updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
                    updatedAssembly1.IsTab = updatedAssembly1.IsTab;
                    updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
                    updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
                    updatedAssembly1.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    updatedAssembly1.Updated = userId;
                    updatedAssembly1.UpdatedDate = DateTime.Now;
                    updatedAssembly1.IssueSerial = updatedAssembly.IssueSerial;
                    updatedAssembly1.Demo = "";

                    _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
                    _dbEntities.SaveChanges();

                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;

                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    if (supplierUpdate.WaltonQcStatusSelect != "SELECT")
                    {
                        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    }
                    else
                    {
                        swQcIssue.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
                    }

                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly1.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
                    _dbEntities.SaveChanges();
                }

            }//end 1st version
            //

            //bool//
            isSaveCheck = GetSupplierFeedbackData(supplierUpdate);

            if (supplierUpdate.WaltonQcStatusSelect == "SELECT")
            {
                //St
                if ((supplierUpdate.WaltonQcStatus == "NOT FIXED" || supplierUpdate.WaltonQcStatus == "SUPPLIER CAN'T FIXED" || supplierUpdate.WaltonQcStatus == "NEW ISSUE")
                    && (isSaveCheck != true && supplierUpdate.SoftwareVersionNo != 1))
                {
                    //Update//
                    var updatedAssembly33 = (from c in _dbEntities.SwQcIssueDetails
                                             where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                             select c).FirstOrDefault();

                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly33.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly33.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly33.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly33.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    if (updatedAssembly33.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                select c).FirstOrDefault();

                        ////SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
                        //updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";
                        if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                        {


                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else
                    {
                        updatedAssembly33.FixedVersion = "";
                    }

                    updatedAssembly33.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly33.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly33.Updated = userId;
                    updatedAssembly33.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly33.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10 
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}

                    if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly33.SoftwareVersionName = "";
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly33);
                    _dbEntities.SaveChanges();



                    //Add//
                    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
                                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            select c).FirstOrDefault();

                    updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;

                    updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
                    updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
                    updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

                    updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
                    updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
                    updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
                    updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
                    updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
                    updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
                    updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
                    updatedAssembly1.Frequency = updatedAssembly1.Frequency;
                    updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
                    updatedAssembly1.Attachment = updatedAssembly1.Attachment;
                    updatedAssembly1.IssueType = updatedAssembly1.IssueType;
                    updatedAssembly1.Result = updatedAssembly1.Result;
                    updatedAssembly1.TestPhaseID = 2;
                    //  updatedAssembly1.SoftwareVersionName = "";
                    updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

                    //if (updatedAssembly1.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10 
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //    else
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = "";
                    //    }
                    //}
                    if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly1.SoftwareVersionName = "";
                    }
                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly1.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    if (updatedAssembly1.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();

                        ////SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
                        //updatedAssembly1.FixedVersion = "SW-V-" + supplierUpdate.SoftwareVersionNo + " (SW_VER-" +
                        //                                 softNamess.SoftwareVersionName + ")";
                        if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                        {


                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                           softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else if (updatedAssembly1.WaltonQcStatus == "NEW ISSUE")
                    {
                        updatedAssembly1.FixedVersion = null;
                        updatedAssembly1.WaltonQcStatus = "";
                    }
                    else
                    {
                        updatedAssembly1.FixedVersion = null;
                    }
                    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly1.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    updatedAssembly1.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    updatedAssembly1.WaltonPmStatus = updatedAssembly1.WaltonPmStatus;

                    updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
                    updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
                    updatedAssembly1.Upload = updatedAssembly1.Upload;
                    updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
                    updatedAssembly1.IsFile = updatedAssembly1.IsFile;
                    updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
                    updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
                    updatedAssembly1.IsTab = updatedAssembly1.IsTab;
                    updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
                    updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
                    updatedAssembly1.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    updatedAssembly1.Updated = userId;
                    updatedAssembly1.UpdatedDate = DateTime.Now;
                    updatedAssembly1.IssueSerial = updatedAssembly1.IssueSerial;
                    updatedAssembly1.Demo = "";

                    _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
                    _dbEntities.SaveChanges();

                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly1.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }

                if ((supplierUpdate.WaltonQcStatus != "NOT FIXED" && supplierUpdate.WaltonQcStatus != "SUPPLIER CAN'T FIXED" && supplierUpdate.WaltonQcStatus != "NEW ISSUE")
                    && supplierUpdate.SoftwareVersionNo != 1)
                {
                    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
                                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            select c).FirstOrDefault();


                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly1.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    if (updatedAssembly1.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();

                        //updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";
                        //
                        if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-)";
                        }
                        //
                    }
                    else if (updatedAssembly1.WaltonQcStatus == "NEW ISSUE")
                    {
                        updatedAssembly1.FixedVersion = "";
                        updatedAssembly1.WaltonQcStatus = "";
                    }
                    else
                    {
                        updatedAssembly1.FixedVersion = "";

                    }

                    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly1.Updated = userId;
                    updatedAssembly1.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly1.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}
                    if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly1.SoftwareVersionName = "";
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly1);
                    _dbEntities.SaveChanges();

                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly1.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }
                //end st
            }

            else if (supplierUpdate.WaltonQcStatusSelect != "SELECT")
            {
                //St

                if ((supplierUpdate.WaltonQcStatusSelect == "NOT FIXED" || supplierUpdate.WaltonQcStatusSelect == "SUPPLIER CAN'T FIXED" || supplierUpdate.WaltonQcStatusSelect == "NEW ISSUE")
                    && (isSaveCheck != true && supplierUpdate.SoftwareVersionNo != 1))
                {
                    //Update//
                    var updatedAssembly33 = (from c in _dbEntities.SwQcIssueDetails
                                             where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                             select c).FirstOrDefault();


                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly33.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly33.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly33.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly33.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    if (updatedAssembly33.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();

                        //updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";
                        if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-)";
                        }

                    }
                    else
                    {
                        updatedAssembly33.FixedVersion = "";
                    }

                    updatedAssembly33.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly33.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly33.Updated = userId;
                    updatedAssembly33.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly33.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}
                    if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly33.SoftwareVersionName = "";
                    }
                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly33);
                    _dbEntities.SaveChanges();

                    //Add//
                    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
                                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            select c).FirstOrDefault();

                    updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;

                    updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
                    updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
                    updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

                    updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
                    updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
                    updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
                    updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
                    updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
                    updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
                    updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
                    updatedAssembly1.Frequency = updatedAssembly1.Frequency;
                    updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
                    updatedAssembly1.Attachment = updatedAssembly1.Attachment;
                    updatedAssembly1.IssueType = updatedAssembly1.IssueType;
                    updatedAssembly1.Result = updatedAssembly1.Result;
                    updatedAssembly1.TestPhaseID = 2;
                    updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

                    //if (updatedAssembly1.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //    else
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = "";
                    //    }
                    //}
                    if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly1.SoftwareVersionName = "";
                    }

                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly1.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    if (updatedAssembly1.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();
                        ////SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
                        //updatedAssembly1.FixedVersion = "SW-V-" + supplierUpdate.SoftwareVersionNo + " (SW_VER-" +
                        //                                 softNamess.SoftwareVersionName + ")";

                        if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                        {


                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else if (updatedAssembly1.WaltonQcStatus == "NEW ISSUE")
                    {
                        updatedAssembly1.FixedVersion = null;
                        updatedAssembly1.WaltonQcStatus = "";
                    }
                    else
                    {
                        updatedAssembly1.FixedVersion = null;
                    }

                    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly1.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    updatedAssembly1.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    updatedAssembly1.WaltonPmStatus = updatedAssembly1.WaltonPmStatus;

                    updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
                    updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
                    updatedAssembly1.Upload = updatedAssembly1.Upload;
                    updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
                    updatedAssembly1.IsFile = updatedAssembly1.IsFile;
                    updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
                    updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
                    updatedAssembly1.IsTab = updatedAssembly1.IsTab;
                    updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
                    updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
                    updatedAssembly1.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    updatedAssembly1.Updated = userId;
                    updatedAssembly1.UpdatedDate = DateTime.Now;
                    updatedAssembly1.IssueSerial = updatedAssembly1.IssueSerial;
                    updatedAssembly1.Demo = "";

                    _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
                    _dbEntities.SaveChanges();

                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    if (supplierUpdate.WaltonQcStatus != "SELECT")
                    {
                        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    }
                    else
                    {
                        swQcIssue.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
                    }
                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly1.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }

                //  isSaveCheck = GetSupplierFeedbackData(supplierUpdate);

                if ((supplierUpdate.WaltonQcStatusSelect != "NOT FIXED" && supplierUpdate.WaltonQcStatusSelect != "SUPPLIER CAN'T FIXED" && supplierUpdate.WaltonQcStatusSelect != "NEW ISSUE")
                    && supplierUpdate.SoftwareVersionNo != 1)
                {
                    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
                                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                            select c).FirstOrDefault();


                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly1.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    if (updatedAssembly1.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();

                        //updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";
                        if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                        {


                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else if (updatedAssembly1.WaltonQcStatus == "NEW ISSUE")
                    {
                        updatedAssembly1.FixedVersion = "";
                        updatedAssembly1.WaltonQcStatus = "";
                    }
                    else
                    {
                        updatedAssembly1.FixedVersion = "";

                    }

                    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly1.Updated = userId;
                    updatedAssembly1.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly1.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}

                    if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID != 5 && updatedAssembly1.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly1.SoftwareVersionNo != 0 && updatedAssembly1.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly1.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly1.SoftwareVersionName = "";
                    }
                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly1);
                    _dbEntities.SaveChanges();

                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;

                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly1.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly1.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly1.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }
                //end st
            }

            isSaveCheck = GetSupplierFeedbackData(supplierUpdate);
            if (supplierUpdate.WaltonQcStatusSelect == "SELECT" && isSaveCheck == true)
            {
                if ((supplierUpdate.WaltonQcStatus == "NOT FIXED" ||
                     supplierUpdate.WaltonQcStatus == "SUPPLIER CAN'T FIXED" ||
                     supplierUpdate.WaltonQcStatus == "NEW ISSUE")
                    && (isSaveCheck == true && supplierUpdate.SoftwareVersionNo != 1))
                {
                    //Update//
                    var updatedAssembly33 = (from c in _dbEntities.SwQcIssueDetails
                                             where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                             select c).FirstOrDefault();


                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly33.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly33.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly33.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly33.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    if (updatedAssembly33.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();
                        //updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";

                        if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                        {
                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else
                    {
                        updatedAssembly33.FixedVersion = "";
                    }

                    updatedAssembly33.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly33.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly33.Updated = userId;
                    updatedAssembly33.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly33.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}
                    if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else
                    {
                        updatedAssembly33.SoftwareVersionName = "";
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly33);
                    _dbEntities.SaveChanges();

                    //log
                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    if (supplierUpdate.WaltonQcStatus != "SELECT")
                    {
                        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    }
                    else
                    {
                        swQcIssue.WaltonQcStatus = updatedAssembly33.WaltonQcStatus;
                    }
                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly33.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly33.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly33.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }
            }
            else if (supplierUpdate.WaltonQcStatusSelect != "SELECT" && isSaveCheck == true)
            {
                if ((supplierUpdate.WaltonQcStatusSelect == "NOT FIXED" ||
                     supplierUpdate.WaltonQcStatusSelect == "SUPPLIER CAN'T FIXED" ||
                     supplierUpdate.WaltonQcStatusSelect == "NEW ISSUE")
                    && (isSaveCheck == true && supplierUpdate.SoftwareVersionNo != 1))
                {
                    //Update//
                    var updatedAssembly33 = (from c in _dbEntities.SwQcIssueDetails
                                             where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
                                             select c).FirstOrDefault();


                    if (supplierUpdate.WaltonQcComDate != null)
                    {
                        updatedAssembly33.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    }
                    else
                    {
                        updatedAssembly33.WaltonQcComDate = DateTime.Now;
                    }
                    updatedAssembly33.WaltonQcComment = supplierUpdate.WaltonQcComment;

                    updatedAssembly33.WaltonQcStatus = supplierUpdate.WaltonQcStatusSelect;
                    if (updatedAssembly33.WaltonQcStatus == "FIXED")
                    {
                        //var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                        //                  where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                        //                  && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                        //                  select c).FirstOrDefault();
                        //updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                        //                               softNamess.SoftwareVersionName + ")";
                        if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                        {

                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                       softNamess.SoftwareVersionName + ")";
                        }
                        else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                        {


                            var softNamess = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                              where c.ProjectName == supplierUpdate.ProjectName
                                              && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                              select c).FirstOrDefault();

                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-" +
                                                   softNamess.SoftwareVersionName + ")";
                        }
                        else
                        {
                            updatedAssembly33.FixedVersion = "SW-V-" + updatedAssembly33.SoftwareVersionNo + " (SW_VER-)";
                        }
                    }
                    else
                    {
                        updatedAssembly33.FixedVersion = "";
                    }

                    updatedAssembly33.SupplierComDate = supplierUpdate.SupplierComDate;
                    updatedAssembly33.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        updatedAssembly33.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    updatedAssembly33.Updated = userId;
                    updatedAssembly33.UpdatedDate = DateTime.Now;

                    //version//
                    //if (updatedAssembly33.SoftwareVersionNo != 0)
                    //{
                    //    var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                    //                    where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
                    //                    && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 && c.TestPhaseID != 10
                    //                    select c).FirstOrDefault();

                    //    if (softName != null)
                    //    {
                    //        updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                    //    }
                    //}
                    if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID != 5 && updatedAssembly33.TestPhaseID != 10)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID != 5 &&
                                            c.TestPhaseID != 10
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }
                    else if (updatedAssembly33.SoftwareVersionNo != 0 && updatedAssembly33.TestPhaseID == 5)
                    {
                        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
                                        where
                                            c.ProjectName == supplierUpdate.ProjectName
                                            && c.SoftwareVersionNo == updatedAssembly33.SoftwareVersionNo && c.TestPhaseID == 5
                                        select c).FirstOrDefault();

                        if (softName != null)
                        {
                            updatedAssembly33.SoftwareVersionName = softName.SoftwareVersionName;
                        }
                        else
                        {
                            updatedAssembly33.SoftwareVersionName = "";
                        }
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly33);
                    _dbEntities.SaveChanges();
                    //log
                    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

                    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
                    swQcIssue.ProjectName = supplierUpdate.ProjectName;
                    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
                    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
                    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
                    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
                    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
                    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
                    if (supplierUpdate.WaltonQcStatus != "SELECT")
                    {
                        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
                    }
                    else
                    {
                        swQcIssue.WaltonQcStatus = updatedAssembly33.WaltonQcStatus;
                    }
                    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
                    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;

                    if (supplierUpdate.SupplierStatusSelect != "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatusSelect;
                    }
                    else if (supplierUpdate.SupplierStatusSelect == "SELECT")
                    {
                        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
                    }
                    swQcIssue.WaltonPmComDate = updatedAssembly33.WaltonPmComDate;
                    swQcIssue.WaltonPmComment = updatedAssembly33.WaltonPmComment;
                    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
                    swQcIssue.Added = userId;
                    swQcIssue.AddedDate = DateTime.Now;
                    swQcIssue.IssueSerial = updatedAssembly33.IssueSerial;

                    _dbEntities.SwQcIssueDetailsLogs.Add(swQcIssue);
                    _dbEntities.SaveChanges();
                }
            }

            //end

            #region com2
            // isSaveCheck = GetSupplierFeedbackData(supplierUpdate);

            //if ((supplierUpdate.SupplierStatus == "NOT FIXED" ||
            //    supplierUpdate.SupplierStatus == "SUPPLIER CAN'T FIXED"
            //    || supplierUpdate.SupplierStatus == "FIXED" || supplierUpdate.SupplierStatus == "OPTIMIZED"
            //    || supplierUpdate.SupplierStatus == "IMPROVED" || supplierUpdate.SupplierStatus == "NEW ISSUE") && updatedAssembly.WaltonQcStatus != "FIXED"
            //    && isSaveCheck != true)
            //{

            //    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
            //                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                            select c).FirstOrDefault();

            //    updatedAssembly1.SwQcHeadAssignId = updatedAssembly1.SwQcHeadAssignId;

            //    updatedAssembly1.SwQcAssignId = updatedAssembly1.SwQcAssignId;
            //    updatedAssembly1.ProjectPmAssignId = updatedAssembly1.ProjectPmAssignId;
            //    updatedAssembly1.ProjectMasterId = updatedAssembly1.ProjectMasterId;

            //    updatedAssembly1.OrderNumber = updatedAssembly1.OrderNumber;
            //    updatedAssembly1.ProjectName = updatedAssembly1.ProjectName;
            //    updatedAssembly1.ProjectType = updatedAssembly1.ProjectType;
            //    updatedAssembly1.IssueScenario = updatedAssembly1.IssueScenario;
            //    updatedAssembly1.ExpectedOutcome = updatedAssembly1.ExpectedOutcome;
            //    updatedAssembly1.IssueDetails = updatedAssembly1.IssueDetails;
            //    updatedAssembly1.RefernceModule = updatedAssembly1.RefernceModule;
            //    updatedAssembly1.Frequency = updatedAssembly1.Frequency;
            //    updatedAssembly1.IssueReproducePath = updatedAssembly1.IssueReproducePath;
            //    updatedAssembly1.Attachment = updatedAssembly1.Attachment;
            //    updatedAssembly1.IssueType = updatedAssembly1.IssueType;
            //    updatedAssembly1.Result = updatedAssembly1.Result;
            //    updatedAssembly1.TestPhaseID = updatedAssembly1.TestPhaseID;
            //    //  updatedAssembly1.SoftwareVersionName = "";
            //    updatedAssembly1.SoftwareVersionNo = updatedAssembly1.SoftwareVersionNo + 1;

            //    if (updatedAssembly1.SoftwareVersionNo != 0)
            //    {
            //        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
            //                        where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                        && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo
            //                        select c).FirstOrDefault();

            //        if (softName != null)
            //        {
            //            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
            //        }
            //        else
            //        {
            //            updatedAssembly1.SoftwareVersionName = "";
            //        }
            //    }
            //    updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
            //    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;
            //    // updatedAssembly1.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
            //    if (supplierUpdate.WaltonQcStatus != "SELECT")
            //    {
            //        updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
            //        if (updatedAssembly1.WaltonQcStatus == "FIXED")
            //        {
            //            //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
            //            updatedAssembly1.FixedVersion = "SW-V-" + supplierUpdate.SoftwareVersionNo + " (SW_VER-" + supplierUpdate.SoftwareVersionName + ")";
            //        }
            //        else
            //        {
            //            updatedAssembly1.FixedVersion = null;
            //        }
            //    }
            //    else
            //    {
            //        updatedAssembly1.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
            //    }
            //    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
            //    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;
            //    // updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;

            //    if (supplierUpdate.SupplierStatus != "SELECT")
            //    {
            //        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;
            //    }
            //    else
            //    {
            //        updatedAssembly1.SupplierStatus = updatedAssembly.SupplierStatus;
            //    }

            //    updatedAssembly1.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
            //    updatedAssembly1.WaltonPmComment = updatedAssembly.WaltonPmComment;
            //    updatedAssembly1.WaltonPmStatus = updatedAssembly.WaltonPmStatus;

            //    //updatedAssembly1.SupplierComDate = null;
            //    //updatedAssembly1.SupplierComment = null;
            //    //updatedAssembly1.SupplierStatus = null;
            //    //updatedAssembly1.WaltonPmComDate = null;
            //    //updatedAssembly1.WaltonPmComment = null;
            //    //updatedAssembly1.WaltonPmStatus = null;

            //    updatedAssembly1.FilesUrl = updatedAssembly1.FilesUrl;
            //    updatedAssembly1.FilesDetail = updatedAssembly1.FilesDetail;
            //    updatedAssembly1.Upload = updatedAssembly1.Upload;
            //    updatedAssembly1.IsIssue = updatedAssembly1.IsIssue;
            //    updatedAssembly1.IsFile = updatedAssembly1.IsFile;
            //    updatedAssembly1.IsSmart = updatedAssembly1.IsSmart;
            //    updatedAssembly1.IsFeature = updatedAssembly1.IsFeature;
            //    updatedAssembly1.IsTab = updatedAssembly1.IsTab;
            //    updatedAssembly1.IsWalpad = updatedAssembly1.IsWalpad;
            //    updatedAssembly1.IsApprovedForChina = updatedAssembly1.IsApprovedForChina;
            //    updatedAssembly1.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
            //    updatedAssembly1.Updated = userId;
            //    updatedAssembly1.UpdatedDate = DateTime.Now;
            //    updatedAssembly1.IssueSerial = updatedAssembly.IssueSerial;

            //    _dbEntities.SwQcIssueDetails.Add(updatedAssembly1);
            //    _dbEntities.SaveChanges();


            //    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

            //    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
            //    swQcIssue.ProjectName = supplierUpdate.ProjectName;
            //    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
            //    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
            //    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
            //    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
            //    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
            //    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
            //    if (supplierUpdate.WaltonQcStatus != "SELECT")
            //    {
            //        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
            //    }
            //    else
            //    {
            //        swQcIssue.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
            //    }
            //    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
            //    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
            //    if (supplierUpdate.SupplierStatus != "SELECT")
            //    {
            //        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
            //    }
            //    else
            //    {
            //        swQcIssue.SupplierStatus = updatedAssembly.SupplierStatus;
            //    }
            //    swQcIssue.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
            //    swQcIssue.WaltonPmComment = updatedAssembly.WaltonPmComment;
            //    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
            //    swQcIssue.Added = userId;
            //    swQcIssue.AddedDate = DateTime.Now;
            //    swQcIssue.IssueSerial = updatedAssembly.IssueSerial;

            //    _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
            //    _dbEntities.SaveChanges();
            //}

            //if ((supplierUpdate.SupplierStatus == "FIXED" && supplierUpdate.WaltonQcStatus == "FIXED") && 
            //    (updatedAssembly.SupplierStatus == "FIXED" && updatedAssembly.WaltonQcStatus == "FIXED"))
            //if (((supplierUpdate.SupplierStatus == "FIXED" && supplierUpdate.WaltonQcStatus == "FIXED") ||
            //     (updatedAssembly.SupplierStatus == "FIXED" && updatedAssembly.WaltonQcStatus == "FIXED") ||
            //     (updatedAssembly.SupplierStatus == "FIXED" && supplierUpdate.WaltonQcStatus == "FIXED") ||
            //     (supplierUpdate.SupplierStatus == "FIXED" && updatedAssembly.WaltonQcStatus == "FIXED")) && supplierUpdate.SoftwareVersionNo != 1)
            //{

            //    var updatedAssembly1 = (from c in _dbEntities.SwQcIssueDetails
            //                            where c.SwQcIssueId == supplierUpdate.SwQcIssueId && c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                            select c).FirstOrDefault();

            //    updatedAssembly1.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
            //    updatedAssembly1.WaltonQcComment = supplierUpdate.WaltonQcComment;
            //    if (supplierUpdate.WaltonQcStatus != "SELECT")
            //    {
            //        updatedAssembly1.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
            //        if (updatedAssembly1.WaltonQcStatus == "FIXED")
            //        {
            //            //SW-V-2 (SW_VER-Walton_Primo_NH4_V002_03232019)
            //            updatedAssembly1.FixedVersion = "SW-V-" + updatedAssembly1.SoftwareVersionNo + " (SW_VER-" +
            //                                           updatedAssembly1.SoftwareVersionName + ")";
            //        }
            //        else
            //        {
            //            updatedAssembly1.FixedVersion = "";
            //        }
            //    }
            //    else
            //    {
            //        updatedAssembly1.WaltonQcStatus = updatedAssembly1.WaltonQcStatus;
            //    }
            //    updatedAssembly1.SupplierComDate = supplierUpdate.SupplierComDate;
            //    updatedAssembly1.SupplierComment = supplierUpdate.SupplierComment;
            //    // updatedAssembly.SupplierStatus = supplierUpdate.SupplierStatus;
            //    if (supplierUpdate.SupplierStatus != "SELECT")
            //    {
            //        updatedAssembly1.SupplierStatus = supplierUpdate.SupplierStatus;

            //    }
            //    else
            //    {
            //        updatedAssembly1.SupplierStatus = updatedAssembly.SupplierStatus;
            //    }
            //    updatedAssembly1.Updated = userId;
            //    updatedAssembly1.UpdatedDate = DateTime.Now;

            //    //version//
            //    if (updatedAssembly1.SoftwareVersionNo != 0)
            //    {
            //        var softName = (from c in _dbEntities.SwQcHeadAssignsFromPms
            //                        where c.ProjectName == supplierUpdate.ProjectName //&& c.SwQcAssignId == supplierUpdate.SwQcAssignId
            //                        && c.SoftwareVersionNo == updatedAssembly1.SoftwareVersionNo
            //                        select c).FirstOrDefault();

            //        if (softName != null)
            //        {
            //            updatedAssembly1.SoftwareVersionName = softName.SoftwareVersionName;
            //        }
            //    }

            //    _dbEntities.SwQcIssueDetails.AddOrUpdate(updatedAssembly1);
            //    _dbEntities.SaveChanges();

            //    SwQcIssueDetailsLog swQcIssue = new SwQcIssueDetailsLog();

            //    swQcIssue.ProjectMasterId = supplierUpdate.ProjectMasterId;
            //    swQcIssue.ProjectName = supplierUpdate.ProjectName;
            //    swQcIssue.OrderNumber = supplierUpdate.OrderNumber;
            //    swQcIssue.SwQcAssignId = supplierUpdate.SwQcAssignId;
            //    swQcIssue.SwQcHeadAssignId = supplierUpdate.SwQcHeadAssignId;
            //    swQcIssue.SwQcIssueId = supplierUpdate.SwQcIssueId;
            //    swQcIssue.WaltonQcComDate = supplierUpdate.WaltonQcComDate;
            //    swQcIssue.WaltonQcComment = supplierUpdate.WaltonQcComment;
            //    if (supplierUpdate.WaltonQcStatus != "SELECT")
            //    {
            //        swQcIssue.WaltonQcStatus = supplierUpdate.WaltonQcStatus;
            //    }
            //    else
            //    {
            //        swQcIssue.WaltonQcStatus = updatedAssembly.WaltonQcStatus;
            //    }
            //    swQcIssue.SupplierComDate = supplierUpdate.SupplierComDate;
            //    swQcIssue.SupplierComment = supplierUpdate.SupplierComment;
            //    if (supplierUpdate.SupplierStatus != "SELECT")
            //    {
            //        swQcIssue.SupplierStatus = supplierUpdate.SupplierStatus;
            //    }
            //    else
            //    {
            //        swQcIssue.SupplierStatus = updatedAssembly.SupplierStatus;
            //    }
            //    swQcIssue.WaltonPmComDate = updatedAssembly.WaltonPmComDate;
            //    swQcIssue.WaltonPmComment = updatedAssembly.WaltonPmComment;
            //    swQcIssue.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";
            //    swQcIssue.Added = userId;
            //    swQcIssue.AddedDate = DateTime.Now;
            //    swQcIssue.IssueSerial = updatedAssembly.IssueSerial;

            //    _dbEntities.SwQcIssueDetailsLogs.AddOrUpdate(swQcIssue);
            //    _dbEntities.SaveChanges();
            //}
            #endregion

            _dbEntities.SaveChanges();
            return "OK";
        }

        public List<ProjectMasterModel> GetProjectListForFieldTestNew()
        {
            var getSwProject = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select distinct inchargeAssign.SoftwareVersionName,
            inchargeAssign.SoftwareVersionNo,pm.OrderNuber,pm.ProjectName,pm.ProjectName as ProjectNames,pm.ProjectMasterId
            from SwQcHeadAssignsFromPm inchargeAssign 
            left join ProjectMasters pm on inchargeAssign.ProjectMasterId = pm.ProjectMasterId 
            left join SwQcTestPhase tp on inchargeAssign.TestPhaseID=tp.TestPhaseID
            where inchargeAssign.Status not in ('INACTIVE')").ToList();

            foreach (var model in getSwProject)
            {
                model.ProjectName = model.ProjectName + " -->> (" + CommonConversion.AddOrdinal(model.OrderNuber) + " Order)" + " -->> (SV: " + model.SoftwareVersionNo + ")";

            }
            return getSwProject;
        }
        public List<PmQcAssignModel> GetProjectDetailsForQcFieldTest(long pMasterId, long softwareVerNumber, long proOrder)
        {
            String query = String.Format(@"select distinct sm.ProjectPmAssignId,pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,sm.SoftwareVersionName,sm.SoftwareVersionNo,pm.DisplayName,pm.DisplaySize,pm.ProcessorName,pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,pm.SourcingType,pm.ProjectType,
            (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId and ppa.Status not in ('INACTIVE')) ProjectManagerUserName,ppa.ProjectManagerUserId

            from ProjectMasters pm 
            left join ProjectPmAssigns ppa on pm.ProjectMasterId=ppa.ProjectMasterId and ppa.Status not in ('INACTIVE')
            left join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sm on sm.ProjectMasterId=pm.ProjectMasterId
            where sm.Status not in ('INACTIVE') and pm.ProjectName=sm.ProjectName
            and sm.ProjectMasterId={0} and sm.SoftwareVersionNo={1} and sm.OrderNumber={2}
            group by pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,sm.SoftwareVersionName,sm.SoftwareVersionNo,pm.DisplayName,pm.DisplaySize,
            pm.ProcessorName,pm.ProcessorClock,pm.Chipset,pm.FrontCamera,pm.BackCamera,pm.Ram,pm.Rom,pm.Battery,
            sm.ProjectManagerSampleNo,pm.SourcingType,pm.ProjectType,ppa.ProjectPmAssignId,ppa.ProjectManagerUserId,ppa.Status,sm.ProjectPmAssignId", pMasterId, softwareVerNumber, proOrder);

            List<PmQcAssignModel> models = GenereticRepo<PmQcAssignModel>.GetList(_dbEntities, query);

            //foreach (var project in models)
            //{
            //    project.OrderNumberOrdinal = project.OrderNuber != null
            //        ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
            //        : string.Empty;
            //    if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
            //    {
            //        project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
            //    }
            //}
            return models;
        }

        public string SaveAssignForFieldTestFromQcHead(string ProjectName, string projectMasterId, string projectPmAssignId,
            string swInchargeAssignToQcComment, string[] multiple, string singleOne, string approxInchargeToQcDeliveryDate, string SoftwareVersionNo)
        {
            long ProjectMasterId = Convert.ToInt64(projectMasterId);
            long ProjectPmAssignId = Convert.ToInt64(projectPmAssignId);
            long testPhaseId = Convert.ToInt64(singleOne);
            int swVrNo = Convert.ToInt32(SoftwareVersionNo);

            DateTime date;
            DateTime.TryParseExact(approxInchargeToQcDeliveryDate, "yyyy-MM-dd", CultureInfo.InvariantCulture,
            DateTimeStyles.None, out date);
            DateTime ApproxInchargeToQcDeliveryDate1 = date;

            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.ProjectMasters where pm.ProjectMasterId == ProjectMasterId select pm).FirstOrDefault();

            var query3 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                          where swQcHead.ProjectMasterId == ProjectMasterId && swQcHead.ProjectPmAssignId == ProjectPmAssignId && swQcHead.SoftwareVersionNo == swVrNo
                          select swQcHead).FirstOrDefault();

            SwQcAssignsFromQcHead qq = null;

            foreach (string qcperson in multiple)
            {
                long qcId = Convert.ToInt64(qcperson);

                if (qq == null)
                {
                    SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead
                    {
                        ProjectMasterId = ProjectMasterId,
                        ProjectPmAssignId = ProjectPmAssignId,
                        SwQcUserId = qcId,
                        OrderNumber = query.OrderNuber,
                        ProjectName = ProjectName,
                        ProjectType = query.ProjectType,
                        SwQcHeadToQcAssignTime = DateTime.Now,
                        SwQcStartTime = DateTime.Now,
                        PmToQcHeadAssignTime = query3.PmToQcHeadAssignTime,
                        PriorityFromQcHead = "HIGH",
                        ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                        Status = "ASSIGNED",
                        SoftwareVersionName = query3.SoftwareVersionName,
                        SoftwareVersionNo = swVrNo,
                        TestPhaseID = testPhaseId,
                        FieldTestFrom = "QCHEAD",
                        Added = userId,
                        AddedDate = DateTime.Now
                    };
                    _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                    qq = (from swQcHead in _dbEntities.SwQcAssignsFromQcHeads
                          where
                              swQcHead.ProjectMasterId == model.ProjectMasterId &&
                              swQcHead.SwQcAssignId == model.SwQcAssignId && swQcHead.Status != "INACTIVE"
                          select swQcHead).FirstOrDefault();
                }
                else
                {
                    SwQcAssignsFromQcHead model = new SwQcAssignsFromQcHead
                    {
                        ProjectMasterId = ProjectMasterId,
                        ProjectPmAssignId = ProjectPmAssignId,
                        SwQcUserId = qcId,
                        OrderNumber = query.OrderNuber,
                        ProjectName = ProjectName,
                        ProjectType = query.ProjectType,
                        SwQcHeadToQcAssignTime = qq.SwQcHeadToQcAssignTime,
                        SwQcStartTime = qq.SwQcStartTime,
                        PmToQcHeadAssignTime = query3.PmToQcHeadAssignTime,
                        PriorityFromQcHead = "HIGH",
                        ApproxInchargeToQcDeliveryDate = ApproxInchargeToQcDeliveryDate1,
                        Status = "ASSIGNED",
                        SoftwareVersionName = query3.SoftwareVersionName,
                        SoftwareVersionNo = swVrNo,
                        TestPhaseID = testPhaseId,
                        FieldTestFrom = "QCHEAD",
                        Added = userId,
                        AddedDate = qq.AddedDate
                    };
                    _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }
            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<SwQcPersonalUseFindingsIssueDetailModel> GetSwQcPersonalFindingIssueDetails(long pMasterId, long pSwQcInId, long pPmAssignId)
        {
            String userIdentity =
            System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            List<SwQcPersonalUseFindingsIssueDetailModel> getSwProject = null;

            getSwProject = _dbEntities.Database.SqlQuery<SwQcPersonalUseFindingsIssueDetailModel>(@"SELECT distinct sii.SwQcPrUseFindId,sii.[SwQcHeadAssignId],sii.[ProjectPmAssignId],sii.[ProjectMasterId],sii.[ProjectName],sii.[ProjectType],sii.[IssueScenario]
            ,sii.[ExpectedOutcome],sii.[IssueDetails],sii.[RefernceModule],sii.[Frequency],sii.[IssueReproducePath],sii.[Attachment]
            ,sii.[IssueType],sii.[Result],sii.[TestPhaseID],sii.[SoftwareVersionName],sii.[SoftwareVersionNo],sii.[FilesUrl],sii.[FilesDetail],sii.[Upload] as UploadedFile,sii.[IsFile],sii.[IsIssue],
            case when sii.IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForIncentive='true' then 'YES' else 'NO' end as IsApprovedForIncentives, cm.UserFullName  
            FROM [CellPhoneProject].[dbo].SwQcPersonalUseFindingsIssueDetails sii
            left join CellPhoneProject.dbo.CmnUsers cm on sii.Added=cm.Added
            where sii.ProjectMasterId={0} and sii.[SwQcHeadAssignId]={1}  
            order by sii.IsFile, sii.IsIssue asc", pMasterId, pSwQcInId, pPmAssignId, userId).ToList();

            return getSwProject;
        }

        public List<string> GetAllRoles()
        {
            List<String> list = (from emp in _dbEntities.CmnUsers
                                 where emp.IsActive == true
                                 group emp by emp.RoleName into empg
                                 select empg.Key).ToList();
            return list;
        }

        public string SaveSwQcNewInnovation(List<SwQcNewInnovationModel> issueList)
        {
            String userIdentity =
          System.Web.HttpContext.Current.User.Identity.Name; ;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var swQcProWiseModel in issueList)
            {
                var model = new SwQcNewInnovation
                {
                    ProjectName = swQcProWiseModel.ProjectName,
                    AssignedBy = swQcProWiseModel.RefernceModules1,
                    Description = swQcProWiseModel.Description,
                    WorkType = swQcProWiseModel.WorkType,
                    EffectiveDate = swQcProWiseModel.EffectiveDate,
                    Added = userId,
                    AddedDate = DateTime.Now,
                };
                _dbEntities.SwQcNewInnovations.AddOrUpdate(model);
            }
            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<SwQcNewInnovationModel> GetSwQcNewInnovation()
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var newInno =
                _dbEntities.Database.SqlQuery<SwQcNewInnovationModel>(
                    @"select top 20 *  FROM [CellPhoneProject].[dbo].[SwQcNewInnovation] where Added={0} ", userId).ToList();

            return newInno;
        }

        public List<SwQcIssueDetailModel> GetSwQcIssueDetailsForQcHeadToPmForward(string projectId, string swqcInchargeId, string pmAssignId, DateTime swQcHeadToQcAssignTime, string testPhaseId, string SoftwareVersionNo)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);
            long proId;
            long.TryParse(projectId, out proId);

            long swQcHeadId;
            long.TryParse(swqcInchargeId, out swQcHeadId);

            long pmAssignsId;
            long.TryParse(pmAssignId, out pmAssignsId);

            long testId;
            long.TryParse(testPhaseId, out testId);

            int SoftwareVersionNos;
            int.TryParse(SoftwareVersionNo, out SoftwareVersionNos);

            string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);

            var proName =
                (from pm in _dbEntities.ProjectMasters where pm.ProjectMasterId == proId select pm.ProjectName.Trim())
                    .FirstOrDefault();


            List<SwQcIssueDetailModel> query = new List<SwQcIssueDetailModel>();
            if (swQcHeadId != 0)
            {
                //                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                //                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                //                sii.FilesDetail,sii.Upload,cm.UserFullName
                //                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                //                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                //                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                //                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                //                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sii.ProjectMasterId={0} and sii.ProjectPmAssignId={1} 
                //                and sii.SwQcHeadAssignId={2} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                //                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                //                sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina, sii.IssueSerial  order by  sii.SoftwareVersionNo asc
                //                ", proId, pmAssignsId, swQcHeadId, tempDate, testId).ToList();

                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName
                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sii.ProjectName={5} and sii.SoftwareVersionNo={6} 
                 group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina, sii.IssueSerial  order by  sii.SoftwareVersionNo asc
                ", proId, pmAssignsId, swQcHeadId, tempDate, testId, proName, SoftwareVersionNos).ToList();

            }
            //            else if (swQcHeadId == 0)
            //            {
            //                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
            //                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
            //                sii.FilesDetail,sii.Upload,cm.UserFullName
            //                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
            //                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
            //                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
            //                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
            //                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sq.SwQcHeadAssignId=0 and sii.ProjectMasterId={0} and sii.ProjectPmAssignId={1}  
            //                and (sq.SwQcHeadToQcAssignTime like '%" + tempDate + "%')   and sii.TestPhaseID={4} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial order by sii.SoftwareVersionNo asc", proId, pmAssignsId, swQcHeadId, tempDate, testId).ToList();

            //            }
            return query;
        }

        public List<SwQcIssueDetailModel> GetSwQcCtsMonkeyOrCameraAutomationData(string projectId, string swqcInchargeId, string pmAssignId, DateTime swQcHeadToQcAssignTime, string testPhaseId, string SoftwareVersionNo)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);
            long proId;
            long.TryParse(projectId, out proId);

            long swQcHeadId;
            long.TryParse(swqcInchargeId, out swQcHeadId);

            long pmAssignsId;
            long.TryParse(pmAssignId, out pmAssignsId);

            long testId;
            long.TryParse(testPhaseId, out testId);

            int SoftwareVersionNos;
            int.TryParse(SoftwareVersionNo, out SoftwareVersionNos);

            var proName =
             (from pm in _dbEntities.ProjectMasters where pm.ProjectMasterId == proId select pm.ProjectName.Trim())
                 .FirstOrDefault();

            string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);
            List<SwQcIssueDetailModel> query = new List<SwQcIssueDetailModel>();
            if (swQcHeadId != 0)
            {
                //                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                //            sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                //            sii.FilesDetail,sii.Upload,cm.UserFullName
                //            ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                //            FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                //            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                //            left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                //            where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.ProjectPmAssignId={1} and sii.SwQcHeadAssignId={2}  
                //            and sii.TestPhaseID={4} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                //            sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                //            sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial order by sii.SoftwareVersionNo asc
                //           ", proId, pmAssignsId, swQcHeadId, tempDate, testId).ToList();

                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
            sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
            sii.FilesDetail,sii.Upload,cm.UserFullName
            ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
            FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
            left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
            where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectName={5} and sii.SoftwareVersionNo={6} 
             group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
            sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
            sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial order by sii.SoftwareVersionNo asc
           ", proId, pmAssignsId, swQcHeadId, tempDate, testId, proName, SoftwareVersionNos).ToList();

            }
            //            else if (swQcHeadId == 0)
            //            {
            //                query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when  sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
            //                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
            //                sii.FilesDetail,sii.Upload,cm.UserFullName
            //                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
            //
            //                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
            //                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
            //                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
            //                where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.ProjectPmAssignId={1} and sii.SwQcHeadAssignId=0 
            //                and (sq.SwQcHeadToQcAssignTime like '%" + tempDate + "%')   and sii.TestPhaseID={4} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber, sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl, sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial order by sii.SoftwareVersionNo asc", proId, pmAssignsId, swQcHeadId, tempDate, testId).ToList();

            //            }

            return query;
        }
        public List<SwQcPersonalUseFindingsIssueDetailModel> GetPersonalUseFindingsForQcHead(string projectId, string swqcInchargeId, string pmAssignId, DateTime swQcHeadToQcAssignTime, string testPhaseId)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);
            long proId;
            long.TryParse(projectId, out proId);

            long swQcHeadId;
            long.TryParse(swqcInchargeId, out swQcHeadId);

            long pmAssignsId;
            long.TryParse(pmAssignId, out pmAssignsId);

            long testId;
            long.TryParse(testPhaseId, out testId);

            var query = _dbEntities.Database.SqlQuery<SwQcPersonalUseFindingsIssueDetailModel>(@"SELECT distinct cm.UserFullName,spp.*,
            case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForIncentive='true' then 'YES' else 'NO' end as IsApprovedForIncentives
            FROM [CellPhoneProject].[dbo].[SwQcPersonalUseFindingsIssueDetails] spp
            left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=spp.Added
            where spp.ProjectMasterId={0} and spp.SwQcHeadAssignId={2}", proId, pmAssignsId, swQcHeadId, testId).ToList();

            return query;
        }
        public List<SwQcNewInnovationModel> GetNewInnovationForQcHead()
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = _dbEntities.Database.SqlQuery<SwQcNewInnovationModel>(@"SELECT top 50 sna.*, DATENAME(MONTH,EffectiveDate) as Months, DATENAME(YEAR,EffectiveDate) as Years,cm.UserFullName,
              case when IsApprovedForIncentive='true' then 'YES' else 'NO' end as IsApprovedForIncentives
              FROM [CellPhoneProject].[dbo].[SwQcNewInnovation] sna
              left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sna.Added
              order by NewInnovationId desc").ToList();

            return query;
        }

        public string SoftWareQcInchargeToPm(long pMasterId, long pmUserIdCon, string testPhaseId, long userId, long pSwQcInId,
            string projectName, string proComment, DateTime pmDate, string softwareName, string softwareNo, bool isFinals, DateTime swQcHeadToQcAssignTime)
        {
            int softwareNo1;
            int.TryParse(softwareNo, out softwareNo1);

            int testPhaseId1;
            int.TryParse(testPhaseId, out testPhaseId1);

            if (pSwQcInId != 0)
            {
                var dbModel =
            _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(x => x.ProjectMasterId == pMasterId && x.SwQcHeadAssignId == pSwQcInId);

                if (dbModel != null)
                {
                    dbModel.SwQcHeadToPmForwardComment = proComment;
                    dbModel.SwQcHeadToPmSubmitTime = DateTime.Now;
                    dbModel.Status = "RECOMMENDED";
                    //dbModel.SwQcFinishedTime = DateTime.Now;
                    dbModel.Updated = userId;
                    dbModel.UpdatedDate = DateTime.Now;
                    dbModel.IsFinalPhaseMP = isFinals;
                    _dbEntities.SwQcHeadAssignsFromPms.AddOrUpdate(dbModel);

                }
                try
                {
                    List<SwQcAssignsFromQcHead> results = (from sqa in _dbEntities.SwQcAssignsFromQcHeads
                                                           where sqa.SwQcHeadAssignId == pSwQcInId && sqa.Status != "INACTIVE"
                                                           && sqa.ProjectMasterId == pMasterId
                                                           select sqa).ToList();

                    foreach (SwQcAssignsFromQcHead sqa in results)
                    {
                        sqa.Status = "RECOMMENDED";
                        sqa.SwQcHeadToPmForwardComment = proComment;
                        sqa.SwQcHeadToPmSubmitTime = DateTime.Now;
                        sqa.IsFinalPhaseMP = isFinals;
                        sqa.Updated = userId;
                        sqa.UpdatedDate = DateTime.Now;
                    }
                    _dbEntities.SaveChanges();

                    return "OK";
                }
                catch (Exception)
                {
                    return "NO";
                }
            }
            else if (pSwQcInId == 0)
            {
                try
                {
                    string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);

                    var results = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHead>(@"select * from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqa
                    where  sqa.SwQcHeadAssignId = {0} and sqa.Status != 'INACTIVE' and sqa.ProjectMasterId = {1}
                    and sqa.ProjectPmAssignId = {2} and sqa.SoftwareVersionNo ={3}
                    and sqa.TestPhaseID ={4}  and (sqa.SwQcHeadToQcAssignTime like '%" + tempDate + "%')  ",
                    pSwQcInId, pMasterId, pmUserIdCon, softwareNo1, testPhaseId1, tempDate).ToList();

                    foreach (SwQcAssignsFromQcHead sqa in results)
                    {
                        sqa.Status = "RECOMMENDED";
                        sqa.SwQcHeadToPmForwardComment = proComment;
                        sqa.SwQcHeadToPmSubmitTime = DateTime.Now;
                        sqa.IsFinalPhaseMP = isFinals;
                        sqa.Updated = userId;
                        sqa.UpdatedDate = DateTime.Now;

                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(sqa);

                    }
                    _dbEntities.SaveChanges();

                    return "OK";
                }
                catch (Exception)
                {
                    return "NO";
                }
            }
            return "OK";
        }

        public List<SwQcAssignsFromQcHeadModel> GetAssignedProjectDetailsForQcFieldTest(long pMasterId, long softwareVerNumber, long proOrder, string projectName)
        {
            var query = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"  select sii.ProjectName,sii.ProjectMasterId,sii.ProjectType,sii.SwQcHeadToQcAssignTime,sii.PmToQcHeadAssignTime,
            sii.ApproxInchargeToQcDeliveryDate,sii.Status,cm.UserFullName as AssignedPerson from [CellPhoneProject].[dbo].[SwQcAssignsFromQcHead] sii
            left join [CellPhoneProject].[dbo].CmnUsers cm on sii.SwQcUserId=cm.CmnUserId
            where sii.ProjectMasterId={0} and SwQcHeadAssignId=0  and sii.SoftwareVersionNo={1} and sii.OrderNumber={2}
            group by sii.ProjectName,sii.ProjectMasterId,sii.ProjectType,sii.SwQcHeadToQcAssignTime,sii.PmToQcHeadAssignTime,
            sii.ApproxInchargeToQcDeliveryDate,sii.Status,cm.UserFullName order by sii.SwQcHeadToQcAssignTime desc", pMasterId, softwareVerNumber, proOrder).ToList();

            return query;
        }


        #endregion

        #region excel
        public List<SwQcHeadAssignsFromPmModel> GetProjectVersionName(string projectId, int swVersionNo, long testPhaseIds)
        {
            //            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
            //            select distinct ProjectName as SoftwareVersionName from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
            //            union 
            //            select distinct SoftwareVersionName from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
            //            order by SoftwareVersionName asc", projectId).ToList();
            _dbEntities.Database.CommandTimeout = 6000;

            var proName = projectId.Replace("'", "''");

            var query = new List<SwQcHeadAssignsFromPmModel>();

            if (proName != null && swVersionNo == 0 && testPhaseIds == 0)
            {
                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
                //                select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  'SW_V_'+ cast(SoftwareVersionNo as varchar) as SoftwareVersionName
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                order by SoftwareVersionNo asc", proName.Trim()).ToList();

                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@" select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} 
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName, TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                order by SoftwareVersionNo asc", proName.Trim()).ToList();

                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' 
                //                else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName, case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} 
                //                order by SoftwareVersionNo asc", proName.Trim()).ToList();

                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} and TestPhaseID !=10
                union 
                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' 
                else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName, case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} and TestPhaseID !=10
                order by SoftwareVersionNo asc", proName.Trim()).ToList();
            }
            else if (proName != null && swVersionNo != 0 && testPhaseIds != 5)
            {
                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
                //               select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  'SW_V_'+ cast(SoftwareVersionNo as varchar) as SoftwareVersionName
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  and SoftwareVersionNo={1}
                //                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();

                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
                //                select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} 
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                //                 case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName, TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  and SoftwareVersionNo={1} 
                //                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();

                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                //                case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName,  case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}   and SoftwareVersionNo={1}
                //                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();

                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} and TestPhaseID !=10
                union 
                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName,  case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} and SoftwareVersionNo={1} and TestPhaseID !=10
                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();
            }
            else if (proName != null && swVersionNo != 0 && testPhaseIds == 5)
            {
                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"            
                //                select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} 
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                //                 case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName, TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  and SoftwareVersionNo={1} and TestPhaseID =5
                //                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();

                //                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                //                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}
                //                union 
                //                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                //                case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName,  case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                //                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  and SoftwareVersionNo={1} and TestPhaseID =5
                //                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();

                query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName as SoftVersionName,SoftwareVersionNo=1,ProjectName as SoftwareVersionName,TestPhaseID=0 from
                CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0} and TestPhaseID !=10
                union 
                select distinct SoftwareVersionName as SoftVersionName,SoftwareVersionNo,  
                case when TestPhaseID=5 then 'SW_V_'+ cast(SoftwareVersionNo as varchar)+'_Demo' else 'SW_V_'+ cast(SoftwareVersionNo as varchar) end as SoftwareVersionName,  case when  TestPhaseID !=5 then 0 else TestPhaseID end as TestPhaseID
                from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where ProjectName={0}  and SoftwareVersionNo={1} and TestPhaseID =5
                order by SoftwareVersionNo asc", proName.Trim(), swVersionNo).ToList();
            }


            return query;
        }

        public List<SwQcIssueDetailModel> GetSwQcIssueDetailsForReport(long projectId, string projectName, long swqcInchargeAsngId, string emplyCode,
            DateTime swQcHeadToQcAssignTime, long testPhaseId)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);

            List<SwQcIssueDetailModel> query = new List<SwQcIssueDetailModel>();

            if (emplyCode == null)
            {
                if (swqcInchargeAsngId != 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName
                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sii.ProjectMasterId={0}  
                and sii.SwQcHeadAssignId={1} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId).ToList();
                    //HAVING COUNT(*)  = 1", projectId, swqcInchargeAsngId).ToList();
                }
                else if (swqcInchargeAsngId == 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                            @"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName
                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sq.SwQcHeadAssignId=0 and sii.ProjectMasterId={0}  
                and (sq.SwQcHeadToQcAssignTime like '%" + tempDate + "%')   and sii.TestPhaseID={3} group by  " +
                "sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,sii.ProjectName,sii.ProjectType,sii.IssueScenario," +
                "sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName," +
                "sii.SoftwareVersionNo,sii.FilesUrl,sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial",
                projectId, swqcInchargeAsngId, tempDate, testPhaseId).ToList();

                }
            }
            else if (emplyCode != null)
            {
                if (swqcInchargeAsngId != 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                    left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                    where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sii.ProjectMasterId={0}  
                    and sii.SwQcHeadAssignId={1} and cm.EmployeeCode={2} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId, emplyCode).ToList();
                    //HAVING COUNT(*)  = 1", projectId, swqcInchargeAsngId,emplyCode).ToList();

                }
                else if (swqcInchargeAsngId == 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                            @"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                sii.FilesDetail,sii.Upload,cm.UserFullName
                ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                where (sii.RefernceModule not in ('Camera Automation','Monkey Test','CTS') or sii.RefernceModule is null) and sq.SwQcHeadAssignId=0 and sii.ProjectMasterId={0}  
                and (sq.SwQcHeadToQcAssignTime like '%" + tempDate + "%')   and sii.TestPhaseID={3} and cm.EmployeeCode={4} group by  " +
                "sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,sii.ProjectName,sii.ProjectType,sii.IssueScenario," +
                "sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName," +
                "sii.SoftwareVersionNo,sii.FilesUrl,sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial",
                projectId, swqcInchargeAsngId, tempDate, testPhaseId, emplyCode).ToList();

                }
            }

            return query;
        }

        public List<SwQcIssueDetailModel> GetSwQcCtsMonkeyOrCameraAutomationDataForReport(long projectId, string projectName, long swqcInchargeAsngId,
            string emplyCode, DateTime swQcHeadToQcAssignTime, long testPhaseId)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);
            List<SwQcIssueDetailModel> query = new List<SwQcIssueDetailModel>();

            if (emplyCode == null)
            {
                if (swqcInchargeAsngId != 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                    left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                    where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.SwQcHeadAssignId={1}  
                    and sii.TestPhaseID={5} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId, emplyCode, tempDate, swQcHeadToQcAssignTime,
                            testPhaseId).ToList();

                }
                else if (swqcInchargeAsngId == 0)
                {
                    query =
                    _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                    @"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 

                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                    left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                    where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.SwQcHeadAssignId=0 
                    and (sq.SwQcHeadToQcAssignTime like '%" + tempDate +
                    "%')   and sii.TestPhaseID={5} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber, sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath," +
                    "sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl, sii.FilesDetail,sii.Upload,cm.UserFullName," +
                    "sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId, emplyCode, tempDate,
                    swQcHeadToQcAssignTime, testPhaseId).ToList();

                }
            }
            else if (emplyCode != null)
            {
                if (swqcInchargeAsngId != 0)
                {
                    query =
                        _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                    left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii.ProjectMasterId=sq.ProjectMasterId
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                    where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.SwQcHeadAssignId={1}  
                    and sii.TestPhaseID={5}  and cm.EmployeeCode={2} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName,sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId, emplyCode, tempDate, swQcHeadToQcAssignTime,
                            testPhaseId).ToList();

                }
                else if (swqcInchargeAsngId == 0)
                {
                    query =
                    _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                    @"SELECT distinct sii.SwQcIssueId,case when sii.IssueSerial is null then 0 else sii.IssueSerial end as IssueSerial,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber,
                    sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath,sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl,
                    sii.FilesDetail,sii.Upload,cm.UserFullName
                    ,case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForChina='true' then 'YES' else 'NO' end as IsApprovedForChinas 

                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii 
                    left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sii.ProjectMasterId=sq.ProjectMasterId and sii.SwQcHeadAssignId=0 and sq.SwQcHeadAssignId=0
                    left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sii.Added
                    where (sii.RefernceModule in ('Camera Automation','Monkey Test','CTS')) and sii.ProjectMasterId={0} and sii.SwQcHeadAssignId=0 
                    and (sq.SwQcHeadToQcAssignTime like '%" + tempDate +
                    "%')   and sii.TestPhaseID={5} and cm.EmployeeCode={2} group by  sii.SwQcIssueId,sii.SwQcHeadAssignId,sii.ProjectPmAssignId,sii.ProjectMasterId,sii.OrderNumber, sii.ProjectName,sii.ProjectType,sii.IssueScenario,sii.ExpectedOutcome,sii.IssueDetails,sii.RefernceModule,sii.Frequency,sii.IssueReproducePath," +
                    "sii.Attachment,sii.IssueType,sii.Result,sii.TestPhaseID,sii.SoftwareVersionName,sii.SoftwareVersionNo,sii.FilesUrl, sii.FilesDetail,sii.Upload,cm.UserFullName," +
                    "sii.IsIssue,sii.IsApprovedForChina,sii.IssueSerial", projectId, swqcInchargeAsngId, emplyCode, tempDate,
                    swQcHeadToQcAssignTime, testPhaseId).ToList();

                }
            }

            return query;
        }

        public List<SwQcPersonalUseFindingsIssueDetailModel> GetPersonalUseFindingsForQcHeadForReport(long projectId, long swqcInchargeAsngId)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = _dbEntities.Database.SqlQuery<SwQcPersonalUseFindingsIssueDetailModel>(@"SELECT distinct cm.UserFullName,spp.*,
            case when IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,case when IsApprovedForIncentive='true' then 'YES' else 'NO' end as IsApprovedForIncentives
            FROM [CellPhoneProject].[dbo].[SwQcPersonalUseFindingsIssueDetails] spp
           left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=spp.Added
            where spp.ProjectMasterId={0} and spp.SwQcHeadAssignId={1} ", projectId, swqcInchargeAsngId).ToList();

            return query;
        }

        public List<SoftwareCustomModelForDashboard> GetAllProjectPersonStatus(string emplyCode)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            //  string tempDate = String.Format("{0:yyyy-MM-dd HH:mm:ss}", swQcHeadToQcAssignTime);
            string currentDates = String.Format("{0:yyyy-MM-dd}", DateTime.Now);

            List<SoftwareCustomModelForDashboard> query = new List<SoftwareCustomModelForDashboard>();
            if (emplyCode != "")
            {
                query =
                _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(@"select distinct UserFullName as AssignUserName,EmployeeCode, CASE WHEN Status='ASSIGNED' THEN 'ASSIGNED' ELSE 'FREE FROM PROJECT' end QcStatus, CASE WHEN ProjectName is null THEN '___________' ELSE ProjectName end ProjectName
                  from CellPhoneProject.dbo.CmnUsers cm left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcUserId=cm.CmnUserId and sqh.Status='ASSIGNED'
                 where RoleName='QC' and IsActive=1 and EmployeeCode={1} order by UserFullName asc ", currentDates, emplyCode).ToList();

            }
            else if (emplyCode == "")
            {
                query = _dbEntities.Database.SqlQuery<SoftwareCustomModelForDashboard>(@" select distinct UserFullName as AssignUserName,EmployeeCode, CASE WHEN Status='ASSIGNED' THEN 'ASSIGNED' ELSE 'FREE FROM PROJECT' end QcStatus, CASE WHEN ProjectName is null THEN '___________' ELSE ProjectName end ProjectName
                  from CellPhoneProject.dbo.CmnUsers cm left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcUserId=cm.CmnUserId and sqh.Status='ASSIGNED'
                 where RoleName='QC' and IsActive=1 order by UserFullName asc", currentDates).ToList();

            }

            return query;
        }

        public List<SwQcTestPhaseModel> GetSwQcTestPhase()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcTestPhaseModel>(@"select * from [CellPhoneProject].[dbo].[SwQcTestPhase] where ModuleIsActive=1 order by TestPhaseID asc").ToList();
            return query;
        }

        public string EditSwQcIssueDetails(long proId, long swIssueId, string issueScenario, string expectedOutcome, string result,
            string refernceModule, string issueReproducePath, string attachment, string issueType, string filesUrl, string frequency)
        {

            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcIssueDetails where pm.SwQcIssueId == swIssueId select pm).FirstOrDefault();


            query.IssueScenario = issueScenario;
            query.ExpectedOutcome = expectedOutcome;
            query.Result = result;
            query.RefernceModule = refernceModule;
            query.IssueReproducePath = issueReproducePath;
            query.Attachment = attachment;
            query.IssueType = issueType;
            query.FilesUrl = filesUrl;
            query.Frequency = frequency;

            _dbEntities.SwQcIssueDetails.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }


        #endregion

        #region comment region


        //public List<SwQcMultimediaModel> GetMultimediaForDetails(long projectId)
        //{
        //    var models = new List<SwQcMultimediaModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcMultimedias on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcMultimediaModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcMultimediaId = sws.SwQcMultimediaId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcGoogleServiceModel> GetGoogleServiceForDetails(long projectId)
        //{
        //    var models = new List<SwQcGoogleServiceModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcGoogleServices on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcGoogleServiceModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcGoogleServicesId = sws.SwQcGoogleServicesId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcStorageCheckModel> GetStorageCheckForDetails(long projectId)
        //{
        //    var models = new List<SwQcStorageCheckModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcStorageChecks on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcStorageCheckModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcStorageCheckId = sws.SwQcStorageCheckId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcGameModel> GetGameForDetails(long projectId)
        //{
        //    var models = new List<SwQcGameModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcGames on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcGameModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcGameId = sws.SwQcGameId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcTestingAppModel> GetTestingAppForDetails(long projectId)
        //{
        //    var models = new List<SwQcTestingAppModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcTestingApps on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcTestingAppModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcTestingAppId = sws.SwQcTestingAppId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcFileManagerModel> GetFileManageForDetails(long projectId)
        //{
        //    var models = new List<SwQcFileManagerModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcFileManagers on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcFileManagerModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcFileManagerId = sws.SwQcFileManagerId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcConnectivityModel> GetConnectivityForDetails(long projectId)
        //{
        //    var models = new List<SwQcConnectivityModel>();
        //    //var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //    //                join sws in _dbEntities.SwQcConnectivities on pm.ProjectMasterId equals sws.ProjectMasterId
        //    //                join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId
        //    //                join sia in _dbEntities.SwQcInchargeAssigns on pm.ProjectMasterId equals sia.ProjectMasterId
        //    //                join swa in _dbEntities.SwQcAssigns on sia.SwQcInchargeAssignId equals swa.SwQcInchargeAssignId
        //    //                where
        //    //                    (pm.ProjectMasterId == projectId) && (sia.Status == "ASSIGNED")
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcConnectivities on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId
        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcConnectivityModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        // SwQcAssignId = sws.SwQcAssignId,
        //                        SwQcConnectivityId = sws.SwQcConnectivityId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        //public List<SwQcShutDownModel> GetShutDownForDetails(long projectId)
        //{
        //    var models = new List<SwQcShutDownModel>();
        //    var dbIssues1 = from pm in _dbEntities.ProjectMasters
        //                    join sws in _dbEntities.SwQcShutDowns on pm.ProjectMasterId equals sws.ProjectMasterId
        //                    join qcIssue in _dbEntities.SwQcIssues on sws.SwQcIssueId equals qcIssue.SwQcIssueId

        //                    where
        //                        (pm.ProjectMasterId == projectId)

        //                    select new SwQcShutDownModel
        //                    {


        //                        ProjectMasterId = projectId,
        //                        SwQcShutDownId = sws.SwQcShutDownId,
        //                        IsIssueChecked = (bool)sws.IsIssueChecked,
        //                        IssueComment = sws.IssueComment,
        //                        QcCategoryName = sws.QcCategoryName,
        //                        SwQcDescription = qcIssue.QcDescription,
        //                        ScreenShots1 = sws.ScreenShots1,
        //                        ScreenShots2 = sws.ScreenShots2,
        //                        VideoUpload1 = sws.VideoUpload1,
        //                        VideoUpload2 = sws.VideoUpload2,
        //                        Added = sws.Added,
        //                        AddedDate = sws.AddedDate


        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}
        //public string SoftwareQcToQcInchargeProjectSubmit(long sPMasterId, long sQcUserId, string proStatus, long sQcInchargeAssignId)
        //{

        //    //List<SwQcAssign> dbModel = (from sqa in _dbEntities.SwQcAssigns
        //    //                            where sqa.SwQcInchargeAssignId == sQcInchargeAssignId && sqa.ProjectMasterId == sPMasterId
        //    //                            && sqa.SwQcUserId == sQcUserId
        //    //                            select sqa).ToList();

        //    //foreach (SwQcAssign sqa in dbModel)
        //    //{
        //    //    sqa.Status = "QCCOMPLETED";

        //    //}

        //    var dbModel =
        //        _dbEntities.SwQcAssigns.FirstOrDefault(x => x.ProjectMasterId == sPMasterId);

        //    if (dbModel != null)
        //    {

        //        dbModel.SwQcInchargeAssignId = sQcInchargeAssignId;
        //        dbModel.Status = "QCCOMPLETED";
        //        _dbEntities.SwQcAssigns.AddOrUpdate(dbModel);

        //        SwQcInchargeAssign assign =
        //       _dbEntities.SwQcInchargeAssigns.FirstOrDefault(x => x.SwQcInchargeAssignId == sQcInchargeAssignId);
        //        assign.Status = "QCCOMPLETED";
        //        _dbEntities.SaveChanges();
        //    }


        //    try
        //    {
        //        _dbEntities.SaveChanges();



        //        return "OK";
        //    }
        //    catch (Exception)
        //    {

        //        return "NO";
        //    }
        //}


        //public int GetMaAIntNumber()
        //{
        //    //Crud
        //    int a = 0;
        //    return a;

        //}

        // select * from ProjectMasters pm 
        //inner join SwQcInchargeAssigns sws on pm.ProjectMasterId = sws.ProjectMasterId

        //public List<ProjectMasterModel> GetProjectListForSwQcBatteryList1(long projectId)
        //{
        //    var qcIssues = new List<ProjectMasterModel>();
        //    using (var dbEntities = new CellPhoneProjectEntities())
        //    {
        //        var dbIssues = dbEntities.ProjectMasters.ToList();

        //        if (dbIssues.Any())
        //        {
        //            foreach (var dbIssue in dbIssues)
        //            {
        //                var issue = new ProjectMasterModel
        //                {
        //                    ProjectMasterId = dbIssue.ProjectMasterId,
        //                    ProjectName = dbIssue.ProjectName,
        //                    Date = DateTime.Today


        //                };
        //                qcIssues.Add(issue);
        //            }
        //        }


        //    }
        //    return qcIssues;
        //}

        //public List<SwQcBatteryAssignIssueModel> GetSwQcBatteryForList(long projectId)
        //{
        //    var qcBatteryIssues = new List<SwQcBatteryAssignIssueModel>();
        //    using (var dbEntities1 = new CellPhoneProjectEntities())
        //    {
        //        var fileManager = new FileManager();
        //        var dbIssues1 = dbEntities1.SwQcBatteryAssignIssues.Where(i => i.ProjectMasterId == projectId).ToList();

        //        if (dbIssues1.Any())
        //        {
        //            foreach (var dbIssue1 in dbIssues1)
        //            {
        //                var issue = new SwQcBatteryAssignIssueModel
        //                {
        //                    SwQcBatteryAssignIssuesId = dbIssue1.SwQcBatteryAssignIssuesId,
        //                    ProjectMasterId = dbIssue1.ProjectMasterId,
        //                    SwQcAssignId = dbIssue1.SwQcAssignId,
        //                    ModuleName = dbIssue1.ModuleName,
        //                    CheckingOption = dbIssue1.CheckingOption,
        //                    Time = dbIssue1.Time,
        //                    Charging = dbIssue1.Charging,
        //                    Voltage = dbIssue1.Voltage,
        //                    Decreased = dbIssue1.Decreased,
        //                    IsIssueChecked = (bool)dbIssue1.IsIssueChecked,
        //                    Issues = dbIssue1.Issues,
        //                    IssueComment = dbIssue1.IssueComment,
        //                    ScreenShot1FilePath = dbIssue1.ScreenShots1,
        //                    ScreenShot2FilePath = dbIssue1.ScreenShots2,
        //                    VideoUpload1FilePath = dbIssue1.VideoUpload1,
        //                    VideoUpload2FilePath = dbIssue1.VideoUpload2,
        //                    Added = dbIssue1.Added,
        //                    AddedDate = dbIssue1.AddedDate



        //                };
        //                qcBatteryIssues.Add(issue);
        //            }
        //        }
        //    }
        //    return qcBatteryIssues;
        //}
        //public List<ProjectMasterModel> GetFieldTestCompletedProjectList()
        //{
        //    var models = new List<ProjectMasterModel>();


        //    var dbIssues1 = from ft in _dbEntities.SwFieldTests
        //                    join pm in _dbEntities.ProjectMasters on ft.ProjectMasterId equals pm.ProjectMasterId

        //                    where 
        //                    //pm.ProjectMasterId.Select(a => a.ProjectMasterId.Contains(a.UserID)) &&
        //                        pm.ProjectStatus == "APPROVED"
        //                    select new ProjectMasterModel
        //                    {
        //                        ProjectMasterId = pm.ProjectMasterId,
        //                        ProjectName = pm.ProjectName,
        //                       // SwQcInchargeAssignId = ft.SwQcInchargeAssignId                          

        //                    };

        //    models = dbIssues1.ToList();

        //    return models;
        //}

        #endregion
        public List<SwQcTestPhaseModel> GetTestPhasesForQcHeadIssue()
        {
            var getSwProject = _dbEntities.Database.SqlQuery<SwQcTestPhaseModel>(@"select * from [CellPhoneProject].[dbo].[SwQcTestPhase] where TestPhaseIsActive=1 ").ToList();


            return getSwProject;
        }

        public string SaveIssueDetailsForQcHead(List<SwQcIssueDetailModel> issueList, List<SwQcIssueDetailModel> issueList1, bool issuesChk, bool filesChk, long pMasterId,
            long pSwQcInId, long pSwQcAssignId, string projectName, long testPhaseIds, int softwareVersionNames)
        {
            String userIdentity =
          System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                          where swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query2 = (from swQcHead in _dbEntities.ProjectMasters
                          where swQcHead.ProjectMasterId == pMasterId
                          select swQcHead).FirstOrDefault();

            var query3 = (from tstPhase in _dbEntities.SwQcTestPhases
                          where tstPhase.TestPhaseID == testPhaseIds
                          select tstPhase).FirstOrDefault();

            var softVersionName = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                                   where swQcHead.SoftwareVersionNo == softwareVersionNames
                                   select swQcHead).FirstOrDefault();



            SwQcIssueDetailModel qryForIssueSerial = new SwQcIssueDetailModel();
            long ddCount = 0;

            if (issuesChk == true && pSwQcInId != 0)
            {
                foreach (var swQcIssues in issueList)
                {
                    qryForIssueSerial = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select top 1 case when IssueSerial is null 
            then 0 else IssueSerial end as IssueSerial
            from SwQcIssueDetails where ProjectName='" + projectName + "' order by IssueSerial desc").FirstOrDefault();

                    SwQcIssueDetail model = new SwQcIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = 0;
                    model.SwQcAssignId = 0;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = projectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.ExpectedOutcome = swQcIssues.ExpectedOutcome;
                    model.IssueDetails = swQcIssues.IssueDetails;
                    model.RefernceModule = swQcIssues.RefernceModule;
                    model.Frequency = swQcIssues.Frequency;
                    model.IssueReproducePath = swQcIssues.IssueReproducePath;
                    model.Attachment = swQcIssues.Attachment;
                    model.IssueType = swQcIssues.IssueType;
                    model.Result = swQcIssues.Result;
                    model.TestPhaseID = testPhaseIds;
                    model.SoftwareVersionNo = softwareVersionNames;

                    if (softVersionName.SoftwareVersionName != null)
                    {
                        model.SoftwareVersionName = softVersionName.SoftwareVersionName;

                    }
                    else
                    {
                        model.SoftwareVersionName = "";

                    }

                    model.IsFile = false;
                    model.IsIssue = true;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.Upload = swQcIssues.UploadedFile;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;
                    if (qryForIssueSerial == null)
                    {
                        model.IssueSerial = 0 + 1;
                    }
                    else
                    {
                        model.IssueSerial = Convert.ToInt64(qryForIssueSerial.IssueSerial) + 1;

                    }

                    if (query3.TestPhaseName == "Field (Network Test)")
                    {
                        model.FieldTestFrom = "QCHEAD";
                    }

                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();

                }
            }

            if (filesChk == true)
            {
                foreach (var swQcIssues in issueList1)
                {
                    SwQcIssueDetail model = new SwQcIssueDetail();

                    model.ProjectMasterId = pMasterId;
                    model.SwQcHeadAssignId = 0;
                    model.SwQcAssignId = 0;
                    model.ProjectPmAssignId = query1.ProjectPmAssignId;
                    model.ProjectName = projectName.Trim();
                    model.ProjectType = query2.ProjectType.Trim();
                    model.OrderNumber = query2.OrderNuber;

                    if (swQcIssues.IssueScenario == "")
                    {
                        model.IssueScenario = "All Files";
                    }
                    else
                    {
                        model.IssueScenario = swQcIssues.IssueScenario;
                    }
                    model.RefernceModule = swQcIssues.RefernceModules1;
                    model.Attachment = swQcIssues.Attachment;
                    model.FilesUrl = swQcIssues.FilesUrl;
                    model.FilesDetail = swQcIssues.FilesDetail;
                    model.Upload = swQcIssues.UploadedFile;
                    model.TestPhaseID = testPhaseIds;
                    model.SoftwareVersionNo = softwareVersionNames;

                    if (softVersionName.SoftwareVersionName != null)
                    {
                        model.SoftwareVersionName = softVersionName.SoftwareVersionName;
                    }
                    else
                    {
                        model.SoftwareVersionName = "";
                    }
                    model.IsFile = true;
                    model.IsIssue = false;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    if (query3.TestPhaseName == "Field (Network Test)")
                    {
                        model.FieldTestFrom = "QCHEAD";
                    }

                    if (model.ProjectType == "Smart") { model.IsSmart = true; } else { model.IsSmart = false; }
                    if (model.ProjectType == "Feature") { model.IsFeature = true; } else { model.IsFeature = false; }
                    if (model.ProjectType == "Walpad") { model.IsWalpad = true; } else { model.IsWalpad = false; }
                    if (model.ProjectType == "Tab") { model.IsTab = true; } else { model.IsTab = false; }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }

            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<SwQcIssueDetailModel> GetSwQcIssuesForHead(string proName, string testPhaseNameId, int softVersionNo)
        {
            String userIdentity =
            System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);
            long testPhaseId;
            long.TryParse(testPhaseNameId, out testPhaseId);


            List<SwQcIssueDetailModel> getSwProject = null;

            if (proName != null)
            {
                var splits = proName.Split(',').ToList();

                var proId = splits[0];
                var swQcIn = splits[1];
                var swQcAss = splits[2];
                var proNames = splits[3];

                getSwProject = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT  sii.[SwQcIssueId],sii.[SwQcHeadAssignId],sii.[SwQcAssignId],sii.[ProjectPmAssignId],sii.[ProjectMasterId],sii.[ProjectName],sii.[ProjectType],sii.[IssueScenario]
                    ,sii.[ExpectedOutcome],sii.[IssueDetails],sii.[RefernceModule],sii.[Frequency],sii.[IssueReproducePath],sii.[Attachment]
                    ,sii.[IssueType],sii.[Result],sii.[TestPhaseID],sii.[SoftwareVersionName],sii.[SoftwareVersionNo],sii.[FilesUrl],sii.[FilesDetail],sii.[Upload] as UploadedFile,sii.[IsFile],sii.[IsIssue],
                    case when sii.IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,sii.FixedVersion    
                    FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii

                    left join [CellPhoneProject].[dbo].CmnUsers cu on cu.CmnUserId=sii.Added 
                    where sii.ProjectMasterId={0} and sii.SoftwareVersionNo={1} and sii.TestPhaseID={2} and cu.RoleName='QCHEAD' ", proId, softVersionNo, testPhaseId).ToList();

            }


            //            if (pSwQcInId != 0)
            //            {
            //                getSwProject = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"SELECT  sii.[SwQcIssueId],sii.[SwQcHeadAssignId],sii.[SwQcAssignId],sii.[ProjectPmAssignId],sii.[ProjectMasterId],sii.[ProjectName],sii.[ProjectType],sii.[IssueScenario]
            //                ,sii.[ExpectedOutcome],sii.[IssueDetails],sii.[RefernceModule],sii.[Frequency],sii.[IssueReproducePath],sii.[Attachment]
            //                ,sii.[IssueType],sii.[Result],sii.[TestPhaseID],sii.[SoftwareVersionName],sii.[SoftwareVersionNo],sii.[FilesUrl],sii.[FilesDetail],sii.[Upload] as UploadedFile,sii.[IsFile],sii.[IsIssue],
            //                case when sii.IsIssue='true' then 'Issue' else 'File' end as FileOrIssue,sii.FixedVersion    
            //                FROM [CellPhoneProject].[dbo].[SwQcIssueDetails] sii
            //                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sq on sq.SwQcAssignId=sii.SwQcAssignId
            //                where sii.ProjectMasterId={0} and sii.SwQcHeadAssignId={1} and sii.SwQcAssignId={2} and sii.Added={3} and sq.Status='ASSIGNED'
            //                order by sii.IsFile, sii.IsIssue asc", pMasterId, pSwQcInId, pSwQcAssignId, userId).ToList();

            //            }


            return getSwProject;
        }

        public string DeleteQcInnovation(SwQcNewInnovationModel supplierUpdate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var updatedAssembly = (from c in _dbEntities.SwQcNewInnovations
                                   where c.NewInnovationId == supplierUpdate.NewInnovationId
                                   select c).FirstOrDefault();

            _dbEntities.SwQcNewInnovations.Remove(updatedAssembly);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public List<CmnUserModel> GetInnoVationAssignedBy()
        {
            var query = _dbEntities.Database.SqlQuery<CmnUserModel>(@"select distinct RoleName from [CellPhoneProject].[dbo].[CmnUsers] where IsActive=1").ToList();

            return query;
        }

        public string EditInnovationDetails(long newInnoIds, string projectName, string assignedBy1, string assignedBy2,
            string description, string workType, DateTime effectiveDate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcNewInnovations where pm.NewInnovationId == newInnoIds select pm).FirstOrDefault();

            if (assignedBy2 == "")
            {
                query.ProjectName = projectName;
                query.AssignedBy = assignedBy1;
                query.Description = description;
                query.WorkType = workType;
                query.EffectiveDate = effectiveDate;

                _dbEntities.SwQcNewInnovations.AddOrUpdate(query);
                _dbEntities.SaveChanges();
            }
            else
            {
                query.ProjectName = projectName;
                query.AssignedBy = assignedBy2;
                query.Description = description;
                query.WorkType = workType;
                query.EffectiveDate = effectiveDate;

                _dbEntities.SwQcNewInnovations.AddOrUpdate(query);
                _dbEntities.SaveChanges();
            }
            return "OK";
        }

        #region GetAllIncentiveData
        public List<SwQcAllIncentiveListModel> GetAllIncentiveList(string projectType)
        {
            var query = _dbEntities.Database.SqlQuery<SwQcAllIncentiveListModel>(@"select *, BaseAmount as  BaseAmount1 FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and ProjectType={0} ", projectType).ToList();
            return query;
        }

        public List<ProjectTypeModel> GetProjectType()
        {
            var query = _dbEntities.Database.SqlQuery<ProjectTypeModel>(@"select * from [CellPhoneProject].[dbo].[ProjectTypes]").ToList();

            return query;
        }

        public string UpdateAllIncentiveList(List<SwQcAllIncentiveListModel> swQcAllIncentiveListModels)
        {
            String userIdentity =
           System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            foreach (var swAll in swQcAllIncentiveListModels)
            {

                SwQcAllIncentiveListLog qcAll = new SwQcAllIncentiveListLog();
                qcAll.ListId = swAll.Id;
                qcAll.ProjectType = swAll.ProjectType;
                qcAll.ClaimingField = swAll.ClaimingField;
                qcAll.RegularClaimArea = swAll.RegularClaimArea;
                qcAll.Timeline = swAll.Timeline;
                qcAll.Percentage = swAll.Percentage;
                qcAll.BaseAmount = swAll.BaseAmount;
                qcAll.Updated = swAll.Updated;
                qcAll.Updatedate = swAll.UpdatedDate;
                qcAll.Added = userId;
                qcAll.AddDate = DateTime.Now;

                _dbEntities.SwQcAllIncentiveListLogs.Add(qcAll);
                _dbEntities.SaveChanges();

                //
                var query =
                    (from pm in _dbEntities.SwQcAllIncentiveLists where pm.Id == swAll.Id select pm).FirstOrDefault();

                query.BaseAmount = swAll.BaseAmount1;
                query.Updated = userId;
                query.UpdateDate = DateTime.Now;

                _dbEntities.SwQcAllIncentiveLists.AddOrUpdate(query);
                _dbEntities.SaveChanges();


            }
            _dbEntities.SaveChanges();
            return "OK";
        }

        public List<CmnUserModel> GetQcUserList()
        {
            var models = new List<CmnUserModel>();
            var userLists = (from cmnUsers in _dbEntities.CmnUsers
                             where (cmnUsers.RoleName == "QC" || cmnUsers.RoleName == "QCHEAD") && cmnUsers.IsActive == true
                             select new CmnUserModel
                             {
                                 UserFullName = cmnUsers.UserFullName,
                                 UserName = cmnUsers.UserName,
                                 EmployeeCode = cmnUsers.EmployeeCode,
                                 RoleName = cmnUsers.RoleName
                             }).ToList();

            models = userLists;
            return models;
        }

        public List<SwQcIssueDetailModel> GetIssueDetailsForIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);

            #region com

            //             var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select b.ProjectType,b.SwQcHeadAssignId,b.TestPhaseID,b.IsFinalPhaseMP,b.ProjectMasterId,b.ProjectName,b.Status,b.SoftwareVersionName,case when b.SoftwareVersionNo is null then 0 else cast(b.SoftwareVersionNo as int) end as SoftwareVersionNo,
            //			
            //            case when b.IsFinalPhaseMP !=1 and b.TestPhaseID=8  then 'Version Software Testing' else b.TestPhaseName end as  TestPhaseName,b.UpdatedDate,cast(b.AssignedPerson as int) as AssignedPerson,b.EmployeeCode,
            //            cast(b.Critical as int) as Critical,cast(b.Major as int) as Major,cast(b.Minor as int) as Minor,case when b.BaseAmount is null then 0 else cast(b.BaseAmount as decimal(16,2)) end as BaseAmount,
            //            case when b.IssueAmount is null then 0 else cast(b.IssueAmount as decimal(16,2)) end as IssueAmount,
            //            case when b.BaseAmount+b.IssueAmount is null then 0 else cast((b.BaseAmount+b.IssueAmount) as decimal(16,2)) end as TotalAmount,
            //            case when ((b.BaseAmount+b.IssueAmount)/b.AssignedPerson) is null then 0 else cast(((b.BaseAmount+b.IssueAmount)/b.AssignedPerson) as decimal(16,2)) end as ParticularPersonIncentive
            //
            //            from
            //            (select a.ProjectType,a.IsFinalPhaseMP,a.SwQcHeadAssignId,a.TestPhaseID,a.ProjectMasterId,a.ProjectName,a.Status,a.SoftwareVersionName,a.SoftwareVersionNo,a.TestPhaseName,a.UpdatedDate,a.AssignedPerson,a.EmployeeCode,a.Critical,a.Major,a.Minor,a.BaseAmount,
            //            case  when a.TestPhaseID in (1) then
            //            (a.Critical+a.Major+a.Minor) *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Issue Claim') and RegularClaimArea =a.TestPhaseName and ProjectType=a.ProjectType) 
            //            --start 8
            //            when a.TestPhaseID=8  and a.IsFinalPhaseMP !=1  then 
            //            case when
            //            (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0
            //            else (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
            //            +
            //            case when
            //            (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0
            //            else (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
            //            +
            //            case when
            //            (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0
            //            else (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
            //			
            //            --end 8
            //            else case when 
            //            (a.Critical *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
            //	            (a.Critical *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
            //            end
            //            +
            //            case when 
            //            (a.Major *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
            //            (a.Major *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
            //            end
            //            +
            //            case when 
            //            (a.Minor *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))  is null then 0  
            //            else  (a.Minor *
            //            (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) end
            //
            //            end as IssueAmount
            //
            //            from
            //            (select spm.ProjectType,spm.IsFinalPhaseMP,spm.SwQcHeadAssignId,spm.TestPhaseID,TestPhaseName,spm.ProjectMasterId,spm.ProjectName,spm.Status,spm.SoftwareVersionName,spm.SoftwareVersionNo,spm.UpdatedDate,
            //
            //            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
            //            left join CellPhoneProject.dbo.CmnUsers cnn on cnn.CmnUserId=sq1.SwQcUserId
            //            where sq1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cnn.EmployeeCode not in (select EmployeeCode from CellPhoneProject.dbo.SwQcInternHistory si  where si.IsActive=1)) as AssignedPerson,
            //
            //            (select cu.EmployeeCode from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
            //            left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=sq1.SwQcUserId
            //            where spm.SwQcHeadAssignId=sq1.SwQcHeadAssignId and cu.EmployeeCode={3}) as EmployeeCode,
            //
            //            case when spm.SoftwareVersionNo=1 then 
            //            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
            //            and sii1.IssueType='CRITICAL' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
            //           
            //            when spm.IsFinalPhaseMP=1 then 
            //            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
            //            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
            //   
            //		   
            //            else
            //            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
            //            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
            //            end as Critical,
            //
            //            case when spm.SoftwareVersionNo=1 then 
            //            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
            //            and sii1.IssueType='MAJOR'and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
            //            else
            //            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
            //            and sii1.IssueType='MAJOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
            //            end as Major,
            //
            //            case when spm.SoftwareVersionNo=1 then 
            //            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
            //            and sii1.IssueType='MINOR' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
            //            else
            //            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
            //            and sii1.IssueType='MINOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
            //            end as Minor,
            //
            //            (case when spm.IsFinalPhaseMP !=1 and spm.TestPhaseID=8  then 
            //            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Version Software Testing' and RegularClaimArea='Version Software Testing' and spm.ProjectType=ProjectType) 
            //           
            //            else
            //            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField=stp.TestPhaseName and RegularClaimArea=stp.TestPhaseName and spm.ProjectType=ProjectType) 
            //            end)
            //            as BaseAmount
            //
            //            from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] spm 
            //            left join CellPhoneProject.[dbo].SwQcTestPhase stp on spm.TestPhaseID=stp.TestPhaseID 
            //            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=spm.ProjectMasterID
            //            where DATEPART(MONTH, spm.UpdatedDate)={0} and stp.TestPhaseID !=10 and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.Status='RECOMMENDED'  and pm.IsActive=1
            //
            //            ) as a)b where b.EmployeeCode is not null",
            //                    mon, yrs, roles, persons).ToList();
            //

//            var query1 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
//            select  SwQcHeadAssignId,ProjectMasterId,b.ProjectType,IsFinalPhaseMP,TestPhaseID, case when IsFinalPhaseMP !=1 and TestPhaseID=8  then 'Version Software Testing' else TestPhaseName end as  TestPhaseName,ProjectName,Status,SoftwareVersionName,SoftwareVersionNo,cast(PmToQcHeadAssignTime as date) as PmToQcHeadAssignTime,PmToQcHeadAssignTime1,cast(DATEPART(HOUR, PmToQcHeadAssignTime1) as int) AS AssignHours,cast(DATEPART(MINUTE, PmToQcHeadAssignTime1) as int) AS AssignMinutes,cast(UpdatedDate as date) as QcHeadToPmSubmit,			
//            case when AssignedPerson=0 then 1 else AssignedPerson end as AssignedPerson,EmployeeCode,Critical,Major,Minor,b.BaseAmount,
//            case when IssueAmount is null then 0 else cast(IssueAmount as decimal(16,2)) end as IssueAmount,cast(sqal.Timeline as decimal(16,2)) as Timeline
//
//                from
//                (
//			            select SwQcHeadAssignId,ProjectMasterId,ProjectType,IsFinalPhaseMP,TestPhaseID,TestPhaseName,ProjectName,Status,SoftwareVersionName,case when SoftwareVersionNo is null then 0 else cast(SoftwareVersionNo as int) end as SoftwareVersionNo,CONVERT(varchar, PmToQcHeadAssignTime, 23) as PmToQcHeadAssignTime,PmToQcHeadAssignTime as PmToQcHeadAssignTime1,CONVERT(varchar, UpdatedDate, 23) as UpdatedDate,			
//			            AssignedPerson,EmployeeCode,cast(Critical as int) as Critical,cast(Major as int) as Major,cast(Minor as int) as Minor,
//			            case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,
//			           
//					    case  when a.TestPhaseID in (1) then
//			            (a.Critical+a.Major+a.Minor) * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Issue Claim') and RegularClaimArea =a.TestPhaseName and ProjectType=a.ProjectType) 
//			            --start 8
//			            when a.TestPhaseID=8  and a.IsFinalPhaseMP !=1  then 
//			            case when
//			            (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
//			            (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
//			            +
//			            case when
//			            (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
//			            (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
//			            +
//			            case when
//			            (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else
//			            (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
//			            --end 8
//
//			            else 
//			            case when 
//			            (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
//			            (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
//			            end
//			            +
//			            case when 
//			            (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
//			            (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
//			            end
//			            +
//			            case when 
//			            (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))  is null then 0 else  
//			            (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) end
//			            end as IssueAmount
//
//				            from 
//				            (
//					            select spm.ProjectType,spm.IsFinalPhaseMP,spm.SwQcHeadAssignId,spm.TestPhaseID,TestPhaseName,spm.ProjectMasterId,spm.ProjectName,spm.Status,spm.SoftwareVersionName,spm.SoftwareVersionNo,spm.PmToQcHeadAssignTime,spm.UpdatedDate,
//		 
//					            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
//					            left join CellPhoneProject.dbo.CmnUsers cnn on cnn.CmnUserId=sq1.SwQcUserId
//					            where sq1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cnn.EmployeeCode not in (select EmployeeCode from CellPhoneProject.dbo.SwQcInternHistory si  where si.IsActive=1)) as AssignedPerson,
//
//					            (select cu.EmployeeCode from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
//					            left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=sq1.SwQcUserId
//					            where spm.SwQcHeadAssignId=sq1.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cu.EmployeeCode={3}) as EmployeeCode,
//		
//					            --Critical--		
//					            case when spm.SoftwareVersionNo=1 then 
//					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='CRITICAL' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) 
//					            and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
//		           
//					            when spm.IsFinalPhaseMP=1 then 
//					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
//		   
//					            else
//					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
//		
//					            end as Critical,
//					            ---Major---
//					            case when spm.SoftwareVersionNo=1 then 
//					            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='MAJOR'and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
//					            else
//					            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='MAJOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
//					            end as Major,
//					            ---Minir---
//					            case when spm.SoftwareVersionNo=1 then 
//					            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='MINOR' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
//					            else
//					            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
//					            and sii1.IssueType='MINOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
//					            end as Minor,
//					            --Base Amount---
//					            case when spm.IsFinalPhaseMP !=1 and spm.TestPhaseID=8  then 
//					            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Version Software Testing' and RegularClaimArea='Version Software Testing' and spm.ProjectType=ProjectType) 
//           
//					            else
//					            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField=stp.TestPhaseName and RegularClaimArea=stp.TestPhaseName and spm.ProjectType=ProjectType) 
//					            end as BaseAmount	
//
//					            from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] spm 
//					            inner join CellPhoneProject.[dbo].SwQcTestPhase stp on spm.TestPhaseID=stp.TestPhaseID 
//					            inner join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=spm.ProjectMasterID		
//
//					            where DATEPART(MONTH, spm.UpdatedDate)={0} and stp.TestPhaseID !=10 and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.Status='RECOMMENDED'  and pm.IsActive=1 
//			            )a	where EmployeeCode is not null 	
//            )b
//            inner join CellPhoneProject.[dbo].[SwQcAllIncentiveList] sqal on sqal.ClaimingField=b.TestPhaseName and sqal.ProjectType=b.ProjectType and sqal.IsActive=1 order by ProjectName asc
//           ", mon, yrs, roles, persons).ToList();
            #endregion

            _dbEntities.Database.CommandTimeout = 6000;

            List<SwQcIssueDetailModel> cmList = new List<SwQcIssueDetailModel>();

            var query1 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
                        select  SwQcHeadAssignId,ProjectMasterId,b.ProjectType,IsFinalPhaseMP,TestPhaseID, case when IsFinalPhaseMP !=1 and TestPhaseID=8  then 'Version Software Testing' else TestPhaseName end as  TestPhaseName,ProjectName,Status,SoftwareVersionName,SoftwareVersionNo,cast(PmToQcHeadAssignTime as date) as PmToQcHeadAssignTime,PmToQcHeadAssignTime1,cast(DATEPART(HOUR, PmToQcHeadAssignTime1) as int) AS AssignHours,cast(DATEPART(MINUTE, PmToQcHeadAssignTime1) as int) AS AssignMinutes,cast(UpdatedDate as date) as QcHeadToPmSubmit,			
            case when AssignedPerson=0 then 1 else AssignedPerson end as AssignedPerson,EmployeeCode,Critical,Major,Minor,b.BaseAmount,
            case when IssueAmount is null then 0 else cast(IssueAmount as decimal(16,2)) end as IssueAmount,
			--cast(sqal.Timeline as decimal(16,2)) as Timeline,
			case when TestPhaseID=8 and IsFinalPhaseMP!=1 then  (select top 1 Timeline from CellPhoneProject.[dbo].[SwQcAllIncentiveList] 
			where ClaimingField='Version Software Testing' and IsActive=1 and ProjectType=sqal.ProjectType)
			else sqal.Timeline end as Timeline

                from
                (
			            select SwQcHeadAssignId,ProjectMasterId,ProjectType,IsFinalPhaseMP,TestPhaseID,TestPhaseName,ProjectName,Status,SoftwareVersionName,case when SoftwareVersionNo is null then 0 else cast(SoftwareVersionNo as int) end as SoftwareVersionNo,CONVERT(varchar, PmToQcHeadAssignTime, 23) as PmToQcHeadAssignTime,PmToQcHeadAssignTime as PmToQcHeadAssignTime1,CONVERT(varchar, UpdatedDate, 23) as UpdatedDate,			
			            AssignedPerson,EmployeeCode,cast(Critical as int) as Critical,cast(Major as int) as Major,cast(Minor as int) as Minor,
			            case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,
			           
					    case  when a.TestPhaseID in (1,7,42) then
			            (a.Critical+a.Major+a.Minor) * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and ClaimingField in ('Each Issue Claim') and RegularClaimArea =a.TestPhaseName and ProjectType=a.ProjectType) 
			            --start 8
			            when a.TestPhaseID=8  and a.IsFinalPhaseMP !=1  then 
			            case when
			            (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
			            (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
			            +
			            case when
			            (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
			            (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
			            +
			            case when
			            (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else
			            (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
			            --end 8

			            else 
			            case when 
			            (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
			            (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
			            end
			            +
			            case when 
			            (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
			            (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
			            end
			            +
			            case when 
			            (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))  is null then 0 else  
			            (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) end
			            end as IssueAmount

				            from 
				            (
					            select spm.ProjectType,spm.IsFinalPhaseMP,spm.SwQcHeadAssignId,spm.TestPhaseID,TestPhaseName,spm.ProjectMasterId,spm.ProjectName,spm.Status,spm.SoftwareVersionName,spm.SoftwareVersionNo,spm.PmToQcHeadAssignTime,spm.UpdatedDate,
		 
					            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
					            left join CellPhoneProject.dbo.CmnUsers cnn on cnn.CmnUserId=sq1.SwQcUserId
					            where sq1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sq1.Status !='INACTIVE'
								) as AssignedPerson,

					            (select cu.EmployeeCode from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
					            left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=sq1.SwQcUserId
					            where spm.SwQcHeadAssignId=sq1.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cu.EmployeeCode={3}
								) as EmployeeCode,
		
					            --Critical--		
					            case when spm.SoftwareVersionNo=1 then 
					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='CRITICAL' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) 
					            and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		           
					            when spm.IsFinalPhaseMP=1 then 
					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		   
					            else
					            (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		
					            end as Critical,
					            ---Major---
					            case when spm.SoftwareVersionNo=1 then 
					            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='MAJOR'and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
					            else
					            (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='MAJOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
					            end as Major,
					            ---Minir---
					            case when spm.SoftwareVersionNo=1 then 
					            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='MINOR' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
					            else
					            (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1  and sii1.IsApprovedForChina=1
					            and sii1.IssueType='MINOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
					            end as Minor,
					            --Base Amount---
					            case when spm.IsFinalPhaseMP !=1 and spm.TestPhaseID=8  then 
					            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField='Version Software Testing' and RegularClaimArea='Version Software Testing' and spm.ProjectType=ProjectType) 
           
					            else
					            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField=stp.TestPhaseName and RegularClaimArea=stp.TestPhaseName and spm.ProjectType=ProjectType) 
					            end as BaseAmount	

					            from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] spm 
					            inner join CellPhoneProject.[dbo].SwQcTestPhase stp on spm.TestPhaseID=stp.TestPhaseID 
					            inner join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=spm.ProjectMasterID		

					            where DATEPART(MONTH, spm.UpdatedDate)={0} and stp.TestPhaseID !=10 and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.Status='RECOMMENDED'  and pm.IsActive=1 
			            )a	where EmployeeCode is not null 	
            )b
            inner join CellPhoneProject.[dbo].[SwQcAllIncentiveList] sqal on sqal.ClaimingField=b.TestPhaseName and sqal.ProjectType=b.ProjectType and sqal.IsActive=1 order by ProjectName asc
           ", mon, yrs, roles, persons).ToList();

            foreach (var qq1 in query1)
            {
                var dateDiff = _dbEntities.GetDateDifferenceCountWithHoliday(qq1.PmToQcHeadAssignTime, qq1.QcHeadToPmSubmit).FirstOrDefault();

                qq1.DateDiff = Convert.ToInt32(dateDiff);

                if (qq1.AssignHours == 9 && qq1.AssignMinutes > 0 && qq1.Timeline == 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours < 9)
                {
                    qq1.Timeline = qq1.Timeline;
                }
                else if (qq1.AssignHours > 9 && qq1.Timeline == 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours > 12 && qq1.AssignMinutes > 0 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours == 12 && qq1.AssignMinutes > 0 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours > 9 && qq1.AssignHours < 12 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline;
                }
                else
                {
                    qq1.Timeline = qq1.Timeline;
                }

                ////Addition
                //if (qq1.DateDiff == qq1.Timeline - 1)//5%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.05);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}
                //else if (qq1.DateDiff == qq1.Timeline - 2)//10%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.1);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}

                //else if (qq1.DateDiff == qq1.Timeline - 3)//15%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.15);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}
                //else if (qq1.DateDiff == qq1.Timeline - 4) //20%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.2);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}

                //Deduction
                if (qq1.Timeline == qq1.DateDiff)
                {
                    qq1.BaseAmount = qq1.BaseAmount;
                }
                //else if (qq1.DateDiff + 1 > qq1.Timeline)//5%
                else if (qq1.Timeline + 1 == qq1.DateDiff)//10% new
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.1);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                //else if (qq1.DateDiff + 2 > qq1.Timeline)//10%
                else if (qq1.Timeline + 2 == qq1.DateDiff)//20%
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.2);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                // else if (qq1.DateDiff + 3 > qq1.Timeline)//15%
                else if (qq1.Timeline + 3 == qq1.DateDiff)//30%
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.3);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                // else if (qq1.DateDiff + 4 >= qq1.Timeline)//0%
                else if (qq1.Timeline + 4 <= qq1.DateDiff)//0%
                {
                    qq1.BaseAmount = 0;
                }

                qq1.TotalAmount = System.Math.Round((Convert.ToDecimal(qq1.BaseAmount) + Convert.ToDecimal(qq1.IssueAmount)), 2);
                qq1.ParticularPersonIncentive = System.Math.Round(Convert.ToDecimal(qq1.TotalAmount / qq1.AssignedPerson), 2);
                qq1.Timeline = qq1.Timeline;

                var issueQty = (qq1.Critical + qq1.Major + qq1.Minor);

                var sqQuery =
                   (from sw in _dbEntities.SwQcHeadAssignsFromPms where sw.SwQcHeadAssignId == qq1.SwQcHeadAssignId select sw).FirstOrDefault();
             //   if (qq1.TestPhaseName == "Version Software Testing" && qq1.SoftwareVersionNo > 6 && issueQty > 0 && sqQuery.IsManagementApproved != true) //and approved or not
                if (qq1.TestPhaseName == "Version Software Testing" && qq1.SoftwareVersionNo > 6  && sqQuery.IsManagementApproved != true) //and approved or not
                {
                    //10% deduction without approval if new issue arrise

                   // var totals = qq1.TotalAmount * Convert.ToDecimal(0.1);
                    var totals = 0;
                    if (qq1.ProjectType == "Smart")
                    {
                        totals = 400;
                        if (qq1.BaseAmount < totals)
                        {
                            qq1.BaseAmount = 0;
                        }
                        else
                        {
                            qq1.BaseAmount = qq1.BaseAmount - totals;
                        }
                    }
                    else if (qq1.ProjectType == "Feature")
                    {
                        totals = 300;
                        if (qq1.BaseAmount < totals)
                        {
                            qq1.BaseAmount = 0;
                        }
                        else
                        {
                            qq1.BaseAmount =qq1.BaseAmount - totals;
                        }
                    }
                    //qq1.TotalAmount = qq1.TotalAmount - totals;
                    //qq1.TotalAmount = System.Math.Round((Convert.ToDecimal(qq1.BaseAmount) + Convert.ToDecimal(qq1.IssueAmount)), 2);
                   // qq1.TotalAmount = qq1.TotalAmount - qq1.BaseAmount;
                    qq1.TotalAmount = System.Math.Round((Convert.ToDecimal(qq1.BaseAmount) + Convert.ToDecimal(qq1.IssueAmount)), 2);
                    qq1.ParticularPersonIncentive = System.Math.Round(Convert.ToDecimal(qq1.TotalAmount / qq1.AssignedPerson), 2);

                }

                cmList.Add(qq1);

            }//end issue part
            #region com
//            var query2 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
//            select ProjectType,IsFinalPhaseMP,SwQcHeadAssignId,TestPhaseName,ProjectMasterId,ProjectName,Status,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,
//            UpdatedDate,AssignedPerson,EmployeeCode,case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount, case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as TotalAmount,
//            cast((BaseAmount/AssignedPerson) as decimal(18,2)) as  ParticularPersonIncentive
//
//            from
//              (
//	            select spm.ProjectType,spm.IsFinalPhaseMP,spm.SwQcHeadAssignId,TestPhaseName='Os Requirement Analysis',spm.ProjectMasterId,spm.ProjectName,spm.Status,spm.SoftwareVersionName,spm.SoftwareVersionNo,spm.PmToQcHeadAssignTime,spm.UpdatedDate,
//		 
//	            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
//	            left join CellPhoneProject.dbo.CmnUsers cnn on cnn.CmnUserId=sq1.SwQcUserId
//	            where sq1.SwQcHeadAssignId=spm.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cnn.EmployeeCode not in (select EmployeeCode from CellPhoneProject.dbo.SwQcInternHistory si  where si.IsActive=1)) as AssignedPerson,
//
//	            (select cu.EmployeeCode from CellPhoneProject.dbo.SwQcAssignsFromQcHead sq1
//	            left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=sq1.SwQcUserId
//	            where spm.SwQcHeadAssignId=sq1.SwQcHeadAssignId and sq1.Status !='INACTIVE' and cu.EmployeeCode={3}) as EmployeeCode,
//
//                (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Os Requirement Analysis' and RegularClaimArea='Os Requirement Analysis' and spm.ProjectType=ProjectType) as BaseAmount	
//	
//	            from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] spm 					           
//	            where DATEPART(MONTH, spm.UpdatedDate)={0}  and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.Status='DONE' 
//             )A where A.EmployeeCode is not null", mon, yrs, roles, persons).ToList();

            //old up to 2021_09_18
            //            var query2 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //          select distinct SwQcHeadAssignId,ProjectMasterId,C.ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
            //            AllIssues, C.BaseAmount,case when IssueAmount is null then 0 else cast(IssueAmount as decimal(16,2)) end as IssueAmount,sqal.Timeline
            //            from
            //            (
            //                select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
            //	            AllIssues,  case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,
            //	            (AllIssues * (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField='Each Issue Claim' 
            //	            and RegularClaimArea='Field (Network Test)' and ProjectType=B.ProjectType)) as IssueAmount 
            //
            //	            from
            //	            (
            //		            select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,cast(PmToQcHeadAssignTime as date) as PmToQcHeadAssignTime,PmToQcHeadAssignTime1,cast(DATEPART(HOUR, PmToQcHeadAssignTime1) as int) AS AssignHours,cast(DATEPART(MINUTE, PmToQcHeadAssignTime1) as int) AS AssignMinutes,
            //		            cast(QcHeadToPmSubmit as date) as QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
            //
            //		            (select count(*) as Critical from CellPhoneProject.dbo.SwQcFieldTestDetails sii1 where sii1.SwQcHeadAssignId=A.SwQcHeadAssignId and sii1.SoftwareVersionNo=A.SoftwareVersionNo 
            //		            and sii1.ProjectMasterId=A.ProjectMasterId  and sii1.Issue is not null --and sii1.IssueType='CRITICAL'
            //					) as AllIssues,
            //
            //		            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and ClaimingField='Field Test Complete Incentive' 
            //		            and RegularClaimArea='Field (Network Test)' and A.ProjectType=ProjectType) as BaseAmount
            //
            //		            from
            //		            (
            //				            select distinct sq.ProjectMasterId,sq.TestPhaseID,cu.EmployeeCode, sq.ProjectName,sq.ProjectType,sq.SoftwareVersionName,sq.SoftwareVersionNo,tp.TestPhaseName,sq.Status as HeadStatus,
            //				            sq.SwQcHeadAssignId,CONVERT(varchar, sq.PmToQcHeadAssignTime, 23) as PmToQcHeadAssignTime,sq.PmToQcHeadAssignTime as PmToQcHeadAssignTime1,CONVERT(varchar, sq.UpdatedDate, 23) as QcHeadToPmSubmit,
            //
            //
            //				            (SELECT count(*) FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
            //				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
            //				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId )  AS  AssignedPersons,
            //
            //				            STUFF((SELECT ', '  + sw2.Status FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
            //				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId 
            //				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId and sw2.Status not in ('INACTIVE') ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedStatus
            //
            //				            from CellPhoneProject.dbo.ProjectMasters pm
            //
            //				            inner join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq on pm.ProjectMasterId=sq.ProjectMasterId 
            //				            inner join CellPhoneProject.dbo.SwQcTestPhase tp on tp.TestPhaseID=sq.TestPhaseID
            //				            left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sw on sq.SwQcHeadAssignId=sw.SwQcHeadAssignId and sw.Status not in ('INACTIVE')
            //				            left join CellPhoneProject.[dbo].CmnUsers cu on cu.CmnUserId=sw.SwQcUserId 
            //
            //				            where pm.IsActive=1 and sq.TestPhaseID=10 and sq.Status='RECOMMENDED'
            //				            AND DATEPART(MONTH, sq.UpdatedDate)={0} and DATEPART(YEAR, sq.UpdatedDate)={1} and cu.EmployeeCode ={3}
            //		            )A where A.AssignedStatus not like '%ASSIGNED%' 
            //		                
            //                    )B
            //            )C  inner join CellPhoneProject.[dbo].[SwQcAllIncentiveList] sqal on sqal.RegularClaimArea=C.TestPhaseName and sqal.ProjectType=C.ProjectType and sqal.IsActive=1 order by ProjectName asc
            //            
            //			", mon, yrs, roles, persons).ToList();


            //            foreach (var project in query2)
            //            {
            //                cmList.Add(project);
            //            }
            #endregion
            return cmList;
        }

        public List<SwQcNewInnovationModel> GetNewInnovationForIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);
            var query = _dbEntities.Database.SqlQuery<SwQcNewInnovationModel>(@"select a.NewInnovationId,a.ProjectName,a.AssignedBy,a.WorkType,a.Description,a.EffectiveDate,a.Persons,
            case when cast(a.BaseAmount as decimal(16,2)) is null then 0 else 
            cast(a.BaseAmount as decimal(16,2)) end as BaseAmount from
            (select NewInnovationId, ProjectName,AssignedBy,WorkType,Description,EffectiveDate, cu.UserFullName as Persons,
            (select BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField =sii.WorkType and RegularClaimArea =sii.WorkType) as BaseAmount  
            from [CellPhoneProject].[dbo].[SwQcNewInnovation] sii 
            left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=sii.Added
            where IsApprovedForIncentive=1 and DATEPART(MONTH, EffectiveDate)={0} and DATEPART(YEAR, EffectiveDate)={1} and cu.EmployeeCode={3} )a", mon, yrs, roles, persons).ToList();
            return query;
        }

        public List<SwQcPersonalUseFindingsIssueDetailModel> GetPersonalUseIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);
            var query = _dbEntities.Database.SqlQuery<SwQcPersonalUseFindingsIssueDetailModel>(@"
                select distinct b.SwQcHeadAssignId,b.ProjectMasterId,b.ProjectName,b.ProjectType,b.TestPhaseName,cast(b.SoftwareVersionNo as int) as SoftwareVersionNo,b.SoftwareVersionName,b.TestPhaseID,b.Persons,b.EmployeeCode,b.IncentiveClaim,  
                cast(b.Critical as int) as Critical,cast(b.Major as int) as Major,cast(b.Minor as int) as Minor,b.TotalAmount,
                b.TotalAmount as ParticularPersonIncentive 
                from 
                (
			
	                select a.SwQcPrUseFindId,a.ProjectType,a.SwQcHeadAssignId,a.TestPhaseID,a.ProjectMasterId,a.ProjectName,a.SoftwareVersionName,a.SoftwareVersionNo,a.TestPhaseName,a.Persons,a.EmployeeCode,a.IncentiveClaim,a.Critical,
	                a.Major,a.Minor,((a.Critical *
	                (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Personal Use Findings' ))
	                +(a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Personal Use Findings' ))
	                +(a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Personal Use Findings' ))) as TotalAmount
         
	                    from 			
		                (
			                select distinct spm.SwQcPrUseFindId,spm.ProjectType,spm.SwQcHeadAssignId,spm.TestPhaseID,TestPhaseName,spm.ProjectMasterId,spm.ProjectName,spm.SoftwareVersionName,spm.SoftwareVersionNo,
                            IncentiveClaim='Personal Use Findings',cu.UserFullName as Persons,cu.EmployeeCode,
                            (select count(*) from CellPhoneProject.dbo.SwQcPersonalUseFindingsIssueDetails where IssueType='CRITICAL' and Added=spm.Added and IsApprovedForIncentive=1 and
                            DATEPART(MONTH, UpdatedDate)={0} and DATEPART(YEAR, UpdatedDate)={1}) as Critical,
                            (select count(*) from CellPhoneProject.dbo.SwQcPersonalUseFindingsIssueDetails where IssueType='MAJOR' and Added=spm.Added and IsApprovedForIncentive=1 and
                            DATEPART(MONTH, UpdatedDate)={0} and DATEPART(YEAR, UpdatedDate)={1}) as Major,
                            (select count(*) from CellPhoneProject.dbo.SwQcPersonalUseFindingsIssueDetails where IssueType='MINOR' and Added=spm.Added and IsApprovedForIncentive=1 and
                            DATEPART(MONTH, UpdatedDate)={0} and DATEPART(YEAR, UpdatedDate)={1}) as Minor
                            from CellPhoneProject.[dbo].[SwQcPersonalUseFindingsIssueDetails] spm 
                            inner join CellPhoneProject.[dbo].SwQcTestPhase stp on spm.TestPhaseID=stp.TestPhaseID 
                            inner join CellPhoneProject.dbo.CmnUsers cu on spm.Added=cu.CmnUserId
                            inner join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=spm.ProjectMasterID
                            where DATEPART(MONTH, spm.UpdatedDate)={0} and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.IsApprovedForIncentive=1 and cu.EmployeeCode={3} and pm.IsActive=1
			
	                   ) as a
                )b
            ", mon, yrs, roles, persons).ToList();

            return query;
        }

        public List<SwQcIssueDetailModel> GetCtsDataForIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);
            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select b.EmployeeCode,b.SwQcHeadAssignId,b.TestPhaseID,b.ProjectMasterId,b.ProjectType,b.TestPhaseName,b.ProjectName,b.SoftwareVersionName,cast(b.SoftwareVersionNo as int) as SoftwareVersionNo,b.Status,b.UpdatedDate,
                cast(b.Critical as int) as Critical,cast(b.Major as int) as Major,cast(b.Minor as int) as Minor,b.TotalAmount,b.TotalAmount 
                as ParticularPersonIncentive

                from
                (select *,(select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('CTS related Test') and RegularClaimArea ='CTS related Test') as TotalAmount
                 from
                (select spm.ProjectType,spm.SwQcHeadAssignId,spm.TestPhaseID,TestPhaseName='CTS related Test',spm.ProjectMasterId,spm.ProjectName,spm.Status,spm.SoftwareVersionName,spm.SoftwareVersionNo,spm.UpdatedDate,

                (select count(*) from CellPhoneProject.dbo.SwQcIssueDetails ss1
                inner JOIN CellPhoneProject.dbo.CmnUsers cu1 on cu1.CmnUserId=ss1.Added
                 where IssueType='CRITICAL' and RefernceModule='CTS'  and RefernceModule is not null and ss1.SwQcHeadAssignId=spm.SwQcHeadAssignId and cu1.EmployeeCode={3}) as Critical,

                 (select count(*) from CellPhoneProject.dbo.SwQcIssueDetails ss1
                inner JOIN CellPhoneProject.dbo.CmnUsers cu1 on cu1.CmnUserId=ss1.Added
                 where IssueType='MAJOR' and RefernceModule='CTS'  and RefernceModule is not null and ss1.SwQcHeadAssignId=spm.SwQcHeadAssignId and cu1.EmployeeCode={3}) as Major,

                  (select count(*) from CellPhoneProject.dbo.SwQcIssueDetails ss1
                inner JOIN CellPhoneProject.dbo.CmnUsers cu1 on cu1.CmnUserId=ss1.Added
                 where IssueType='MINOR' and RefernceModule='CTS'  and RefernceModule is not null and ss1.SwQcHeadAssignId=spm.SwQcHeadAssignId and cu1.EmployeeCode={3}) as Minor,

 
                (select distinct cu1.EmployeeCode from CellPhoneProject.dbo.SwQcIssueDetails ss1
                inner JOIN CellPhoneProject.dbo.CmnUsers cu1 on cu1.CmnUserId=ss1.Added
                 where  RefernceModule='CTS' and cu1.EmployeeCode={3}) as EmployeeCode

                from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] spm 
                left join CellPhoneProject.[dbo].SwQcTestPhase stp on spm.TestPhaseID=stp.TestPhaseID 
                left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=spm.ProjectMasterID
                where DATEPART(MONTH, spm.UpdatedDate)={0} and DATEPART(YEAR, spm.UpdatedDate)={1} and spm.Status='RECOMMENDED'  and pm.IsActive=1 )as a)b  where b.EmployeeCode is not null and (b.Critical+b.Major+b.Minor)>0", mon, yrs, roles, persons).ToList();


            return query;
        }

        public List<SwQcIssueDetailModel> GetFieldAssignByHeadDataForIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);

            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //select b.ProjectMasterId,b.SwQcHeadAssignId,b.TestPhaseID,b.EmployeeCode,b.ProjectType,b.ProjectName,b.SoftwareVersionName,b.SoftwareVersionNo,b.TestPhaseName,
            //cast(b.AssignedPerson as int) as AssignedPersons,cast(b.Critical as int) as Critical,cast(b.BaseAmount as decimal(16,2)) as BaseAmount,
            //cast(b.IssueAmount as decimal(16,2)) as IssueAmount,cast((b.BaseAmount+b.IssueAmount) as decimal(16,2)) as TotalAmount,
            //cast(((b.BaseAmount+b.IssueAmount)/b.AssignedPerson) as decimal(16,2)) as ParticularPersonIncentive
            //from 
            //(select *,
            //(a.Critical * (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Each Critical Issue' 
            //and RegularClaimArea='Field (Network Test)' and ProjectType=a.ProjectType)) as IssueAmount
            //from
            //(select distinct ss.ProjectMasterId,SwQcHeadAssignId,EmployeeCode,ss.ProjectType,ss.ProjectName,SoftwareVersionName,SoftwareVersionNo,ss.TestPhaseID,sp.TestPhaseName,
            //(select count(*) as Critical from CellPhoneProject.dbo.SwQcFieldTestDetails sii1 where sii1.SwQcHeadAssignId=ss.SwQcHeadAssignId and sii1.SoftwareVersionNo=ss.SoftwareVersionNo and sii1.ProjectMasterId=ss.ProjectMasterId
            //AND DATEPART(MONTH, ss.UpdatedDate)={0} and DATEPART(YEAR, ss.UpdatedDate)={1} and sii1.Issue is not null
            //and sii1.IssueType='CRITICAL') as Critical,
            //
            //(select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Field Test Complete Incentive' 
            //and RegularClaimArea='Field (Network Test)' and ss.ProjectType=ProjectType) as BaseAmount,
            //
            //(select count(*)  FROM CellPhoneProject.dbo.CmnUsers cmn1
            //left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId AND DATEPART(MONTH, ss.UpdatedDate)={0} and DATEPART(YEAR, ss.UpdatedDate)={1} 
            //WHERE sw.SwQcUserId=cmn1.CmnUserId  and sw.Status in ('RECOMMENDED') and sw.SwQcHeadAssignId=ss.SwQcHeadAssignId
            //and sw.Status not in ('INACTIVE') and sw.SoftwareVersionNo=ss.SoftwareVersionNo and cmn1.EmployeeCode not in (select EmployeeCode from CellPhoneProject.dbo.SwQcInternHistory si  where si.IsActive=1)) as AssignedPerson
            //
            //from CellPhoneProject.dbo.SwQcAssignsFromQcHead  ss 
            //left join CellPhoneProject.dbo.CmnUsers cu on cu.CmnUserId=ss.SwQcUserId
            //left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=ss.TestPhaseID
            //left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterID=ss.ProjectMasterID
            //where 
            //not exists (select Status from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqq
            //where sqq.SwQcHeadAssignId=ss.SwQcHeadAssignId and sqq.Status IN ('ASSIGNED','INACTIVE','QCCOMPLETED')) and ss.TestPhaseID=10 and
            // ss.Status='RECOMMENDED' AND DATEPART(MONTH, ss.UpdatedDate)={0} and DATEPART(YEAR, ss.UpdatedDate)={1} and pm.IsActive=1 and cu.EmployeeCode ={3}) as a)b  where b.EmployeeCode is not null", mon, yrs, roles, persons).ToList();


            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"           
            //                select ProjectMasterId, TestPhaseID,EmployeeCode,ProjectName,ProjectType,SoftwareVersionName,SoftwareVersionNo,TestPhaseName,HeadStatus,SwQcHeadAssignId,AssignedPersonName,cast(AssignedPersons as int) as AssignedPersons,AssignedStatus,cast(Critical as int) as Critical,
            //                cast(BaseAmount as decimal(16,2)) as BaseAmount,cast(IssueAmount as decimal(16,2)) as IssueAmount,cast((BaseAmount+IssueAmount) as decimal(16,2)) as TotalAmount,cast(((BaseAmount+IssueAmount)/AssignedPersons) as decimal(16,2)) as ParticularPersonIncentive
            //
            //                from
            //                    (
            //	                select ProjectMasterId, TestPhaseID,EmployeeCode,ProjectName,ProjectType,SoftwareVersionName,SoftwareVersionNo,TestPhaseName,HeadStatus,SwQcHeadAssignId,AssignedPersonName,AssignedPersons,AssignedStatus,Critical,
            //	                BaseAmount,
            //
            //	                (Critical * (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Each Critical Issue' 
            //	                and RegularClaimArea='Field (Network Test)' and ProjectType=B.ProjectType)) as IssueAmount 
            //
            //	                from
            //		                (
            //			                select ProjectMasterId, TestPhaseID,EmployeeCode,ProjectName,ProjectType,SoftwareVersionName,SoftwareVersionNo,TestPhaseName,HeadStatus,SwQcHeadAssignId,AssignedPersonName,AssignedPersons,AssignedStatus,
            //
            //			                (select count(*) as Critical from CellPhoneProject.dbo.SwQcFieldTestDetails sii1 where sii1.SwQcHeadAssignId=A.SwQcHeadAssignId and sii1.SoftwareVersionNo=A.SoftwareVersionNo 
            //			                and sii1.ProjectMasterId=A.ProjectMasterId  and sii1.Issue is not null and sii1.IssueType='CRITICAL') as Critical,
            //
            //			                (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Field Test Complete Incentive' 
            //			                and RegularClaimArea='Field (Network Test)' and A.ProjectType=ProjectType) as BaseAmount
            //
            //			                from
            //			                (
            //					                select distinct sq.ProjectMasterId,sq.TestPhaseID,cu.EmployeeCode, sq.ProjectName,sq.ProjectType,sq.SoftwareVersionName,sq.SoftwareVersionNo,tp.TestPhaseName,sq.Status as HeadStatus,
            //					                sq.SwQcHeadAssignId,
            //
            //					                STUFF((SELECT ', '  + cmn1.UserFullName FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
            //					                on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
            //					                WHERE  sw2.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedPersonName,
            //
            //					                (SELECT count(*) FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
            //					                on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
            //					                WHERE  sw2.SwQcUserId=cmn1.CmnUserId )  AS  AssignedPersons,
            //
            //					                STUFF((SELECT ', '  + sw2.Status FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
            //					                on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
            //					                WHERE  sw2.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedStatus
            //
            //					                from CellPhoneProject.dbo.ProjectMasters pm
            //
            //					                inner join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq on pm.ProjectMasterId=sq.ProjectMasterId 
            //					                inner join CellPhoneProject.dbo.SwQcTestPhase tp on tp.TestPhaseID=sq.TestPhaseID
            //					                left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sw on sq.SwQcHeadAssignId=sw.SwQcHeadAssignId 
            //					                left join CellPhoneProject.[dbo].CmnUsers cu on cu.CmnUserId=sw.SwQcUserId 
            //
            //					                where pm.IsActive=1 and sq.TestPhaseID=10 and sq.Status='RECOMMENDED'
            //					                AND DATEPART(MONTH, sq.UpdatedDate)={0} and DATEPART(YEAR, sq.UpdatedDate)={1} and cu.EmployeeCode ={3}
            //			                )A where A.AssignedStatus not like '%ASSIGNED%' 
            //		                )B
            //                    )C  where EmployeeCode is not null order by SwQcHeadAssignId asc
            //             ", mon, yrs, roles, persons).ToList();

//            var query1 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"           
//            select distinct SwQcHeadAssignId,ProjectMasterId,C.ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
//            Critical, C.BaseAmount,case when IssueAmount is null then 0 else cast(IssueAmount as decimal(16,2)) end as IssueAmount,sqal.Timeline
//            from
//            (
//                select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
//	            Critical,  case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,
//	            (Critical * (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Each Critical Issue' 
//	            and RegularClaimArea='Field (Network Test)' and ProjectType=B.ProjectType)) as IssueAmount 
//
//	            from
//	            (
//		            select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,cast(PmToQcHeadAssignTime as date) as PmToQcHeadAssignTime,PmToQcHeadAssignTime1,cast(DATEPART(HOUR, PmToQcHeadAssignTime1) as int) AS AssignHours,cast(DATEPART(MINUTE, PmToQcHeadAssignTime1) as int) AS AssignMinutes,
//		            cast(QcHeadToPmSubmit as date) as QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
//
//		            (select count(*) as Critical from CellPhoneProject.dbo.SwQcFieldTestDetails sii1 where sii1.SwQcHeadAssignId=A.SwQcHeadAssignId and sii1.SoftwareVersionNo=A.SoftwareVersionNo 
//		            and sii1.ProjectMasterId=A.ProjectMasterId  and sii1.Issue is not null and sii1.IssueType='CRITICAL') as Critical,
//
//		            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Field Test Complete Incentive' 
//		            and RegularClaimArea='Field (Network Test)' and A.ProjectType=ProjectType) as BaseAmount
//
//		            from
//		            (
//				            select distinct sq.ProjectMasterId,sq.TestPhaseID,cu.EmployeeCode, sq.ProjectName,sq.ProjectType,sq.SoftwareVersionName,sq.SoftwareVersionNo,tp.TestPhaseName,sq.Status as HeadStatus,
//				            sq.SwQcHeadAssignId,CONVERT(varchar, sq.PmToQcHeadAssignTime, 23) as PmToQcHeadAssignTime,sq.PmToQcHeadAssignTime as PmToQcHeadAssignTime1,CONVERT(varchar, sq.UpdatedDate, 23) as QcHeadToPmSubmit,
//
//
//				            (SELECT count(*) FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
//				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
//				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId )  AS  AssignedPersons,
//
//				            STUFF((SELECT ', '  + sw2.Status FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
//				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId 
//				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId and sw2.Status not in ('INACTIVE') ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedStatus
//
//				            from CellPhoneProject.dbo.ProjectMasters pm
//
//				            inner join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq on pm.ProjectMasterId=sq.ProjectMasterId 
//				            inner join CellPhoneProject.dbo.SwQcTestPhase tp on tp.TestPhaseID=sq.TestPhaseID
//				            left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sw on sq.SwQcHeadAssignId=sw.SwQcHeadAssignId and sw.Status not in ('INACTIVE')
//				            left join CellPhoneProject.[dbo].CmnUsers cu on cu.CmnUserId=sw.SwQcUserId 
//
//				            where pm.IsActive=1 and sq.TestPhaseID=10 and sq.Status='RECOMMENDED'
//				            AND DATEPART(MONTH, sq.UpdatedDate)={0} and DATEPART(YEAR, sq.UpdatedDate)={1} and cu.EmployeeCode ={3}
//		            )A where A.AssignedStatus not like '%ASSIGNED%' 
//		                
//                    )B
//            )C  inner join CellPhoneProject.[dbo].[SwQcAllIncentiveList] sqal on sqal.RegularClaimArea=C.TestPhaseName and sqal.ProjectType=C.ProjectType and sqal.IsActive=1 order by ProjectName asc
//            
//           ", mon, yrs, roles, persons).ToList();

            var query1 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"        
            select distinct SwQcHeadAssignId,ProjectMasterId,C.ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
            AllIssues, C.BaseAmount,case when IssueAmount is null then 0 else cast(IssueAmount as decimal(16,2)) end as IssueAmount,sqal.Timeline
            from
            (
                select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,PmToQcHeadAssignTime,PmToQcHeadAssignTime1,AssignHours,AssignMinutes,QcHeadToPmSubmit,AssignedPersons,EmployeeCode,
	            AllIssues,  case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,
	            (AllIssues * (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where  IsActive=1 and  ClaimingField='Each Issue Claim' 
	            and RegularClaimArea='Field (Network Test)' and ProjectType=B.ProjectType )) as IssueAmount 

	            from
	            (
		            select SwQcHeadAssignId,ProjectMasterId,ProjectType,TestPhaseID,TestPhaseName,ProjectName,HeadStatus,SoftwareVersionName,SoftwareVersionNo,cast(PmToQcHeadAssignTime as date) as PmToQcHeadAssignTime,PmToQcHeadAssignTime1,cast(DATEPART(HOUR, PmToQcHeadAssignTime1) as int) AS AssignHours,cast(DATEPART(MINUTE, PmToQcHeadAssignTime1) as int) AS AssignMinutes,
		            cast(QcHeadToPmSubmit as date) as QcHeadToPmSubmit,AssignedPersons,EmployeeCode,

		            (select count(*) as Critical from CellPhoneProject.dbo.SwQcFieldTestDetails sii1 where sii1.SwQcHeadAssignId=A.SwQcHeadAssignId and sii1.SoftwareVersionNo=A.SoftwareVersionNo 
		            and sii1.ProjectMasterId=A.ProjectMasterId  and sii1.Issue is not null --and sii1.IssueType='CRITICAL'
					) as AllIssues,

		            (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where IsActive=1 and  ClaimingField='Field Test Complete Incentive' 
		            and RegularClaimArea='Field (Network Test)' and A.ProjectType=ProjectType ) as BaseAmount

		            from
		            (
				            select distinct sq.ProjectMasterId,sq.TestPhaseID,cu.EmployeeCode, sq.ProjectName,sq.ProjectType,sq.SoftwareVersionName,sq.SoftwareVersionNo,tp.TestPhaseName,sq.Status as HeadStatus,
				            sq.SwQcHeadAssignId,CONVERT(varchar, sq.PmToQcHeadAssignTime, 23) as PmToQcHeadAssignTime,sq.PmToQcHeadAssignTime as PmToQcHeadAssignTime1,CONVERT(varchar, sq.UpdatedDate, 23) as QcHeadToPmSubmit,


				            (SELECT count(*) FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId and sw2.Status not in ('INACTIVE')
				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId )  AS  AssignedPersons,

				            STUFF((SELECT ', '  + sw2.Status FROM CellphoneProject.[dbo].CmnUsers cmn1 inner join CellphoneProject.[dbo].SwQcAssignsFromQcHead sw2 
				            on sw2.SwQcUserId=cmn1.CmnUserId and sw2.SwQcHeadAssignId=sq.SwQcHeadAssignId 
				            WHERE  sw2.SwQcUserId=cmn1.CmnUserId and sw2.Status not in ('INACTIVE') ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignedStatus

				            from CellPhoneProject.dbo.ProjectMasters pm

				            inner join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq on pm.ProjectMasterId=sq.ProjectMasterId 
				            inner join CellPhoneProject.dbo.SwQcTestPhase tp on tp.TestPhaseID=sq.TestPhaseID
				            left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sw on sq.SwQcHeadAssignId=sw.SwQcHeadAssignId and sw.Status not in ('INACTIVE')
				            left join CellPhoneProject.[dbo].CmnUsers cu on cu.CmnUserId=sw.SwQcUserId 

				            where pm.IsActive=1 and sq.TestPhaseID=10 and sq.Status='RECOMMENDED'
				            AND DATEPART(MONTH, sq.UpdatedDate)={0} and DATEPART(YEAR, sq.UpdatedDate)={1} and cu.EmployeeCode ={3}
		            )A where A.AssignedStatus not like '%ASSIGNED%' 
		                
                    )B
            )C  inner join CellPhoneProject.[dbo].[SwQcAllIncentiveList] sqal on sqal.RegularClaimArea=C.TestPhaseName and sqal.ProjectType=C.ProjectType and sqal.IsActive=1 order by ProjectName asc
            
           ", mon, yrs, roles, persons).ToList();
            foreach (var qq1 in query1)
            {
                var dateDiff =
                    _dbEntities.GetDateDifferenceCountWithHoliday(qq1.PmToQcHeadAssignTime, qq1.QcHeadToPmSubmit)
                        .FirstOrDefault();

                qq1.DateDiff = Convert.ToInt32(dateDiff);

                if (qq1.AssignHours == 9 && qq1.AssignMinutes > 0 && qq1.Timeline == 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours < 9)
                {
                    qq1.Timeline = qq1.Timeline;
                }
                else if (qq1.AssignHours > 9 && qq1.Timeline == 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours > 12 && qq1.AssignMinutes > 0 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours == 12 && qq1.AssignMinutes > 0 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline + 1;
                }
                else if (qq1.AssignHours > 9 && qq1.AssignHours < 12 && qq1.Timeline != 1)
                {
                    qq1.Timeline = qq1.Timeline;
                }
                else
                {
                    qq1.Timeline = qq1.Timeline;
                }

                ////Addition
                //if (qq1.DateDiff == qq1.Timeline - 1) //5%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.05);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}
                //else if (qq1.DateDiff == qq1.Timeline - 2) //10%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.1);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}

                //else if (qq1.DateDiff == qq1.Timeline - 3) //15%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.15);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}
                //else if (qq1.DateDiff == qq1.Timeline - 4) //20%
                //{
                //    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.2);
                //    qq1.BaseAmount = qq1.BaseAmount + baseAmount;
                //}

                //Deduction
                if (qq1.Timeline == qq1.DateDiff)
                {
                    qq1.BaseAmount = qq1.BaseAmount;
                }
                else if (qq1.Timeline + 1 == qq1.DateDiff) //10%
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.1);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                else if (qq1.Timeline + 2 == qq1.DateDiff) //20%
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.2);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                else if (qq1.Timeline + 3 == qq1.DateDiff) //30%
                {
                    var baseAmount = qq1.BaseAmount * Convert.ToDecimal(0.3);
                    qq1.BaseAmount = qq1.BaseAmount - baseAmount;
                }
                else if (qq1.Timeline + 4 <= qq1.DateDiff) //0%
                {
                    qq1.BaseAmount = 0;
                }

                qq1.TotalAmount =
                    System.Math.Round((Convert.ToDecimal(qq1.BaseAmount) + Convert.ToDecimal(qq1.IssueAmount)), 2);
                qq1.ParticularPersonIncentive = System.Math.Round(
                    Convert.ToDecimal(qq1.TotalAmount / qq1.AssignedPersons), 2);
                qq1.Timeline = qq1.Timeline;
            }


            return query1;
        }

        public List<ProjectMasterModel> GetAllProjectName()
        {
            _dbEntities.Database.CommandTimeout = 6000;
            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"Select distinct ProjectName from  CellPhoneProject.dbo.ProjectMasters  where ProjectStatus ='APPROVED' ").ToList();

            return query;
        }

        #endregion

        #region Supplier Feedback Excel
        public bool UpdateDbByExcel(string projectName, long softVersion, HttpPostedFileBase excelFile, string testPhaseIds)
        {
            var dbeEntities = new CellPhoneProjectEntities();

            long testPhaseId;
            long.TryParse(testPhaseIds, out testPhaseId);

            string ExcuteMsg = string.Empty;
            HttpPostedFileBase file = excelFile;
            //Extention Check
            if (excelFile.FileName.EndsWith("xls") || excelFile.FileName.EndsWith("xlsx") ||
                excelFile.FileName.EndsWith("XLS") ||
                excelFile.FileName.EndsWith("XLSX"))
            {
                //Null Exp Check
                if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                {
                    string fileName = file.FileName;
                    string fileContentType = file.ContentType;
                    byte[] fileBytes = new byte[file.ContentLength];
                    var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));
                    try
                    {
                        using (var package = new ExcelPackage(file.InputStream))
                        {
                            //for demo "SW_V_" + softVersion+"_Demo"
                            var myStr = "";

                            if (testPhaseId == 5)
                            {
                                myStr = "SW_V_" + softVersion + "_Demo";
                            }
                            else
                            {
                                myStr = "SW_V_" + softVersion;
                            }
                            ExcelWorksheet workSheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name.Trim() == myStr);
                            if (workSheet == null)
                                return false;
                            var noOfCol = workSheet.Dimension.End.Column;
                            var noOfRow = workSheet.Dimension.End.Row;
                            var nullCount = 0;

                            for (int rowIterator = 3; rowIterator <= noOfRow; rowIterator++)
                            {
                                var swQcIssueDetail = new SwQcIssueDetail();

                                var serial = 0;
                                var supplierComment = "";
                                var supplierStatus = "";

                                serial = Convert.ToInt32(workSheet.Cells[rowIterator, 1].Value) == 0
                                    ? 0
                                    : Convert.ToInt32(workSheet.Cells[rowIterator, 1].Value);

                                supplierStatus = workSheet.Cells[rowIterator, 13].Value == null
                                 ? null
                                 : workSheet.Cells[rowIterator, 13].Value.ToString();

                                supplierComment = workSheet.Cells[rowIterator, 14].Value == null
                                 ? null
                                 : workSheet.Cells[rowIterator, 14].Value.ToString();
                                //
                                var swData = new SwQcIssueDetail();

                                if (testPhaseId == 5)
                                {
                                    swData = (from c in dbeEntities.SwQcIssueDetails
                                              where c.IssueSerial == serial && c.ProjectName == projectName && c.SoftwareVersionNo == softVersion && c.TestPhaseID == testPhaseId
                                              select c).FirstOrDefault();
                                }
                                else
                                {
                                    swData = (from c in dbeEntities.SwQcIssueDetails
                                              where c.IssueSerial == serial && c.ProjectName == projectName && c.SoftwareVersionNo == softVersion && c.TestPhaseID != 5
                                              select c).FirstOrDefault();
                                }


                                if (swData == null || (supplierStatus == null && supplierComment == null))
                                {
                                    nullCount++;
                                    if (nullCount == (noOfRow - 2))
                                        return false;
                                    continue;

                                }

                                swData.SupplierStatus = supplierStatus;
                                swData.SupplierComment = supplierComment;

                                _dbEntities.SwQcIssueDetails.AddOrUpdate(swData);

                                _dbEntities.SaveChanges();

                            }


                        }
                    }
                    catch (Exception ex)
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
            return true;
        }

        public List<SwQcAssignsFromQcHeadModel> GetCompletedFieldTestProjectForQcHeadToPmSubmit()
        {
            _dbEntities.Database.CommandTimeout = 6000;
            var query = _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct sqi.Status,sqi.ProjectMasterId,sqi.ProjectMasterId,sqi.SwQcHeadAssignId,sqi.OrderNumber,sqi.ProjectName,sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.TestPhaseID,sp.TestPhaseName,sqi.ProjectPmAssignId,

                STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1
                left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.SwQcHeadAssignId=0 
                WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.SoftwareVersionNo=sqi.SoftwareVersionNo and sw.SwQcHeadToQcAssignTime=sqi.SwQcHeadToQcAssignTime and sw.ProjectMasterId=sqi.ProjectMasterId
                 and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,


                case when sqi.SwQcHeadToQcAssignTime is null then (select top 1 SwQcHeadToQcAssignTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID and ProjectMasterId=sqi.ProjectMasterId) else sqi.SwQcHeadToQcAssignTime end as SwQcHeadToQcAssignTime,

                case when sqi.SwQcEndTime is null then (select top 1 SwQcEndTime from CellPhoneProject.dbo.SwQcAssignsFromQcHead
                where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseID and ProjectMasterId=sqi.ProjectMasterId) else sqi.SwQcHeadToQcAssignTime end as SwQcFinishedTime,

                (select top 1 cm1.UserFullName from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi1
                left join CellPhoneProject.dbo.CmnUsers cm1 on sqi1.Added=cm1.CmnUserId
                where sqi1.SwQcHeadAssignId=0 and sqi1.TestPhaseID=sqi.TestPhaseID and sqi1.ProjectMasterId=sqi.ProjectMasterId) as ProjectAssignedBy,

                (select top 1 ApproxInchargeToQcDeliveryDate from CellPhoneProject.dbo.SwQcAssignsFromQcHead where SwQcHeadAssignId=sqi.SwQcHeadAssignId and TestPhaseID=sqi.TestPhaseId and ProjectMasterId=sqi.ProjectMasterId) as ApproxInchargeToQcDeliveryDate


                from CellPhoneProject.dbo.SwQcAssignsFromQcHead sqi

                left join CellPhoneProject.dbo.CmnUsers cm on cm.CmnUserId=sqi.SwQcUserId
                left join CellPhoneProject.dbo.SwQcTestPhase sp on sp.TestPhaseID=sqi.TestPhaseID


                where sqi.SwQcHeadAssignId=0 and

                sqi.status  in ('QCCOMPLETED')
                and sqi.ProjectMasterId in (select ProjectMasterId from CellPhoneProject.dbo.SwQcAssignsFromQcHead where ProjectMasterId=sqi.ProjectMasterId)
                group by sqi.ProjectMasterId,sqi.ProjectName, sqi.SoftwareVersionName,sqi.SoftwareVersionNo,sqi.PmToQcHeadAssignTime,
                sqi.SwQcHeadToQcAssignTime,sqi.SwQcHeadToQcAssignTime,sqi.SwQcUserId,sqi.SwQcHeadAssignId,sqi.SwQcEndTime,sqi.TestPhaseID,sp.TestPhaseName,cm.UserFullName,ApproxInchargeToQcDeliveryDate,

                sqi.ProjectMasterId,sqi.Status,sqi.SwQcHeadAssignId,sqi.ProjectPmAssignId,sqi.OrderNumber,sqi.ProjectType").ToList();

            foreach (var model in query)
            {
                model.ProjectName = model.ProjectName + " (" + CommonConversion.AddOrdinal(model.OrderNumber) + " Order)";

            }

            List<SwQcAssignsFromQcHeadModel> query3 = new List<SwQcAssignsFromQcHeadModel>();
            foreach (var query1 in query)
            {

                if (!(_dbEntities.SwQcAssignsFromQcHeads.Any(i => (i.Status == "ASSIGNED" || i.Status == "PAUSED" || i.Status == "NEW")
                       && (i.SwQcHeadAssignId == query1.SwQcHeadAssignId) && i.ProjectMasterId == query1.ProjectMasterId)))
                {
                    query3.Add(query1);
                }
            }

            return query3;
        }

        public List<SwQcIssueDetailModel> GetIssueStatus()
        {
            var getSwStatus = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            select distinct case when   WaltonQcStatus is not null and  WaltonQcStatus !=''  then WaltonQcStatus  else 'Blank Status' end as WaltonQcStatus 
            from  [CellPhoneProject].[dbo].SwQcIssueDetails
            order by WaltonQcStatus asc").ToList();

            return getSwStatus;
        }

        public List<SwQcIssueDetailModel> GetTotalProjectsIssue(string projectId, string waltonQcStatus)
        {
            var getSwStatus = new List<SwQcIssueDetailModel>();

            if (waltonQcStatus == "ALL")
            {
                getSwStatus = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select distinct SwQcIssueId,SwQcHeadAssignId,ProjectName,RefernceModule,IssueSerial,SoftwareVersionNo,SoftwareVersionName,IssueScenario,ExpectedOutcome,Frequency,IssueReproducePath,Attachment,IssueType,WaltonQcComDate,WaltonQcComment,WaltonQcStatus,
                FixedVersion,SupplierComDate,SupplierStatus,SupplierComment,WaltonPmComDate,WaltonPmComment
                from CellPhoneProject.dbo.SwQcIssueDetails sii where ProjectName={0} and (SoftwareVersionName is not null and SoftwareVersionName != '')
                and IsApprovedForChina=1 and SwQcIssueId in (select  top 1  SwQcIssueId from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  and 
                SoftwareVersionNo in (select  top 1  SoftwareVersionNo from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  order by SoftwareVersionNo desc)
                order by SwQcIssueId desc) order by IssueSerial asc", projectId).ToList();
            }
            else if (waltonQcStatus == "Blank Status")
            {
                getSwStatus = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"(select distinct SwQcIssueId,SwQcHeadAssignId,ProjectName,RefernceModule,IssueSerial,SoftwareVersionNo,SoftwareVersionName,IssueScenario,ExpectedOutcome,Frequency,IssueReproducePath,Attachment,IssueType,WaltonQcComDate,WaltonQcComment,WaltonQcStatus,
                FixedVersion,SupplierComDate,SupplierStatus,SupplierComment,WaltonPmComDate,WaltonPmComment
                from CellPhoneProject.dbo.SwQcIssueDetails sii where ProjectName={0} and (SoftwareVersionName is not null and SoftwareVersionName != '')
                and IsApprovedForChina=1 and SwQcIssueId in (select  top 1  SwQcIssueId from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  and 
                SoftwareVersionNo in (select  top 1  SoftwareVersionNo from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  order by SoftwareVersionNo desc)
                order by SwQcIssueId desc)
                and  WaltonQcStatus ='')
                union
                (select distinct SwQcIssueId,SwQcHeadAssignId,ProjectName,RefernceModule,IssueSerial,SoftwareVersionNo,SoftwareVersionName,IssueScenario,ExpectedOutcome,Frequency,IssueReproducePath,Attachment,IssueType,WaltonQcComDate,WaltonQcComment,WaltonQcStatus,
                FixedVersion,SupplierComDate,SupplierStatus,SupplierComment,WaltonPmComDate,WaltonPmComment
                from CellPhoneProject.dbo.SwQcIssueDetails sii where ProjectName={0} and (SoftwareVersionName is not null and SoftwareVersionName != '')
                and IsApprovedForChina=1 and SwQcIssueId in (select  top 1  SwQcIssueId from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  and 
                SoftwareVersionNo in (select  top 1  SoftwareVersionNo from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  order by SoftwareVersionNo desc)
                order by SwQcIssueId desc)
                and  WaltonQcStatus is null)
                order by IssueSerial asc", projectId).ToList();
            }
            else if (waltonQcStatus == "SUPPLIER CAN'T FIXED")
            {
                getSwStatus =
                    _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                        @"select distinct SwQcIssueId,SwQcHeadAssignId,ProjectName,RefernceModule,IssueSerial,SoftwareVersionNo,SoftwareVersionName,IssueScenario,ExpectedOutcome,Frequency,IssueReproducePath,Attachment,IssueType,WaltonQcComDate,WaltonQcComment,WaltonQcStatus,
                FixedVersion,SupplierComDate,SupplierStatus,SupplierComment,WaltonPmComDate,WaltonPmComment
                from CellPhoneProject.dbo.SwQcIssueDetails sii where ProjectName={0} and (SoftwareVersionName is not null and SoftwareVersionName != '')
                and IsApprovedForChina=1 and SwQcIssueId in (select  top 1  SwQcIssueId from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  and 
                SoftwareVersionNo in (select  top 1  SoftwareVersionNo from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  order by SoftwareVersionNo desc)
                order by SwQcIssueId desc)
                and WaltonQcStatus ='SUPPLIER CAN''T FIXED'
                order by IssueSerial asc", projectId).ToList();
            }
            else
            {
                getSwStatus =
                   _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(
                       @"select distinct SwQcIssueId,SwQcHeadAssignId,ProjectName,RefernceModule,IssueSerial,SoftwareVersionNo,SoftwareVersionName,IssueScenario,ExpectedOutcome,Frequency,IssueReproducePath,Attachment,IssueType,WaltonQcComDate,WaltonQcComment,WaltonQcStatus,
                FixedVersion,SupplierComDate,SupplierStatus,SupplierComment,WaltonPmComDate,WaltonPmComment
                from CellPhoneProject.dbo.SwQcIssueDetails sii where ProjectName={0} and (SoftwareVersionName is not null and SoftwareVersionName != '')
                and IsApprovedForChina=1 and SwQcIssueId in (select  top 1  SwQcIssueId from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  and 
                SoftwareVersionNo in (select  top 1  SoftwareVersionNo from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii.IssueSerial and ProjectName={0} 
                and IsApprovedForChina=1 and (SoftwareVersionName is not null and SoftwareVersionName != '')  order by SoftwareVersionNo desc)
                order by SwQcIssueId desc)
                and WaltonQcStatus ={1}
                order by IssueSerial asc", projectId, waltonQcStatus).ToList();
            }


            foreach (var lasts in getSwStatus)
            {
                var lastSwNo = lasts.IssueSerial;

                var query = (from ss in _dbEntities.SwQcIssueDetails
                             where ss.ProjectName == projectId
                                 && ss.IssueSerial == lastSwNo
                             orderby ss.SoftwareVersionNo descending
                             select ss.SoftwareVersionNo).FirstOrDefault();

                lasts.LastSoftwareVersionNo = Convert.ToInt32(query);
            }

            return getSwStatus;
        }

        #endregion

        #region Save Incentive
        public string SaveSwIncentive_Issue(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_Issue();

                model.EmployeeCode = insResult.EmployeeCode;
                model.ProjectId = insResult.ProjectId;
                model.SwQcHeadAssignId = insResult.SwQcHeadAssignId;
                model.TestPhaseId = insResult.TestPhaseId;
                model.SoftwareVersionNumber = insResult.SoftwareVersionNumber;
                model.ProjectName = insResult.ProjectName;
                model.SoftwareVersionName = insResult.SoftwareVersionName;
                model.IncentiveClaimArea = insResult.IncentiveClaimArea;
                model.AssignedPersons = insResult.AssignedPersons;
                model.Critical = insResult.Critical;
                model.Major = insResult.Major;
                model.Minor = insResult.Minor;
                model.BaseAmount = insResult.BaseAmount;
                model.StartDate = insResult.StartDate;
                model.EndDate = insResult.EndDate;
                model.DateDiffWithHoliday = insResult.DateDiffWithHoliday;
                model.Timeline = insResult.Timeline;

                model.IssueAmount = insResult.IssueAmount;
                model.TotalAmount = insResult.TotalAmount;
                model.ParticularPersonIncentive = insResult.ParticularPersonIncentive;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_Issue.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_AutoPenalties(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_Penalties();

                model.EmployeeCode = insResult.EmployeeCode;
                model.ProjectName = insResult.ProjectName;
                model.ReleaseDate = insResult.ReleaseDate;
                model.TotalIssuePercentage = insResult.TotalIssuePercentage;
                model.AssignedPersons = insResult.AssignedPersons;
                model.TotalAmount = insResult.TotalAmount;
                model.TotalPenalties = insResult.TotalPenalties;
                model.PenaltiesPercentage = insResult.PenaltiesPercentage;
                model.PreviousDeductedAmount = insResult.PreviousDeductedAmount;
                model.ParticularPersonsPenalties = insResult.PerPersonPenalties;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_Penalties.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_ExtraWork(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_ExtraWork();

                model.EmployeeCode = insResult.EmployeeCode;
                model.NewInnovationId = insResult.NewInnovationId;
                model.ProjectName = insResult.ProjectName;
                model.AssignedBy = insResult.AssignedBy;
                model.Description = insResult.Description;
                model.WorkType = insResult.WorkType;
                model.EffectiveDate = insResult.EffectiveDate;
                model.Persons = insResult.Persons;
                model.BaseAmount = insResult.BaseAmount;
                model.TotalAmount = insResult.TotalAmount;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_ExtraWork.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_PersonalUse(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_PersonalUse();

                model.EmployeeCode = insResult.EmployeeCode;
                model.ProjectId = insResult.ProjectId;
                model.SwQcHeadAssignId = insResult.SwQcHeadAssignId;
                model.TestPhaseId = insResult.TestPhaseId;
                model.SoftwareVersionNumber = insResult.SoftwareVersionNumber;
                model.ProjectName = insResult.ProjectName;
                model.SoftwareVersionName = insResult.SoftwareVersionName;
                model.IncentiveClaimArea = insResult.IncentiveClaimArea;
                model.Critical = insResult.Critical;
                model.Major = insResult.Major;
                model.Minor = insResult.Minor;
                model.TotalAmount = insResult.TotalAmount;
                model.ParticularPersonIncentive = insResult.ParticularPersonIncentive;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_PersonalUse.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_Cts(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_CTS();

                model.EmployeeCode = insResult.EmployeeCode;
                model.ProjectId = insResult.ProjectId;
                model.SwQcHeadAssignId = insResult.SwQcHeadAssignId;
                model.TestPhaseId = insResult.TestPhaseId;
                model.SoftwareVersionNumber = insResult.SoftwareVersionNumber;
                model.ProjectName = insResult.ProjectName;
                model.SoftwareVersionName = insResult.SoftwareVersionName;
                model.IncentiveClaimArea = insResult.IncentiveClaimArea;
                model.Critical = insResult.Critical;
                model.Major = insResult.Major;
                model.Minor = insResult.Minor;
                model.BaseAmount = insResult.BaseAmount;
                model.TotalAmount = insResult.TotalAmount;
                model.ParticularPersonIncentive = insResult.ParticularPersonIncentive;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_CTS.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_FieldByHead(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_FieldByHead();

                model.EmployeeCode = insResult.EmployeeCode;
                model.ProjectId = insResult.ProjectId;
                model.SwQcHeadAssignId = insResult.SwQcHeadAssignId;
                model.TestPhaseId = insResult.TestPhaseId;
                model.SoftwareVersionNumber = insResult.SoftwareVersionNumber;
                model.ProjectName = insResult.ProjectName;
                model.SoftwareVersionName = insResult.SoftwareVersionName;
                model.IncentiveClaimArea = insResult.IncentiveClaimArea;
                model.AssignedPersons = insResult.AssignedPersons;
                model.Critical = insResult.Critical;
                model.BaseAmount = insResult.BaseAmount;
                model.StartDate = insResult.StartDate;
                model.EndDate = insResult.EndDate;
                model.DateDiffWithHoliday = insResult.DateDiffWithHoliday;
                model.Timeline = insResult.Timeline;

                model.TotalAmount = insResult.TotalAmount;
                model.ParticularPersonIncentive = insResult.ParticularPersonIncentive;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_FieldByHead.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_Others(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_Others();

                model.EmployeeCode = insResult.EmployeeCode;
                model.OthersType = insResult.OthersType;
                model.ProjectName = insResult.ProjectName;
                model.AddedAmount = insResult.AddedAmount;
                model.AddAmountRemarks = insResult.AddAmountRemarks;
                model.Deduction = insResult.Deduction;
                model.DeductionRemarks = insResult.DeductionRemarks;
                model.FinalAmount = insResult.FinalAmount;
                model.ParticularPersonIncentive = insResult.FinalAmount;
                model.TotalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                model.AssignedPersons = 0;
                model.Critical = 0;
                model.Major = 0;
                model.Minor = 0;
                model.BaseAmount = 0;
                model.IssueAmount = 0;


                _dbEntities.SwIncentive_Others.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_Penalties(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_Penalties();

                model.EmployeeCode = insResult.EmployeeCode;
                model.PenaltiesReason = insResult.PenaltiesReason;
                model.ProjectName = insResult.ProjectName;
                model.TotalPenalties = insResult.TotalPenalties;
                model.AssignedPersons = insResult.AssignedPersons;
                model.ParticularPersonsPenalties = insResult.ParticularPersonsPenalties;
                model.PenaltiesRemarks = insResult.PenaltiesRemarks;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_Penalties.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_Incentive(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new Incentive();
                model.UserId = insResult.EmployeeCode;
                model.AddedAmount = insResult.FinalAddedAmount;
                model.Remarks = insResult.FinalAddedRemarks;
                model.AmountDeduction = insResult.FinalDeduction;
                model.DeductionRemarks = insResult.FinalDeductionRemarks;

                if (insResult.RoleName == "QC")
                {
                    //model.TotalAmount = insResult.FinalTotalAmount;//with new reward and penalties
                    model.TotalAmount = insResult.HundredPercentIssueAmount; //with new reward and penalties
                    model.ThisMonthAmount = insResult.FinalIssueAmount; // total issue amount
                    model.Amount = insResult.FinalIssueAmount + insResult.FinalAddedAmount - insResult.FinalDeduction;
                    model.TotalIncentive = insResult.FinalTotalAmount;
                    //with new reward and penalties and add amount and deduction

                }
                else
                {
                    //model.TotalAmount = insResult.FinalTotalAmount;//with new reward and penalties
                    model.TotalAmount = insResult.FinalTotalAmount;//with new reward and penalties
                    model.ThisMonthAmount = insResult.FinalIssueAmount;// total issue amount
                    model.Amount = insResult.FinalIssueAmount + insResult.FinalAddedAmount - insResult.FinalDeduction;
                    model.TotalIncentive = insResult.FinalTotalAmount;//with new reward and penalties and add amount and deduction

                }

                model.TotalReward = insResult.PerPersonReward;
                model.Reward = insResult.PerPersonReward;

                model.TotalPenalties = insResult.PerPersonPenalties;
                model.Penalties = insResult.PerPersonPenalties;

                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                if (insResult.RoleName == "QC")
                {
                    model.DepartmentName = "QC";
                }
                else if (insResult.RoleName == "BRAND")
                {
                    model.DepartmentName = "BRAND";
                }
                else if (insResult.RoleName == "QCHEAD")
                {
                    model.DepartmentName = "QCHEAD";
                }
                else if (insResult.RoleName == "DEPUTY")
                {
                    model.DepartmentName = "DEPUTY";
                }
                _dbEntities.Incentives.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_BrandIssue(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_BrandIssues();


                model.TotalAmount = insResult.TotalAmountForBrand;
                model.Percentage = insResult.BrandIssueAmountPercentage;
                model.FinalAmount = insResult.BrandIssuebrandFinalAmount;
                model.AddAmountRemarks = insResult.BrandIssuebrandRemarks;

                model.EmployeeCode = insResult.EmployeeCode;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_BrandIssues.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveSwIncentive_BrandCost(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_BrandCost();

                model.Cost = insResult.BrandCost;
                model.Percentage = insResult.BrandCostPercentage;
                model.Incentive = insResult.BrandCostPerPersonIncentive;
                model.AddedAmount = insResult.BrandCostAddedAmount;
                model.AddAmountRemarks = insResult.BrandCostAddedRemarks;
                model.Deduction = insResult.BrandCostDeduction;
                model.DeductionRemarks = insResult.BrandCostDeductionRemarks;
                model.FinalAmount = insResult.BrandCostFinalAmount;

                model.EmployeeCode = insResult.EmployeeCode;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_BrandCost.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public string SaveQcAllMemberRewardsAndPenalties(int monNum, string year)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            long yearIds;
            long.TryParse(year, out yearIds);
            _dbEntities.Database.CommandTimeout = 6000;
            _dbRbEntites.Database.CommandTimeout = 6000;
            //sales out
            #region sales out comment
            _dbEntities.Database.CommandTimeout = 6000;
            //            string proEv1 = string.Format(@"select distinct F.ProjectMasterID,F.ProjectModel,F.Orders,F.RewardAmount,cast(F.TeamMember as int) as TeamMember,F.TeamAmount as TeamReward,(F.TeamAmount/F.TeamMember) as PerPersonReward,F.DeputyAmount,F.HeadAmount,
            //			F.WarehouseEntryDate,F.ExtendedWarehouseDate,F.EffectiveDays,F.OrderQuantity,F.TotalSalesOut,F.ExistedPercentage,F.MonNum,cast(F.Year as bigint) as Year,IncentiveType='SalesOut',cast(PerPersonPenalties as bigint) as PerPersonPenalties	
            //            from 
            //            (
            //            select E.ProjectmasterID,E.ProjectModel,E.Orders,cast(E.RewardAmount as bigint) as RewardAmount,
            //            (select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember
            //            ,cast((E.RewardAmount*75)/100 as bigint) as TeamAmount,cast((E.RewardAmount*10)/100 as bigint) as DeputyAmount,cast((E.RewardAmount*15)/100 as bigint) as HeadAmount
            //			,E.WarehouseEntryDate,E.ExtendedWarehouseDate,E.EffectiveDays,E.OrderQuantity,E.TotalSalesOut,E.ExistedPercentage,E.MonNum,E.Year,PerPersonPenalties=0
            //            from
            //            (
            // 	            SELECT cast(D.ProjectmasterId as bigint) as ProjectmasterId,D.ProjectModel,D.Orders,D.tblBarcodeOrder ,D.WarehouseEntryDate,D.ExtendedWarehouseDate,cast(D.EffectiveDays as int) as EffectiveDays,cast(D.OrderQuantity as bigint) as OrderQuantity, cast(D.TotalTblBarcodeIMEI as bigint) as TotalTblBarcodeIMEI,
            //                cast(D.TotalSalesOut as bigint) as TotalSalesOut,cast(D.RewardPercentage as bigint) as RewardPercentage,cast(D.ExistedPercentage as int) as ExistedPercentage,
            //	            case when D.ExistedPercentage>=D.RewardPercentage then 5000 else 0 end as RewardAmount,D.MonNum,D.Year
            //	            FROM
            //	            (
            //		            select C.ProjectmasterId,C.ProjectModel,C.Orders,C.tblBarcodeOrder,C.WarehouseEntryDate,C.ExtendedWarehouseDate,C.EffectiveDays,C.OrderQuantity, C.TotalTblBarcodeIMEI,C.TotalSalesOut,C.RewardPercentage,
            //		            ((100 * C.TotalSalesOut)/OrderQuantity) as ExistedPercentage,IsFinalShipment,C.MonNum,C.Year  from
            //		            ( 
            //			            select B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,B.ExtendedWarehouseDate,EffectiveDays=120, sum(TotalTblBarcodeIMEI) as TotalTblBarcodeIMEI,sum(TotalSalesOut) as TotalSalesOut,RewardPercentage=95,IsFinalShipment,B.OrderQuantity,B.MonNum,B.Year  from
            //				            ( 
            //					            select A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.ExtendedWarehouseDate, count(A.Barcode) as TotalTblBarcodeIMEI,case when A.TddBarcode is not null and A.TddBarcode !='' then 1 else 0 end as TotalSalesOut,IsFinalShipment,A.OrderQuantity,A.MonNum,A.Year  from
            //							            (
            //								            select distinct proM.ProjectMasterId,proM.ProjectModel,												
            //								            proM.Orders,proM.ShipmentType,proM.WarehouseEntryDate,proM.ExtendedWarehouseDate,proM.ShipmentPercentage,proM.IsFinalShipment,
            //								            tbl.Model,tbl.Barcode,tbl.Barcode2,tbl.DateAdded,tbl.UpdatedBy as tblBarcodeOrder,tdd.Barcode as TddBarcode,proM.OrderQuantity,proM.MonNum, proM.Year
            //											 from 
            //							            (
            //									            select distinct ps.ProjectMasterId,pdd.ProjectModel,	
            //									            ('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,ps.ShipmentType,ps.WarehouseEntryDate,DATEADD(day, 120, ps.WarehouseEntryDate) AS ExtendedWarehouseDate,ps.ShipmentPercentage,ps.IsFinalShipment,pdd.OrderQuantity
            //												,DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate)) as MonNum, DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate)) as Year
            //									            FROM [CellPhoneProject].[dbo].[ProjectOrderShipments] ps 
            //									            left join CellphoneProject.dbo.ProjectMasters pm on ps.ProjectMasterId=pm.ProjectMasterId
            //									            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pm.ProjectMasterID=pdd.ProjectMasterID
            //									            where DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate))={1} and pm.IsActive=1 and
            //									            ps.WarehouseEntryDate in (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)
            //							            )proM
            //							            left join [RBSYNERGY].[dbo].[tblBarCodeInv] tbl on proM.ProjectModel=tbl.Model and RTRIM(tbl.UpdatedBy)=RTRIM(proM.Orders)
            //							            left join [RBSYNERGY].[dbo].tblDealerDistributionDetails tdd on tbl.Barcode =tdd.Barcode and
            //							            tdd.DistributionDate between proM.WarehouseEntryDate and  DATEADD(day, 120, proM.WarehouseEntryDate)
            //
            //							            where proM.ProjectModel=tbl.Model 
            //						            )A 
            //					            group by A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.Barcode,A.TddBarcode,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,A.MonNum,A.Year
            //					            )B
            //					            group by B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,ExtendedWarehouseDate,IsFinalShipment,B.OrderQuantity,B.MonNum,B.Year
            //			            )C 
            //	            )D 
            //            )E 
            //            where E.RewardAmount>0			
            //	    )F order by ProjectModel asc", monNum, yearIds);

            //            var proEvent1 = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(proEv1).ToList();

            //            foreach (var project in proEvent1)
            //            {

            //                var items = new SwIncentive_AllMembersRewardAndPenalties();
            //                items.ProjectMasterID = project.ProjectMasterID;
            //                items.ProjectModel = project.ProjectModel;
            //                items.Orders = project.Orders;
            //                items.SourcingType = project.SourcingType;
            //                items.ShipmentType = project.ShipmentType;
            //                items.TeamMember = project.TeamMember;
            //                items.RewardAmount = project.RewardAmount;
            //                items.TeamReward = project.TeamReward;
            //                items.PerPersonReward = project.PerPersonReward;
            //                items.DeputyAmount = project.DeputyAmount;
            //                items.HeadAmount = project.HeadAmount;
            //                items.DeductedAmount = project.DeductedAmount;
            //                items.TeamPenalties = project.TeamPenalties;
            //                items.PerPersonPenalties = project.PerPersonPenalties;
            //                items.DeputyPenalties = project.DeputyPenalties;
            //                items.HeadPenalties = project.HeadPenalties;
            //                items.WarehouseEntryDate = project.WarehouseEntryDate;
            //                items.ExtendedWarehouseDate = project.ExtendedWarehouseDate;
            //                items.LSD = project.LSD;
            //                items.VesselDate = project.VesselDate;
            //                items.LsdVsVesselDiffForDeduct = project.LsdVsVesselDiffForDeduct;
            //                items.LsdVsVesselDiffForReward = project.LsdVsVesselDiffForReward;
            //                items.EffectiveDays = project.EffectiveDays;
            //                items.OrderQuantity = project.OrderQuantity;
            //                items.TotalSalesOut = project.TotalSalesOut;
            //                items.TotalProductionQuantity = project.TotalProductionQuantity;
            //                items.ExistedPercentage = project.ExistedPercentage;
            //                items.MonNum = project.MonNum;
            //                items.Year = project.Year;
            //                items.IncentiveType = project.IncentiveType;
            //                items.Added = userId;
            //                items.AddedDate = DateTime.Now;
            //                _dbEntities.SwIncentive_AllMembersRewardAndPenalties.Add(items);
            //                _dbEntities.SaveChanges();
            //            }
            #endregion
            // production//
            string proEv2 = string.Format(@"  select E.ProjectMasterID,E.ProjectModel,E.Orders,E.SourcingType,cast(E.RewardAmount as bigint) as RewardAmount,cast(E.TeamMember as int) as TeamMember,cast(E.TeamAmount as bigint) as TeamReward,cast((E.TeamAmount/E.TeamMember) as bigint) as PerPersonReward,cast(E.PerPersonPenalties as bigint) as PerPersonPenalties,
		 cast(E.DeputyAmount as bigint) as DeputyAmount,cast(E.HeadAmount as bigint) as HeadAmount,
		 E.WarehouseEntryDate,E.ExtendedWarehouseDate,cast(E.EffectiveDays as int) as EffectiveDays,cast(E.OrderQuantity as bigint) as OrderQuantity,cast(E.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(E.ExistedPercentage as int) as ExistedPercentage,cast(E.MonNum as int) as MonNum,E.Year,E.IncentiveType
         from 
          (
			select D.ProjectMasterID,D.ProjectModel,D.SourcingType,D.WpmsOrders as Orders,(select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember,D.RewardAmount,
			cast((D.RewardAmount*12)/100 as bigint) as DeputyAmount,cast((D.RewardAmount*18)/100 as bigint) as HeadAmount,
            cast((D.RewardAmount*70)/100 as bigint) as TeamAmount,D.WarehouseEntryDate,D.ExtendedWarehouseDate,D.EffectiveDays,D.OrderQuantity,D.TotalProductionQuantity,D.ExistedPercentage,D.MonNum,D.Year,IncentiveType='Production',PerPersonPenalties=0
            from
            (
                select distinct cast(C.ProjectMasterID as bigint) as ProjectMasterID,C.ProjectModel,C.SourcingType,C.WpmsOrders,C.WarehouseEntryDate,C.ExtendedWarehouseDate,cast(C.OrderQuantity as bigint) as OrderQuantity,cast(C.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(C.EffectiveDays as int) as EffectiveDays,cast(C.RewardPercentage as int) as RewardPercentage,cast(C.ExistedPercentage as int) as ExistedPercentage,
                case when C.ExistedPercentage>=C.RewardPercentage then 2100 else 0 end as RewardAmount,C.MonNum,C.Year
                from
	                (
		            select B.ProjectMasterID,B.ProjectModel,B.SourcingType,B.WpmsOrders,B.WarehouseEntryDate,B.ExtendedWarehouseDate,B.OrderQuantity,B.TotalProductionQuantity,B.EffectiveDays,B.RewardPercentage,
		            ((100 * B.TotalProductionQuantity)/OrderQuantity) as ExistedPercentage,B.IsFinalShipment,B.MonNum,cast(B.Year as bigint) as Year
			                from 
				                (
					                select A.ProjectMasterID,A.ProjectModel,A.SourcingType,A.WpmsOrders,A.WarehouseEntryDate,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,count(tbi.Barcode) as TotalProductionQuantity,RewardPercentage=95,A.EffectiveDays,A.MonNum,A.Year
					                from 
						            (
							            select AA.ProjectMasterID,AA.ProjectModel,AA.SourcingType,AA.WpmsOrders,AA.WarehouseEntryDate,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate) as ExtendedWarehouseDate,AA.IsFinalShipment,AA.OrderQuantity,AA.EffectiveDays,
										DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate)) as MonNum, DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate)) as Year from
							            (
								            select distinct ps.ProjectMasterID,pdd.ProjectModel,																				
  							                pm.SourcingType,('Order '+ cast(pm.OrderNuber as varchar(10))) as WpmsOrders,ps.WarehouseEntryDate,ps.IsFinalShipment,pdd.OrderQuantity,case when pm.SourcingType like 'SKD' then 30  when  pm.SourcingType like 'CKD' then 45 end as EffectiveDays
								            from [CellPhoneProject].[dbo].[ProjectOrderShipments] ps
								            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                            left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
								            where pm.IsActive=1	and				
								            ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)											
							            )AA where DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={1}
						            )A
						            left join RBSYNERGY.dbo.tblBarcodeInv tbi on tbi.UpdatedBy=A.WpmsOrders  and tbi.Model=A.ProjectModel
						            where tbi.Model=A.ProjectModel and PrintDate between A.WarehouseEntryDate and DATEADD(day, A.EffectiveDays, A.WarehouseEntryDate)
						            group by  A.ProjectMasterID,A.ProjectModel,A.WpmsOrders,A.WarehouseEntryDate,A.IsFinalShipment,A.OrderQuantity,A.SourcingType,A.EffectiveDays,A.ExtendedWarehouseDate,A.MonNum,A.Year
				            )B

                    )C  
	  
            )D	 where D.RewardAmount>0)E  order by ProjectModel asc", monNum, yearIds);

            var proEvent2 = _dbRbEntites.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(proEv2).ToList();

            foreach (var project in proEvent2)
            {

                var items = new SwIncentive_AllMembersRewardAndPenalties();
                items.ProjectMasterID = project.ProjectMasterID;
                items.ProjectModel = project.ProjectModel;
                items.Orders = project.Orders;
                items.SourcingType = project.SourcingType;
                items.ShipmentType = project.ShipmentType;
                items.TeamMember = project.TeamMember;
                items.RewardAmount = project.RewardAmount;
                items.TeamReward = project.TeamReward;
                items.PerPersonReward = project.PerPersonReward;
                items.DeputyAmount = project.DeputyAmount;
                items.HeadAmount = project.HeadAmount;
                items.DeductedAmount = project.DeductedAmount;
                items.TeamPenalties = project.TeamPenalties;
                items.PerPersonPenalties = project.PerPersonPenalties;
                items.DeputyPenalties = project.DeputyPenalties;
                items.HeadPenalties = project.HeadPenalties;
                items.WarehouseEntryDate = project.WarehouseEntryDate;
                items.ExtendedWarehouseDate = project.ExtendedWarehouseDate;
                items.LSD = project.LSD;
                items.VesselDate = project.VesselDate;
                items.LsdVsVesselDiffForDeduct = project.LsdVsVesselDiffForDeduct;
                items.LsdVsVesselDiffForReward = project.LsdVsVesselDiffForReward;
                items.EffectiveDays = project.EffectiveDays;
                items.OrderQuantity = project.OrderQuantity;
                items.TotalSalesOut = project.TotalSalesOut;
                items.TotalProductionQuantity = project.TotalProductionQuantity;
                items.ExistedPercentage = project.ExistedPercentage;
                items.MonNum = project.MonNum;
                items.Year = project.Year;
                items.IncentiveType = project.IncentiveType;
                items.Added = userId;
                items.AddedDate = DateTime.Now;
                _dbEntities.SwIncentive_AllMembersRewardAndPenalties.Add(items);
                _dbEntities.SaveChanges();
            }
            //LsdVsVessel//
            #region LsdVsVessel comment
            //            string proEv3 = string.Format(@"select  B.ProjectMasterID,B.ProjectModel ,B.Orders,ShipmentType,cast(RewardAmount as bigint) as RewardAmount,cast(B.TeamMember as int) as TeamMember,cast(B.TeamReward as bigint) as TeamReward,cast((B.TeamReward/B.TeamMember) as bigint) as PerPersonReward,
            //	  cast((B.RewardAmount*10)/100 as bigint) as DeputyAmount,cast((B.RewardAmount*15)/100 as bigint) as HeadAmount,
            //	  cast(DeductedAmount as bigint) as DeductedAmount,cast(B.TeamPenalties as bigint) as TeamPenalties,(B.TeamPenalties/B.TeamMember) as PerPersonPenalties,cast((B.DeductedAmount*10)/100 as bigint) as DeputyPenalties,cast((B.DeductedAmount*15)/100 as bigint) as HeadPenalties,
            //	  LSD,VesselDate,cast(LsdVsVesselDiffForDeduct as int) as LsdVsVesselDiffForDeduct,cast(LsdVsVesselDiffForReward as int) as LsdVsVesselDiffForReward,cast(MonNum as int) as MonNum,cast(Year as bigint) as Year,IncentiveType='LsdVsVessel'      
            //             from
            //            (
            //            select distinct cast(A.ProjectMasterId as bigint) as ProjectMasterId,A.ProjectName as ProjectModel,cast(A.Orders as varchar(10)) as Orders,
            //            (select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember,
            //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) as bigint) as DeductedAmount,cast((A.RewardPoint * A.LsdVsVesselDiffForReward) as bigint) as RewardAmount,  
            //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*75/100 as bigint) as TeamReward,		  
            //			cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*75/100 as bigint) as TeamPenalties,LSD,VesselDate,LsdVsVesselDiffForDeduct,LsdVsVesselDiffForReward,
            //			ShipmentType,MonNum,Year      
            //            from 
            //            (
            //		            select distinct ppf.ProjectMasterId,pm.ProjectName,			       								
            //		            ppa.SwQcUserId,pm.ProjectType,('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,pm.ApproxShipmentDate as LSD,ps.VesselDate,
            //		            case when pm.ApproxShipmentDate<=ps.VesselDate then (DATEDIFF(day, pm.ApproxShipmentDate, ps.VesselDate)) else 0 end as LsdVsVesselDiffForDeduct,
            //		            case when pm.ApproxShipmentDate>=ps.VesselDate then (DATEDIFF(day, ps.VesselDate, pm.ApproxShipmentDate)) else 0 end as LsdVsVesselDiffForReward,
            //		            ps.ShipmentType,DeductPoint=100,RewardPoint=500,DATEPART(mm,ps.VesselDate) as MonNum, DATENAME(YEAR,ps.VesselDate) as Year
            //
            //		            from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
            //		            left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
            //		            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
            //		            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
            //                    left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
            //		            where pm.IsActive=1 and
            //		            pm.ApproxShipmentDate = (select  top 1  ApproxShipmentDate from CellPhoneProject.dbo.ProjectMasters  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
            //		            and ps.VesselDate= (select  top 1  VesselDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
            //		            and DATEPART(mm,ps.VesselDate)={0} and  DATENAME(YEAR,ps.VesselDate)={1}
            //            )A 		
            //          )B where (B.DeductedAmount+B.RewardAmount)>0 order by ProjectModel asc", monNum, yearIds);

            //            var proEvent3 = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(proEv3).ToList();

            //            foreach (var project in proEvent3)
            //            {

            //                var items = new SwIncentive_AllMembersRewardAndPenalties();
            //                items.ProjectMasterID = project.ProjectMasterID;
            //                items.ProjectModel = project.ProjectModel;
            //                items.Orders = project.Orders;
            //                items.SourcingType = project.SourcingType;
            //                items.ShipmentType = project.ShipmentType;
            //                items.TeamMember = project.TeamMember;
            //                items.RewardAmount = project.RewardAmount;
            //                items.TeamReward = project.TeamReward;
            //                items.PerPersonReward = project.PerPersonReward;
            //                items.DeputyAmount = project.DeputyAmount;
            //                items.HeadAmount = project.HeadAmount;
            //                items.DeductedAmount = project.DeductedAmount;
            //                items.TeamPenalties = project.TeamPenalties;
            //                items.PerPersonPenalties = project.PerPersonPenalties;
            //                items.DeputyPenalties = project.DeputyPenalties;
            //                items.HeadPenalties = project.HeadPenalties;
            //                items.WarehouseEntryDate = project.WarehouseEntryDate;
            //                items.ExtendedWarehouseDate = project.ExtendedWarehouseDate;
            //                items.LSD = project.LSD;
            //                items.VesselDate = project.VesselDate;
            //                items.LsdVsVesselDiffForDeduct = project.LsdVsVesselDiffForDeduct;
            //                items.LsdVsVesselDiffForReward = project.LsdVsVesselDiffForReward;
            //                items.EffectiveDays = project.EffectiveDays;
            //                items.OrderQuantity = project.OrderQuantity;
            //                items.TotalSalesOut = project.TotalSalesOut;
            //                items.TotalProductionQuantity = project.TotalProductionQuantity;
            //                items.ExistedPercentage = project.ExistedPercentage;
            //                items.MonNum = project.MonNum;
            //                items.Year = project.Year;
            //                items.IncentiveType = project.IncentiveType;
            //                items.Added = userId;
            //                items.AddedDate = DateTime.Now;
            //                _dbEntities.SwIncentive_AllMembersRewardAndPenalties.Add(items);
            //                _dbEntities.SaveChanges();
            //            }

            #endregion

            //Pm Clearance Date Vs Lsd
            string proEv3 = string.Format(@"
            select RawMaterialId,ProjectMasterID,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,FinalAmount,TeamMember,TeamReward,TeamPenalties,DeputyReward,
            DeputyPenalties,HeadReward,HeadPenalties
            from
            (	
	            select RawMaterialId,ProjectMasterId,ProjectName,cast(Orders as int) as Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,cast(FinalAmount as decimal(18,2)) as FinalAmount,TeamMember,cast((Reward)*70/100 as decimal(18,2)) as TeamReward,cast((RealPenalties)*70/100 as decimal(18,2)) as TeamPenalties,
	            cast((Reward)*12/100 as decimal(18,2)) as DeputyReward,cast((RealPenalties)*12/100 as decimal(18,2)) as DeputyPenalties,cast((Reward)*18/100 as decimal(18,2)) as HeadReward,cast((RealPenalties)*18/100 as decimal(18,2)) as HeadPenalties
	            from
	            (	
		            select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,cast(Reward as decimal(18,2)) as Reward,cast(RealPenalties as decimal(18,2)) as RealPenalties,
		            case when Reward=0 then RealPenalties when RealPenalties=0 then Reward end as FinalAmount,TeamMember	
		            from
		            (
			            select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,-Penalties1 as RealPenalties,(select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember
			            from
			            ( 
				            select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,DaysBeforeLsd*100 as Reward,DaysAfterLsd*70 as Penalties1		
				            from
				            (
					            select rmi.RawMaterialId,rmi.ProjectMasterId,rmi.ProjectName,rmi.Orders,rmi.ProjectType,rmi.PoCategory,rmi.PoQuantity,rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate as LSD,
					            case when rmi.ProjectManagerClearanceDate<pm.ApproxShipmentDate then DATEDIFF(day, rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate) else 0 end as DaysBeforeLsd,
					            case when rmi.ProjectManagerClearanceDate>pm.ApproxShipmentDate then DATEDIFF(day,pm.ApproxShipmentDate, rmi.ProjectManagerClearanceDate) else 0 end as DaysAfterLsd

					            from [CellPhoneProject].[dbo].[RawMaterialInspection] rmi
					            left join [CellPhoneProject].[dbo].ProjectMasters pm on rmi.ProjectMasterId=pm.ProjectmasterId			
			 
					            where pm.IsActive=1 and DATEPART(mm,rmi.ProjectManagerClearanceDate)={0} and DATENAME(YEAR,rmi.ProjectManagerClearanceDate)={1} 
					            and rmi.ProjectManagerClearanceDate = (select top 1 rr.ProjectManagerClearanceDate from [CellPhoneProject].[dbo].[RawMaterialInspection] rr where rr.ProjectName=rmi.ProjectName and rr.Orders=rmi.Orders order by RawMaterialId desc)  
				
				            )A
			            )B 
		            )C 
	            )D
            )E  order by ProjectName asc
            ", monNum, yearIds);

            var proEvent3 = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(proEv3).ToList();

            foreach (var project in proEvent3)
            {

                var items = new SwIncentive_PmShipmentClearanceVsLsd();
                items.ProjectMasterId = project.ProjectMasterID;
                items.ProjectName = project.ProjectName;
                items.Orders = Convert.ToInt32(project.Orders);
                items.ProjectType = project.ProjectType;
                items.PoCategory = project.PoCategory;
                items.ProjectManagerClearanceDate = project.ProjectManagerClearanceDate;
                items.DaysBeforeLsd = project.DaysBeforeLsd;
                items.DaysAfterLsd = project.DaysAfterLsd;
                items.Reward = project.Reward;
                items.RealPenalties = project.RealPenalties;
                items.FinalAmount = project.FinalAmount;
                items.TeamMember = project.TeamMember;
                items.TeamReward = project.TeamReward;
                items.TeamPenalties = project.TeamPenalties;
                items.DeputyReward = project.DeputyReward;
                items.DeputyPenalties = project.DeputyPenalties;
                items.HeadReward = project.HeadReward;
                items.HeadPenalties = project.HeadPenalties;
                items.MonNum = project.MonNum;
                items.Year = project.Year;
                items.Added = userId;
                items.AddedDate = DateTime.Now;
                _dbEntities.SwIncentive_PmShipmentClearanceVsLsd.Add(items);
                _dbEntities.SaveChanges();
            }

            return "ok";
        }

        public bool GetAll_QcMembersMonthlyIncentiveData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_Issue] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetExtraWorkData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_ExtraWork] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetPersonalUseData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_PersonalUse] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetCtsIncentiveData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_Cts] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetFieldByHeadData(string employeeCode, int monNum, string year)
        {

            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_FieldByHead] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetOthersData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_Others] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetPenaltiesData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_Penalties] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetIncentiveData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,UserId from [CellPhoneProject].[dbo].[Incentive] where UserId='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetBrandIssuesData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_BrandIssues] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public bool GetBrandCostData(string employeeCode, int monNum, string year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<Custom_Sw_IncentiveModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_BrandCost] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public List<IncentiveModel> GetHeadDeputyIncentiveList(string empCode, int mons, string year, string roles)
        {
            long Years;
            long.TryParse(year, out Years);
            List<IncentiveModel> query = new List<IncentiveModel>();

            if (roles == "QCHEAD")
            {
                //                 query = _dbEntities.Database.SqlQuery<IncentiveModel>(@"select case when cast((a.TeamIncentive1+a.TeamIncentive2) as decimal(10,2)) is null then 0 else 
                //                cast((a.TeamIncentive1+a.TeamIncentive2) as decimal(10,2)) end as TeamIncentive,
                //                case when 
                //                cast(a.SwPercentage as int) is null then 0 else cast(a.SwPercentage as int) end as SwPercentage, 
                //                case when cast((((a.TeamIncentive1+a.TeamIncentive2) * a.SwPercentage)/100) as decimal(10,2)) is null then 0 else
                //                cast((((a.TeamIncentive1+a.TeamIncentive2) * a.SwPercentage)/100) as decimal(10,2))  end as SwIncentive
                //                from 
                //                (select case when sum (inc.ThisMonthAmount)  is null then 0 else  sum (inc.ThisMonthAmount)  end as TeamIncentive1,
                //                case when (select FinalAmount from CellPhoneProject.dbo.[SwIncentive_BrandIssues] where MonNum={0} and Year={1}) is null then 0 else
                //                (select FinalAmount from CellPhoneProject.dbo.[SwIncentive_BrandIssues] where MonNum={0} and Year={1}) end as TeamIncentive2
                //                ,(select Percentage from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where RegularClaimArea='QCHEAD') as SwPercentage
                //                FROM [CellPhoneProject].[dbo].Incentive inc 
                //                where inc.DepartmentName in ('QC') and inc.MonNum={0} and Year={1}) a", mons, Years, roles).ToList();

                query = _dbEntities.Database.SqlQuery<IncentiveModel>(@"select case when cast((a.TeamIncentive1) as decimal(10,2)) is null then 0 else cast((a.TeamIncentive1) as decimal(10,2)) end as TeamIncentive,   case when 
                cast(a.SwPercentage as int) is null then 0 else cast(a.SwPercentage as int) end as SwPercentage, 
                case when cast((((a.TeamIncentive1) * a.SwPercentage)/100) as decimal(10,2)) is null then 0 else cast((((a.TeamIncentive1) * a.SwPercentage)/100) as decimal(10,2))  end as SwIncentive
                from 
                (

	                select case when sum (inc.TotalAmount)  is null then 0 else  sum (inc.TotalAmount)  end as TeamIncentive1,               
	                (select Percentage from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where RegularClaimArea='QCHEAD' and IsActive=1) as SwPercentage
	                FROM [CellPhoneProject].[dbo].Incentive inc 
	                where inc.DepartmentName in ('QC') and inc.MonNum={0} and Year={1}
				
                ) a", mons, Years, roles).ToList();

            }
            else if (roles == "DEPUTY")
            {

                //                query = _dbEntities.Database.SqlQuery<IncentiveModel>(@"select case when cast((a.TeamIncentive1+a.TeamIncentive2) as decimal(10,2)) is null then 0 else 
                //                cast((a.TeamIncentive1+a.TeamIncentive2) as decimal(10,2)) end as TeamIncentive,
                //                case when 
                //                cast(a.SwPercentage as int) is null then 0 else cast(a.SwPercentage as int) end as SwPercentage, 
                //                case when cast((((a.TeamIncentive1+a.TeamIncentive2) * a.SwPercentage)/100) as decimal(10,2)) is null then 0 else
                //                cast((((a.TeamIncentive1+a.TeamIncentive2) * a.SwPercentage)/100) as decimal(10,2))  end as SwIncentive
                //                from 
                //                (select case when sum (inc.ThisMonthAmount)  is null then 0 else  sum (inc.ThisMonthAmount)  end as TeamIncentive1,
                //                case when (select FinalAmount from CellPhoneProject.dbo.[SwIncentive_BrandIssues] where MonNum={0} and Year={1}) is null then 0 else
                //                (select FinalAmount from CellPhoneProject.dbo.[SwIncentive_BrandIssues] where MonNum={0} and Year={1}) end as TeamIncentive2
                //                ,(select Percentage from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where RegularClaimArea='DEPUTY') as SwPercentage
                //                FROM [CellPhoneProject].[dbo].Incentive inc 
                //                where inc.DepartmentName in ('QC') and inc.MonNum={0} and Year={1}) a", mons, year, roles).ToList();

                query = _dbEntities.Database.SqlQuery<IncentiveModel>(@"select case when cast((a.TeamIncentive1) as decimal(10,2)) is null then 0 else cast((a.TeamIncentive1) as decimal(10,2)) end as TeamIncentive,
                case when cast(a.SwPercentage as int) is null then 0 else cast(a.SwPercentage as int) end as SwPercentage, case when cast((((a.TeamIncentive1) * a.SwPercentage)/100) as decimal(10,2)) is null then 0 else
                cast((((a.TeamIncentive1) * a.SwPercentage)/100) as decimal(10,2))  end as SwIncentive

                from 
                (
	                select case when sum (inc.TotalAmount)  is null then 0 else  sum (inc.TotalAmount)  end as TeamIncentive1,(select Percentage from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where RegularClaimArea='DEPUTY' and IsActive=1) as SwPercentage

	                FROM [CellPhoneProject].[dbo].Incentive inc 
	                where inc.DepartmentName in ('QC') and inc.MonNum={0} and Year={1}

                ) a", mons, year, roles).ToList();
            }
            return query;
        }

        public bool GetPenaltiesDataForIssues(string employeeCode, int monNum, int year)
        {
            int MonNum = Convert.ToInt32(monNum);
            List<SwIncentive_PenaltiesForIssuesModel> getIncentiveReports = null;
            if (MonNum > 0 && year != null)
            {
                string getIncentiveReportQuery = string.Format(@"select MonNum,CONVERT(varchar(10),Year) as Year,EmployeeCode from [CellPhoneProject].[dbo].[SwIncentive_PenaltiesForIssues] where EmployeeCode='{2}' and Year='{1}' and  MonNum='{0}' ", MonNum, year, employeeCode);
                getIncentiveReports = _dbEntities.Database.SqlQuery<SwIncentive_PenaltiesForIssuesModel>(getIncentiveReportQuery).ToList();

            }
            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }

        public string SaveSwIncentive_AutoPenaltiesForIssues(List<SwIncentive_PenaltiesForIssuesModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {
                var model = new SwIncentive_PenaltiesForIssues();

                model.IssueVerificationId = insResult.IssueVerificationId;
                model.ProjectMasterId = insResult.ProjectMasterId;
                model.ModelName = insResult.ModelName;
                model.Module = insResult.Module;
                model.IssueDetails = insResult.IssueDetails;
                model.IssueFrequency = insResult.IssueFrequency;
                model.IssueType = insResult.IssueType;
                model.Status = insResult.Status;
                model.Status = insResult.Status;
                model.ReleaseDate = insResult.ReleaseDate;
                model.AddingDate = insResult.AddingDate;
                model.ClosingDate = insResult.ClosingDate;
                model.MonthlyStartDate = insResult.MonthlyStartDate;
                model.MonthlyEndDate = insResult.MonthlyEndDate;
                model.MonthlyEndDate = insResult.MonthlyEndDate;
                model.EmployeeCode = insResult.EmployeeCode;
                model.AssignedPersons = insResult.AssignedPersons;

                model.TotalPenalties = insResult.TotalPenalties;
                model.ParticularPersonsPenalties = insResult.ParticularPersonsPenalties;
                model.FinalAmount = insResult.FinalAmount;
                model.Month = insResult.Month;
                model.MonNum = Convert.ToInt32(insResult.MonNum);
                model.Year = Convert.ToInt32(insResult.Year);
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwIncentive_PenaltiesForIssues.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        #endregion

        #region Incentive Sheet
        public List<CmnUserModel> GetSwUserList()
        {
            var models = new List<CmnUserModel>();
            var userLists = (from cmnUsers in _dbEntities.CmnUsers
                             where (cmnUsers.RoleName == "QC" || cmnUsers.RoleName == "QCHEAD") && cmnUsers.IsActive == true
                             select new CmnUserModel
                             {
                                 UserFullName = cmnUsers.UserFullName,
                                 UserName = cmnUsers.UserName,
                                 EmployeeCode = cmnUsers.EmployeeCode,
                                 RoleName = cmnUsers.RoleName
                             }).ToList();

            models = userLists;
            return models;
        }

        public List<Custom_Sw_IncentiveModel> All_QcMembersIncentiveReportTopSheet(string month, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            //            string query =
            //            string.Format(@"(select cmu.UserFullName,cmu.EmployeeCode,inc.Month,inc.Year as Year1,inc.Reward as Reward,inc.Penalties as Penalties,        
            //            case when (select sum(FinalAmount) from CellPhoneProject.dbo.SwIncentive_Penalties where EmployeeCode= inc.UserId and MonNum='{0}' and Year='{1}') is null then 0.0 else
            //
            //            (select sum(FinalAmount) from CellPhoneProject.dbo.SwIncentive_Penalties where EmployeeCode= inc.UserId and MonNum='{0}' and Year='{1}') end as TotalPenalties,
            //            inc.ThisMonthAmount,
            //            inc.TotalIncentive,
            //            case when DepartmentName='QC' then '' 
            //            when DepartmentName='QCHEAD' then 'Incharge' 
            //            when DepartmentName='DEPUTY' then 'Deputy'
            //            when DepartmentName='BRAND' then 'Brand Promotion Cost x 0.05 + QC Incentive (Generated fund x 0.7)'
            //            else DepartmentName end as DepartmentName
            //
            //            from CellPhoneProject.dbo.Incentive inc
            //            join CellPhoneProject.dbo.CmnUsers cmu on inc.UserId=cmu.EmployeeCode
            //            where inc.DepartmentName in ('QC','QCHEAD','BRAND','DEPUTY') and inc.MonNum='{0}' and inc.Year='{1}') 
            //
            //            union
            //
            //            select UserFullName='Total :',EmployeeCode='',inc.Month,Year as Year1,Reward=0,Penalties=0,TotalPenalties=0, sum(ThisMonthAmount),sum(TotalIncentive) as TotalIncentive,DepartmentName=''
            //            from CellPhoneProject.dbo.Incentive inc
            //            where inc.DepartmentName in ('QC','QCHEAD','BRAND','DEPUTY') and inc.MonNum='{0}' and inc.Year='{1}' group by inc.Month,inc.Year order by TotalIncentive  asc", monNums, years);

            string query = string.Format(@"
            (select cmu.UserFullName,cmu.EmployeeCode,inc.Month,inc.Year as Year1,inc.Reward as Reward,inc.Penalties as Penalties,        
            case when (select sum(FinalAmount) from CellPhoneProject.dbo.SwIncentive_Penalties where EmployeeCode= inc.UserId and MonNum='{0}' and Year='{1}') is null then 0.0 else

            (select sum(FinalAmount) from CellPhoneProject.dbo.SwIncentive_Penalties where EmployeeCode= inc.UserId and MonNum='{0}' and Year='{1}') end as TotalPenalties,
            inc.ThisMonthAmount,case when inc.TotalIncentive is null then 0 else inc.TotalIncentive end as TotalIncentive,case when DepartmentName='QC' then '' when DepartmentName='QCHEAD' then 'Incharge' when DepartmentName='DEPUTY' then 'Deputy'
            else DepartmentName end as DepartmentName

            from CellPhoneProject.dbo.Incentive inc
            join CellPhoneProject.dbo.CmnUsers cmu on inc.UserId=cmu.EmployeeCode
            where inc.DepartmentName in ('QC','QCHEAD','DEPUTY') and inc.MonNum='{0}' and inc.Year='{1}') 

            union

            select UserFullName='Total :',EmployeeCode='',inc.Month,Year as Year1,Reward=0,Penalties=0,TotalPenalties=0, sum(ThisMonthAmount),sum(TotalIncentive) as TotalIncentive,DepartmentName=''
            from CellPhoneProject.dbo.Incentive inc
            where inc.DepartmentName in ('QC','QCHEAD','DEPUTY') and inc.MonNum='{0}' and inc.Year='{1}' group by inc.Month,inc.Year order by TotalIncentive  asc
            ", monNums, years);


            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();
            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetPreparedUserName()
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            string getIncentiveReportQuery = string.Format(@"select UserFullName,EmployeeCode  FROM [CellPhoneProject].[dbo].CmnUsers where CmnUserId={0}", userId);
            var getIncentiveReports =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(getIncentiveReportQuery).ToList();
            return getIncentiveReports;
        }
        public List<Custom_Sw_IncentiveModel> GetSwIncentive_IssueForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);


            string query =
                       string.Format(@"select EmployeeCode,ProjectName,SoftwareVersionName,SoftwareVersionNumber,IncentiveClaimArea,AssignedPersons,Critical,Major,Minor,BaseAmount,StartDate,EndDate,DateDiffWithHoliday,Timeline,IssueAmount,AddedAmount=0.0,AddAmountRemarks='',Deduction=0.0,DeductionRemarks='',TotalAmount,ParticularPersonIncentive,Percentage=0,Types='Issue'
            from CellPhoneProject.dbo.SwIncentive_Issue  where EmployeeCode='{0}' and Year={2} and MonNum={1}", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetTotalFinalIncentiveOfSw(string empCode, string monNum, string year)
        {

            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query =
             string.Format(@"select TotalIncentive as FinalAmount1 from CellPhoneProject.dbo.Incentive
                where UserId='{0}' and Year='{2}' and MonNum='{1}' ", empCode, monNums, years);


            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();
            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_ExtraWorkForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);


            string query =
                       string.Format(@"select EmployeeCode,ProjectName,SoftwareVersionName='',SoftwareVersionNumber=0,WorkType as IncentiveClaimArea,AssignedPersons=1,Critical=0,Major=0,Minor=0,BaseAmount=0.0,IssueAmount=0.0,AddedAmount=0.0,AddAmountRemarks='',Deduction=0.0,DeductionRemarks='',TotalAmount,Percentage=0,ParticularPersonIncentive=0.0,Types='Extra/New'
from CellPhoneProject.dbo.SwIncentive_ExtraWork  where  EmployeeCode={0} and Year={2} and MonNum={1}", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_PersonalUseForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"select EmployeeCode,ProjectName,SoftwareVersionName,SoftwareVersionNumber,IncentiveClaimArea,AssignedPersons=0,Critical,Major,Minor,BaseAmount=0.0,IssueAmount=0.0,AddedAmount=0.0,AddAmountRemarks='',Deduction=0.0,DeductionRemarks='',TotalAmount,Percentage=0,ParticularPersonIncentive,Types='PersonalUse'
            from CellPhoneProject.dbo.SwIncentive_PersonalUse  where EmployeeCode='{0}' and Year={2} and MonNum={1}", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_CtsForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"select EmployeeCode,ProjectName,SoftwareVersionName,SoftwareVersionNumber,IncentiveClaimArea,AssignedPersons=1,Critical,Major,Minor,BaseAmount,IssueAmount=0.0,AddedAmount=0.0,AddAmountRemarks='',Deduction=0.0,DeductionRemarks='',TotalAmount,Percentage=0,ParticularPersonIncentive,Types='CTS'
            from CellPhoneProject.dbo.SwIncentive_Cts  where EmployeeCode='{0}' and Year={2} and MonNum={1}", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_FieldByHeadForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"
select EmployeeCode,ProjectName,SoftwareVersionName,SoftwareVersionNumber,IncentiveClaimArea,AssignedPersons,Critical,Major=0,Minor=0,BaseAmount,IssueAmount=0.0,AddedAmount=0.0,AddAmountRemarks='',Deduction=0.0,DeductionRemarks='',TotalAmount,Percentage=0,ParticularPersonIncentive,Types='Field Test'
from CellPhoneProject.dbo.SwIncentive_FieldByHead  where EmployeeCode='{0}' and Year={2} and MonNum={1}", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_OthersForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            var query = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(@"select EmployeeCode,ProjectName,SoftwareVersionName='',  SoftwareVersionNumber=0, case when IncentiveClaimArea is null then OthersType else IncentiveClaimArea end as IncentiveClaimArea,OthersType,AssignedPersons,Critical,Major,Minor,BaseAmount,IssueAmount,
case when AddedAmount is null then 0.0 else AddedAmount end as AddedAmount,AddAmountRemarks,case when Deduction is null then 0.0 else Deduction end as Deduction,DeductionRemarks,FinalAmount,Percentage=0,
FinalAmount, ParticularPersonIncentive,Types='Others',TotalAmount
from CellPhoneProject.dbo.SwIncentive_Others  where Year={2} and MonNum={1}", empCode, monNums, years).ToList();

            //            string query = string.Format(@"
            //select EmployeeCode,ProjectName,SoftwareVersionName='',SoftwareVersionNumber=0,OthersType as IncentiveClaimArea,AssignedPersons=0,Critical=0,Major=0,Minor=0,BaseAmount=0.0,IssueAmount=0.0,
            //case when AddedAmount is null then 0.0 else AddedAmount end as AddedAmount,AddAmountRemarks,case when Deduction is null then 0.0 else Deduction end as Deduction,DeductionRemarks,FinalAmount as TotalAmount,Percentage=0,
            //FinalAmount as ParticularPersonIncentive,Types='Others'
            //from CellPhoneProject.dbo.SwIncentive_Others  where Year={2} and MonNum={1}
            //", empCode, monNums, years);

            //var getPmPoIncentiveModel =
            //    _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            //return getPmPoIncentiveModel;
            List<Custom_Sw_IncentiveModel> globalStringsForPerEmployee = new List<Custom_Sw_IncentiveModel>();

            foreach (var qq in query)
            {
                List<Custom_Sw_IncentiveModel> newPenal = new List<Custom_Sw_IncentiveModel>();
                var idList = qq.EmployeeCode.Split(',');

                foreach (var iiLst in idList)
                {
                    if (iiLst.Trim() == empCode)
                    {
                        Custom_Sw_IncentiveModel ss = new Custom_Sw_IncentiveModel();
                        ss.ProjectName = qq.ProjectName;
                        ss.SoftwareVersionName = qq.SoftwareVersionName;
                        ss.SoftwareVersionNumber = qq.SoftwareVersionNumber;
                        ss.EmployeeCode = empCode;
                        ss.AssignedPersons = qq.AssignedPersons;
                        ss.AddedAmount = qq.AddedAmount;
                        ss.AddAmountRemarks = qq.AddAmountRemarks;
                        ss.OthersType = qq.OthersType;
                        ss.IncentiveClaimArea = qq.IncentiveClaimArea;
                        ss.Critical = qq.Critical;
                        ss.Major = qq.Major;
                        ss.Minor = qq.Minor;
                        ss.BaseAmount = qq.BaseAmount;
                        ss.IssueAmount = qq.IssueAmount;
                        ss.TotalAmount = qq.TotalAmount;
                        ss.Deduction = qq.Deduction;
                        ss.DeductionRemarks = qq.DeductionRemarks;
                        ss.ParticularPersonIncentive = qq.ParticularPersonIncentive;
                        ss.FinalAmount = qq.FinalAmount;
                        ss.EffectiveMonth = qq.EffectiveMonth;
                        ss.Types = qq.Types;
                        newPenal.Add(ss);
                    }
                }
                globalStringsForPerEmployee.AddRange(newPenal);
            }

            return globalStringsForPerEmployee;
        }
        public List<Custom_Sw_IncentiveModel> GetSwIncentive_PenaltiesForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"
select EmployeeCode,ProjectName,SoftwareVersionName='',SoftwareVersionNumber=0,PenaltiesReason as IncentiveClaimArea,AssignedPersons,Critical=0,Major=0,Minor=0, TotalAmount as BaseAmount,IssueAmount=0.0,
AddedAmount=0.0,AddAmountRemarks='',case when ParticularPersonsPenalties is null then 0.0 else ParticularPersonsPenalties end as Deduction,PenaltiesRemarks as DeductionRemarks,
TotalPenalties , TotalAmount,case when PenaltiesPercentage is null then '0%' else PenaltiesPercentage end as PenaltiesPercentage,case when TotalPenalties is null then 0 else TotalPenalties end as TotalPenalties ,ParticularPersonsPenalties As ParticularPersonIncentive,Types='Penalties', FinalAmount
from CellPhoneProject.dbo.SwIncentive_Penalties  where EmployeeCode='{0}' and Year={2} and MonNum={1}
", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_PenaltiesForIssuesForPrint(string empCode, string monNum, string year)
        {
            int years = 0;
            int.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"
                select EmployeeCode,ModelName as ProjectName,SoftwareVersionName='',SoftwareVersionNumber=0,IssueDetails as IncentiveClaimArea,AssignedPersons,Critical=0,Major=0,Minor=0, BaseAmount=0.0,IssueAmount=0.0,
                AddedAmount=0.0,AddAmountRemarks='',case when ParticularPersonsPenalties is null then 0.0 else ParticularPersonsPenalties end as Deduction,DeductionRemarks='',
                TotalPenalties , TotalAmount=0.0,PenaltiesPercentage='0%',case when TotalPenalties is null then 0 else TotalPenalties end as TotalPenalties,
                ParticularPersonsPenalties As ParticularPersonIncentive,Types='Penalties', FinalAmount
                from CellPhoneProject.dbo.SwIncentive_PenaltiesForIssues  where EmployeeCode='{0}' and Year={2} and MonNum={1}
            ", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<Custom_Sw_IncentiveModel> GetSwIncentive_BrandIssuesForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"
select EmployeeCode,ProjectName='Qc Issues',SoftwareVersionName='',SoftwareVersionNumber=0,IncentiveClaimArea='Qc Issues',AssignedPersons=0,Critical=0,Major=0,Minor=0,BaseAmount=0.0,IssueAmount=0.0,
case when AddedAmount is null then 0.0 else AddedAmount end as AddedAmount,AddAmountRemarks,case when Deduction is null then 0.0 else Deduction end as Deduction,DeductionRemarks,TotalAmount,Percentage,
FinalAmount as ParticularPersonIncentive,Types='QcIssues'
from CellPhoneProject.dbo.SwIncentive_BrandIssues  where EmployeeCode='{0}' and Year={2} and MonNum={1}
", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }
        public List<Custom_Sw_IncentiveModel> GetSwIncentive_BrandCostForPrint(string empCode, string monNum, string year)
        {
            long years = 0;
            long.TryParse(year, out years);
            int monNums = 0;
            int.TryParse(monNum, out monNums);

            string query = string.Format(@"
select EmployeeCode,ProjectName='Brand Promotion',SoftwareVersionName='',SoftwareVersionNumber=0,IncentiveClaimArea='Brand Promotion',AssignedPersons=0,Critical=0,Major=0,Minor=0,BaseAmount=0.0,IssueAmount=0.0,
case when AddedAmount is null then 0.0 else AddedAmount end as AddedAmount,AddAmountRemarks,case when Deduction is null then 0.0 else Deduction end as Deduction,DeductionRemarks,Cost as TotalAmount,Percentage,
FinalAmount as ParticularPersonIncentive,Types='BrandPromotion'
from CellPhoneProject.dbo.SwIncentive_BrandCost  where EmployeeCode='{0}' and Year={2} and MonNum={1}
", empCode, monNums, years);

            var getPmPoIncentiveModel =
                _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(query).ToList();

            return getPmPoIncentiveModel;
        }

        public List<SwQcIssueDetailModel> GetPenaltiesDataForIncentive(string months, string years, string roles, string persons)
        {
            int mon;
            int.TryParse(months, out mon);

            int yrs;
            int.TryParse(years, out yrs);

            _dbEntities.Database.CommandTimeout = 6000;

            #region com_1
            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //            select B.*,case when  cast(pn.AssignedPersons as int) is null then 0 else pn.AssignedPersons end as AssignedPersons, pn.EmployeeCode,  
            //            case when  cast(pn.TotalAmount as decimal(16,2)) is null then 0 else pn.TotalAmount end as TotalAmount
            //            from 
            //            (SELECT * FROM
            //            (SELECT ProjectName as ProName,
            //            case when sum(cast(TotalIssuePercentage as decimal(16,2))) is null then 0 else sum(TotalIssuePercentage) end as TotalIssuePercentage
            //
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //            group by ProjectName) t1 
            //            INNER JOIN
            //            (SELECT x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //            INNER JOIN
            //                (SELECT ProjectName,ReleaseDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //                GROUP BY ProjectName,ReleaseDate) a 
            //            ON x.ProjectName = a.ProjectName 
            //            AND x.MonNum = a.MonNum
            //            GROUP BY x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year) t2
            //            ON t1.ProName = t2.ProjectName where MonNum={0} and Year={1})B
            //
            //            left join [CellPhoneProject].[dbo].[PenaltiesProjectListWithIds] pn  on pn.ProjectName=B.ProjectName
            //            where TotalIssuePercentage>=2
            //            order by B.TotalIssuePercentage desc", mon, yrs, roles, persons).ToList();
            #endregion

            #region com_2
            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //            select B.ProName,B.TotalIssuePercentage, B.ProjectName,B.ReleaseDate,B.PenaltiesDate,MonNum={0}, DateName(month,DateAdd( month ,{0},0)-1) as Month,Year={1},
            //            case when  pn.AssignedPersons is null then 0 else pn.AssignedPersons end as AssignedPersons, pn.EmployeeCode, 
            //            case when  pn.TotalAmount is null then 0 else pn.TotalAmount end as TotalAmount
            //            from 
            //                (SELECT * FROM
            //                (SELECT ProjectName as ProName,sum(TotalIssuePercentage) as TotalIssuePercentage
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //                where  (MonNum>={0}  or MonNum<={0}) and Year<={1} and ProblemName in ('Totals :') 
            //                group by ProjectName) t1 
            //                INNER JOIN
            //
            //                (SELECT x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //                INNER JOIN
            //
            //                    (SELECT ProjectName,ReleaseDate,DATEADD(month,4, ReleaseDate) as PenaltiesDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                    FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	                where  (MonNum>={0}  or MonNum<={0})  and Year<={1} and ProblemName in ('Totals :') 
            //                    GROUP BY ProjectName,ReleaseDate) a 
            //                ON x.ProjectName = a.ProjectName 
            //                AND x.MonNum >= a.MonNum
            //                GROUP BY x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year) t2
            //                ON t1.ProName = t2.ProjectName where MonNum>={0} and Year<={1}
            //			
            //                and Month(PenaltiesDate)>={0} and Year(PenaltiesDate) = {1}
            //			
            //	            )B
            //
            //                left join [CellPhoneProject].[dbo].[PenaltiesProjectListWithIds] pn  on pn.ProjectName=B.ProjectName
            //                where TotalIssuePercentage>=0.02
            //                order by B.TotalIssuePercentage desc", mon, yrs, roles, persons).ToList();

            #endregion

            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"

        select ProName,TotalIssuePercentage,ProjectName,ReleaseDate,PenaltiesDate,MonNum,Month,Year,
        OrderQuantity,ProjectMasterId,ProjectNames,IsFinalPhaseMP,case when TestPhaseID is null then 0 else TestPhaseID end as TestPhaseID,case when SwQcHeadAssignId is null then 0 else SwQcHeadAssignId end as SwQcHeadAssignId
		from 
        (
            select distinct B.ProName,B.TotalIssuePercentage, B.ProjectName,B.ReleaseDate,B.PenaltiesDate,MonNum={0}, DateName(month,DateAdd( month ,{0},0)-1) as Month,Year={1},
            pn.OrderQuantity,pn.ProjectMasterId,sq.ProjectName as ProjectNames,sq.IsFinalPhaseMP,
 
            case when sq.IsFinalPhaseMP=1 then sq.TestPhaseID
            when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID=8 then sq.TestPhaseID
            when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID!=8 and sq.TestPhaseID= (select top 1 TestPhaseID from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName 
            and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) then sq.TestPhaseID  end as TestPhaseID,

            case when sq.IsFinalPhaseMP=1 then sq.SwQcHeadAssignId
            when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID=8 then sq.SwQcHeadAssignId
            when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID!=8 and sq.TestPhaseID= (select top 1 TestPhaseID from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName 
            and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) then sq.SwQcHeadAssignId  end as SwQcHeadAssignId

            from 
                (SELECT * FROM
                (SELECT ProjectName as ProName,sum(TotalIssuePercentage) as TotalIssuePercentage
                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
                where  (MonNum>={0}  or MonNum<={0}) and Year<={1} and ProblemName in ('Totals :') 
                group by ProjectName) t1 
                INNER JOIN
                (	
		            SELECT x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year
		            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
		            INNER JOIN

			            (SELECT ProjectName,ReleaseDate,DATEADD(month,4, ReleaseDate) as PenaltiesDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
			            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
			            where  (MonNum>={0}  or MonNum<={0})  and Year<={1} and ProblemName in ('Totals :') 
			            GROUP BY ProjectName,ReleaseDate) a 
		            ON x.ProjectName = a.ProjectName 
		            AND x.MonNum >= a.MonNum
		            GROUP BY x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year) t2
		            ON t1.ProName = t2.ProjectName where MonNum>={0} and Year<={1} and Month(PenaltiesDate)>={0} and Year(PenaltiesDate) = {1}			
	            )B 
	            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pn  on pn.ProjectModel=B.ProjectName and pn.ProjectMasterId in (select top 1 ProjectMasterId from CellPhoneProject.[dbo].[ProjectOrderQuantityDetails]  where ProjectModel =B.ProjectName  order by ProjectMasterId asc) 
	            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterId=pn.ProjectMasterId
	            left join [CellPhoneProject].[dbo].[SwQcHeadAssignsFromPm] sq  on sq.SwQcHeadAssignId in (select top 1 SwQcHeadAssignId from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName and Status='RECOMMENDED' and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) 

            where TotalIssuePercentage>=0.02
            )A
	        order by TotalIssuePercentage desc", mon, yrs, roles, persons).ToList();

            List<SwQcIssueDetailModel> globalStringsForPerEmployee = new List<SwQcIssueDetailModel>();

            foreach (var penal in query)
            {

                if (penal.SwQcHeadAssignId==0)
                {

                    var swIds = (from sd in _dbEntities.SwQcHeadAssignsFromPms where sd.ProjectName == penal.ProjectNames && sd.IsFinalPhaseMP==true orderby sd.SwQcHeadAssignId descending select sd).FirstOrDefault();

                    if (swIds.SwQcHeadAssignId==0)
                    {
                        swIds = (from sd in _dbEntities.SwQcHeadAssignsFromPms where sd.ProjectName == penal.ProjectNames orderby sd.SwQcHeadAssignId descending select sd).FirstOrDefault();

                    }
                    
                    penal.SwQcHeadAssignId = swIds.SwQcHeadAssignId;
                }

                List<SwQcIssueDetailModel> newPenal = new List<SwQcIssueDetailModel>();

                var query2 = (from pn in _dbEntities.SwIncentive_Issue
                              where pn.SwQcHeadAssignId == penal.SwQcHeadAssignId && pn.EmployeeCode == persons
                              select pn).FirstOrDefault();

                if (query2 != null)
                {

                    if (query2.EmployeeCode.Trim() == persons)
                    {
                        var previous = (from pn in _dbEntities.SwIncentive_Penalties
                                        where pn.MonNum < mon && pn.Year <= yrs && pn.EmployeeCode == persons
                                  && pn.ProjectName == penal.ProjectName
                                        select pn).ToList();

                        SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                        ss.ProjectName = penal.ProjectName;
                        ss.ReleaseDate = penal.ReleaseDate;
                        ss.TotalIssuePercentage = penal.TotalIssuePercentage;
                        ss.AssignedPersons = Convert.ToInt32(query2.AssignedPersons);
                        //ss.TotalAmount = query2.FinalAmount;
                        ss.TotalAmount = query2.TotalAmount;
                        var previousDeductedAmount = previous.Sum(x => x.FinalAmount);
                        ss.PreviousDeductedAmount = Convert.ToDecimal(previousDeductedAmount);

                        Decimal deductPercent;

                        if (roles.Trim() == "QC")
                        {
                            if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) &&
                                ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                            {
                                ss.PenaltiesPercentage = "21%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) &&
                                     ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "35%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "70%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                        }
                        else if (roles.Trim() == "BRAND")
                        {
                            if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) &&
                                ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                            {
                                ss.PenaltiesPercentage = "21%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) &&
                                     ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "35%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "70%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                        }
                        ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties / ss.AssignedPersons), 4);
                        // ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties), 4);
                        if (ss.PreviousDeductedAmount > ss.PerPersonPenalties)
                        {
                            //ss.FinalAmount = ss.PreviousDeductedAmount - ss.PerPersonPenalties;
                            ss.FinalAmount = 0;
                        }
                        else
                        {
                            ss.FinalAmount = ss.PerPersonPenalties - ss.PreviousDeductedAmount;
                        }
                        ss.Month = penal.Month;
                        ss.Months = mon;
                        ss.Years = yrs;
                        newPenal.Add(ss);

                    }
                }
                else if (query2 == null)
                {
                    //penal.SwQcHeadAssignId

                    var qEmpCode = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
                    select cu.EmployeeCode from [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sqh
                    inner join [CellPhoneProject].[dbo].CmnUsers cu on sqh.SwQcUserId=cu.CmnUserId 
                    where sqh.SwQcHeadAssignId={0} and cu.EmployeeCode={1} and sqh.Status = ('RECOMMENDED') and 
                    sqh.Status not like '%ASSIGNED%'  AND sqh.Status not like '%QCCOMPLETED%'  ", penal.SwQcHeadAssignId, persons).FirstOrDefault();

                    if (qEmpCode != null && qEmpCode.EmployeeCode == persons)
                    {

                        var qAssignPer = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select count(*) as AssignedPersons from [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sqh
                        inner join [CellPhoneProject].[dbo].CmnUsers cu on sqh.SwQcUserId=cu.CmnUserId 
                        where sqh.SwQcHeadAssignId={0}  and sqh.Status = ('RECOMMENDED') and sqh.Status not like '%ASSIGNED%'  AND sqh.Status not like '%QCCOMPLETED%' ", penal.SwQcHeadAssignId).FirstOrDefault();

                        #region qAmount
                        var qAmount = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
                        select SwQcHeadAssignId,ProjectType,IsFinalPhaseMP,TestPhaseID,ProjectName,cast(Critical as int) as Critical,cast(Major as int) as Major,cast(Minor as int) as Minor,
                        case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,			           
                        case  when a.TestPhaseID in (1) then
                        (a.Critical+a.Major+a.Minor) * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Issue Claim') and RegularClaimArea =a.TestPhaseName and ProjectType=a.ProjectType) 
                        --start 8
                        when a.TestPhaseID=8  and a.IsFinalPhaseMP !=1  then 
                        case when
                        (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
                        (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        +
                        case when
                        (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
                        (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        +
                        case when
                        (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else
                        (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        --end 8

                        else 
                        case when 
                        (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
                        (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
                        end
                        +
                        case when 
                        (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
                        (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
                        end
                        +
                        case when 
                        (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))  is null then 0 else  
                        (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) end
                        end as IssueAmount

                        from 
                        (	
		
  
		                        select sq.ProjectType,sq.SwQcHeadAssignId,sq.TestPhaseID,sq.ProjectName,sq.IsFinalPhaseMP,stp.TestPhaseName,		 
		
		                        --Critical--		
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='CRITICAL' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) 
		                        and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		           
		                        when sq.IsFinalPhaseMP=1 then 
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		   
		                        else
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		
		                        end as Critical,
		                        ---Major---
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='MAJOR'and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		                        else
		                        (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='MAJOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		                        end as Major,
		                        ---Minir---
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='MINOR' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		                        else
		                        (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='MINOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		                        end as Minor,
		                        --Base Amount---
		                        case when sq.IsFinalPhaseMP !=1 and sq.TestPhaseID=8  then 
		                        (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Version Software Testing' and RegularClaimArea='Version Software Testing' and sq.ProjectType=ProjectType) 
           
		                        else
		                        (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField=stp.TestPhaseName and RegularClaimArea=stp.TestPhaseName and sq.ProjectType=ProjectType) 
		                        end as BaseAmount	

		                        from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq
		                        left JOIN CellPhoneProject.[dbo].SwQcIssueDetails spm   on spm.SwQcHeadAssignId=sq.SwQcHeadAssignId	
		                        left JOIN CellPhoneProject.[dbo].SwQcTestPhase stp on stp.TestPhaseID=sq.TestPhaseID			          
		                        where sq.SwQcHeadAssignId={0}

                            )a ", penal.SwQcHeadAssignId).FirstOrDefault();
                        #endregion


                        var previous = (from pn in _dbEntities.SwIncentive_Penalties
                                        where pn.MonNum < mon && pn.Year <= yrs && pn.EmployeeCode == persons
                                  && pn.ProjectName == penal.ProjectName
                                        select pn).ToList();

                        SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                        ss.ProjectName = penal.ProjectName;
                        ss.ReleaseDate = penal.ReleaseDate;
                        ss.TotalIssuePercentage = penal.TotalIssuePercentage;
                        ss.AssignedPersons = Convert.ToInt32(qAssignPer.AssignedPersons);
                        ss.TotalAmount = Convert.ToDecimal(qAmount.BaseAmount) + Convert.ToDecimal(qAmount.IssueAmount);
                        var previousDeductedAmount = previous.Sum(x => x.FinalAmount);
                        ss.PreviousDeductedAmount = Convert.ToDecimal(previousDeductedAmount);

                        Decimal deductPercent;

                        if (roles.Trim() == "QC")
                        {
                            if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) &&
                                ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                            {
                                ss.PenaltiesPercentage = "21%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) &&
                                     ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "35%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "70%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                        }
                        else if (roles.Trim() == "BRAND")
                        {
                            if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) &&
                                ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                            {
                                ss.PenaltiesPercentage = "21%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) &&
                                     ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "35%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                            else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                            {
                                ss.PenaltiesPercentage = "70%";
                                deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                                ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                            }
                        }
                        ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties / ss.AssignedPersons), 4);
                        // ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties), 4);
                        if (ss.PreviousDeductedAmount > ss.PerPersonPenalties)
                        {
                            //ss.FinalAmount = ss.PreviousDeductedAmount - ss.PerPersonPenalties;
                            ss.FinalAmount = 0;
                        }
                        else
                        {
                            ss.FinalAmount = ss.PerPersonPenalties - ss.PreviousDeductedAmount;
                        }
                        ss.Month = penal.Month;
                        ss.Months = mon;
                        ss.Years = yrs;
                        newPenal.Add(ss);



                    }
                }


                #region com

                //var emplyees = penal.EmployeeCode;
                //if (emplyees != null)
                //{
                //    var emplyeesList = emplyees.Split(',');


                //    foreach (var emp in emplyeesList)
                //    {
                //        if (emp.Trim() == persons)
                //        {
                //            var previous = (from pn in _dbEntities.SwIncentive_Penalties
                //                            where pn.MonNum < mon && pn.Year <= yrs && pn.EmployeeCode == emp
                //                            && pn.ProjectName == penal.ProjectName
                //                            select pn).ToList();

                //            SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                //            ss.ProjectName = penal.ProjectName;
                //            ss.ReleaseDate = penal.ReleaseDate;
                //            ss.TotalIssuePercentage = penal.TotalIssuePercentage;
                //            ss.AssignedPersons = penal.AssignedPersons;
                //            ss.TotalAmount = penal.TotalAmount;
                //            var previousDeductedAmount = previous.Sum(x => x.FinalAmount);
                //            ss.PreviousDeductedAmount = Convert.ToDecimal(previousDeductedAmount);
                //            //  ss.PerPersonPenalties = (ss.TotalIssuePercentage / ss.AssignedPersons);
                //            Decimal deductPercent;

                //            if (roles.Trim() == "QC")
                //            {
                //                if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                //                {
                //                    ss.PenaltiesPercentage = "21%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //                else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                //                {
                //                    ss.PenaltiesPercentage = "35%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //                else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                //                {
                //                    ss.PenaltiesPercentage = "70%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //            }
                //            else if (roles.Trim() == "BRAND")
                //            {
                //                if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                //                {
                //                    ss.PenaltiesPercentage = "21%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.21), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //                else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                //                {
                //                    ss.PenaltiesPercentage = "35%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.35), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //                else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                //                {
                //                    ss.PenaltiesPercentage = "70%";
                //                    deductPercent = Math.Round(Convert.ToDecimal(0.7), 4);
                //                    ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                //                }
                //            }
                //            ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties / ss.AssignedPersons), 4);
                //            if (ss.PreviousDeductedAmount > ss.PerPersonPenalties)
                //            {
                //                //ss.FinalAmount = ss.PreviousDeductedAmount - ss.PerPersonPenalties;
                //                ss.FinalAmount = 0;
                //            }
                //            else
                //            {
                //                ss.FinalAmount = ss.PerPersonPenalties - ss.PreviousDeductedAmount;
                //            }
                //            ss.Month = penal.Month;
                //            ss.Months = mon;
                //            ss.Years = yrs;
                //            newPenal.Add(ss);

                //        }
                //    }
                //}
                globalStringsForPerEmployee.AddRange(newPenal);

                #endregion


            }

            return globalStringsForPerEmployee;
        }

        public List<SwQcIssueDetailModel> GetPenaltiesDataForHeadIncentive(string monNum, string year, string roles, string empCode)
        {
            int mon;
            int.TryParse(monNum, out mon);

            int yrs;
            int.TryParse(year, out yrs);

            _dbEntities.Database.CommandTimeout = 6000;

            #region com_1
            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //            select B.*, case when  pn.AssignedPersons is null then 0 else pn.AssignedPersons end as AssignedPersons, pn.EmployeeCode, 
            //case when  pn.TotalAmount is null then 0 else pn.TotalAmount end as TotalAmount
            //from 
            //            (SELECT * FROM
            //            (SELECT ProjectName as ProName,sum(TotalIssuePercentage) as TotalIssuePercentage
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //            group by ProjectName) t1 
            //            INNER JOIN
            //            (SELECT x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //            INNER JOIN
            //                (SELECT ProjectName,ReleaseDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //                GROUP BY ProjectName,ReleaseDate) a 
            //            ON x.ProjectName = a.ProjectName 
            //            AND x.MonNum = a.MonNum
            //            GROUP BY x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year) t2
            //            ON t1.ProName = t2.ProjectName where MonNum={0} and Year={1})B
            //
            //            left join [CellPhoneProject].[dbo].[PenaltiesProjectListWithIds] pn  on pn.ProjectName=B.ProjectName
            //            where TotalIssuePercentage>=2
            //            order by B.TotalIssuePercentage desc", mon, yrs, roles).ToList();
            #endregion

            #region com_2
            //            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
            //            select B.ProName,B.TotalIssuePercentage, B.ProjectName,B.ReleaseDate,B.PenaltiesDate,MonNum={0},DateName(month,DateAdd( month , {0},0)-1) as Month,Year={1},
            //            case when  pn.AssignedPersons is null then 0 else pn.AssignedPersons end as AssignedPersons, pn.EmployeeCode, 
            //            case when  pn.TotalAmount is null then 0 else pn.TotalAmount end as TotalAmount
            //            from 
            //                (SELECT * FROM
            //                (SELECT ProjectName as ProName,sum(TotalIssuePercentage) as TotalIssuePercentage
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //                where  (MonNum>={0}  or MonNum<={0}) and Year<={1} and ProblemName in ('Totals :') 
            //                group by ProjectName) t1 
            //                INNER JOIN
            //
            //                (SELECT x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //                INNER JOIN
            //
            //                    (SELECT ProjectName,ReleaseDate,DATEADD(month,4, ReleaseDate) as PenaltiesDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                    FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	                where  (MonNum>={0}  or MonNum<={0})  and Year<={1} and ProblemName in ('Totals :') 
            //                    GROUP BY ProjectName,ReleaseDate) a 
            //                ON x.ProjectName = a.ProjectName 
            //                AND x.MonNum >= a.MonNum
            //                GROUP BY x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year) t2
            //                ON t1.ProName = t2.ProjectName where MonNum>={0} and Year<={1}			
            //                and Month(PenaltiesDate)>={0} and Year(PenaltiesDate) = {1} )B
            //
            //                left join [CellPhoneProject].[dbo].[PenaltiesProjectListWithIds] pn  on pn.ProjectName=B.ProjectName
            //                where TotalIssuePercentage>=0.02
            //                order by B.TotalIssuePercentage desc", mon, yrs, roles).ToList();
            #endregion

            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
               select ProName,  TotalIssuePercentage,ProjectName,ReleaseDate,PenaltiesDate,MonNum,Month,Year,OrderQuantity,ProjectMasterId,ProjectNames,IsFinalPhaseMP,
			  case when TestPhaseID is null then 0 else TestPhaseID end as TestPhaseID, case when SwQcHeadAssignId is null then 0 else SwQcHeadAssignId end as SwQcHeadAssignId
			  from
			 (	
                select distinct B.ProName,B.TotalIssuePercentage, B.ProjectName,B.ReleaseDate,B.PenaltiesDate,MonNum={0}, DateName(month,DateAdd( month ,{0},0)-1) as Month,Year={1},
                pn.OrderQuantity,pn.ProjectMasterId,sq.ProjectName as ProjectNames,sq.IsFinalPhaseMP,
 
                case when sq.IsFinalPhaseMP=1 then sq.TestPhaseID
                when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID=8 then sq.TestPhaseID
                when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID!=8 and sq.TestPhaseID= (select top 1 TestPhaseID from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName 
                and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) then sq.TestPhaseID  end as TestPhaseID,

                case when sq.IsFinalPhaseMP=1 then sq.SwQcHeadAssignId
                when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID=8 then sq.SwQcHeadAssignId
                when  sq.IsFinalPhaseMP!=1 and sq.TestPhaseID!=8 and sq.TestPhaseID= (select top 1 TestPhaseID from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName 
                and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) then sq.SwQcHeadAssignId  end as SwQcHeadAssignId

                from 
                    (SELECT * FROM
                    (SELECT ProjectName as ProName,sum(TotalIssuePercentage) as TotalIssuePercentage
                    FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
                    where  (MonNum>={0}  or MonNum<={0}) and Year<={1} and ProblemName in ('Totals :') 
                    group by ProjectName) t1 
                    INNER JOIN
                    (	
		                SELECT x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year
		                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
		                INNER JOIN

			                (SELECT ProjectName,ReleaseDate,DATEADD(month,4, ReleaseDate) as PenaltiesDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
			                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
			                where  (MonNum>={0}  or MonNum<={0})  and Year<={1} and ProblemName in ('Totals :') 
			                GROUP BY ProjectName,ReleaseDate) a 
		                ON x.ProjectName = a.ProjectName 
		                AND x.MonNum >= a.MonNum
		                GROUP BY x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year) t2
		                ON t1.ProName = t2.ProjectName where MonNum>={0} and Year<={1} and Month(PenaltiesDate)>={0} and Year(PenaltiesDate) = {1}			
	                )B 
	                left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pn  on pn.ProjectModel=B.ProjectName and pn.ProjectMasterId in (select top 1 ProjectMasterId from CellPhoneProject.[dbo].[ProjectOrderQuantityDetails]  where ProjectModel =B.ProjectName  order by ProjectMasterId asc) 
	                left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterId=pn.ProjectMasterId
	                left join [CellPhoneProject].[dbo].[SwQcHeadAssignsFromPm] sq  on sq.SwQcHeadAssignId in (select top 1 SwQcHeadAssignId from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm]  where pm.ProjectName=ProjectName and Status='RECOMMENDED' and TestPhaseID not in (1,5,6,7,9,10)  order by SwQcHeadAssignId desc) 

                where TotalIssuePercentage>=0.02
               
	          )C  order by TotalIssuePercentage desc
           ", mon, yrs, roles).ToList();

            List<SwQcIssueDetailModel> globalStringsForPerEmployee = new List<SwQcIssueDetailModel>();

            List<SwQcIssueDetailModel> newPenal = new List<SwQcIssueDetailModel>();

            foreach (var penal in query)
            {

                if (penal.SwQcHeadAssignId == 0)
                {

                    var swIds = (from sd in _dbEntities.SwQcHeadAssignsFromPms where sd.ProjectName == penal.ProjectNames && sd.IsFinalPhaseMP == true orderby sd.SwQcHeadAssignId descending select sd).FirstOrDefault();

                    if (swIds.SwQcHeadAssignId == 0)
                    {
                        swIds = (from sd in _dbEntities.SwQcHeadAssignsFromPms where sd.ProjectName == penal.ProjectNames orderby sd.SwQcHeadAssignId descending select sd).FirstOrDefault();

                    }

                    penal.SwQcHeadAssignId = swIds.SwQcHeadAssignId;
                }
                var query2 = (from pn in _dbEntities.SwIncentive_Issue
                              where pn.SwQcHeadAssignId == penal.SwQcHeadAssignId
                              select pn).FirstOrDefault();


                if (query2 != null)
                {
                    var previous = (from pn in _dbEntities.SwIncentive_Penalties
                                    where pn.MonNum < mon && pn.Year <= yrs && pn.EmployeeCode == empCode
                                    && pn.ProjectName == penal.ProjectName
                                    select pn).ToList();

                    SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                    ss.ProjectName = penal.ProjectName;
                    ss.ReleaseDate = penal.ReleaseDate;
                    ss.TotalIssuePercentage = penal.TotalIssuePercentage;
                    ss.AssignedPersons = 1;
                    ss.TotalAmount = query2.TotalAmount;
                    var previousDeductedAmount = previous.Sum(x => x.FinalAmount);
                    ss.PreviousDeductedAmount = Convert.ToDecimal(previousDeductedAmount);

                    Decimal deductPercent;


                    if (roles.Trim() == "DEPUTY")
                    {
                        if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                        {
                            ss.PenaltiesPercentage = "5.6%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.056), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "8.4%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.084), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "14%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.14), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                    }
                    else if (roles.Trim() == "QCHEAD")
                    {
                        if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                        {
                            ss.PenaltiesPercentage = "7%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.07), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "10.5%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.105), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "23%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.23), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                    }

                    ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties / ss.AssignedPersons), 4);
                    if (ss.PreviousDeductedAmount > ss.PerPersonPenalties)
                    {
                        // ss.FinalAmount = ss.PreviousDeductedAmount - ss.PerPersonPenalties;
                        ss.FinalAmount = 0;
                    }
                    else
                    {
                        ss.FinalAmount = ss.PerPersonPenalties - ss.PreviousDeductedAmount;
                    }
                    ss.Month = penal.Month;
                    ss.Months = mon;
                    ss.Years = yrs;
                    newPenal.Add(ss);
                }//end if query2
                else if (query2 == null)
                {
                    #region qAmount
                    var qAmount = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"
                        select SwQcHeadAssignId,ProjectType,IsFinalPhaseMP,TestPhaseID,ProjectName,cast(Critical as int) as Critical,cast(Major as int) as Major,cast(Minor as int) as Minor,
                        case when BaseAmount is null then 0 else cast(BaseAmount as decimal(16,2)) end as BaseAmount,			           
                        case  when a.TestPhaseID in (1) then
                        (a.Critical+a.Major+a.Minor) * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Issue Claim') and RegularClaimArea =a.TestPhaseName and ProjectType=a.ProjectType) 
                        --start 8
                        when a.TestPhaseID=8  and a.IsFinalPhaseMP !=1  then 
                        case when
                        (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
                        (a.Critical *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        +
                        case when
                        (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else 
                        (a.Major *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        +
                        case when
                        (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType))  is null then 0 else
                        (a.Minor *  (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea ='Version Software Testing'  and ProjectType=a.ProjectType)) end
                        --end 8

                        else 
                        case when 
                        (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
                        (a.Critical * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Critical Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
                        end
                        +
                        case when 
                        (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) is null then 0 else 
                        (a.Major * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Major Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))
                        end
                        +
                        case when 
                        (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType))  is null then 0 else  
                        (a.Minor * (select distinct BaseAmount FROM [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField in ('Each Minor Issue') and RegularClaimArea =a.TestPhaseName  and ProjectType=a.ProjectType)) end
                        end as IssueAmount

                        from 
                        (	
		
  
		                        select sq.ProjectType,sq.SwQcHeadAssignId,sq.TestPhaseID,sq.ProjectName,sq.IsFinalPhaseMP,stp.TestPhaseName,		 
		
		                        --Critical--		
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='CRITICAL' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) 
		                        and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		           
		                        when sq.IsFinalPhaseMP=1 then 
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		   
		                        else
		                        (select count(*) as Critical from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='CRITICAL' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		
		                        end as Critical,
		                        ---Major---
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='MAJOR'and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		                        else
		                        (select count(*) as Major from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='MAJOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		                        end as Major,
		                        ---Minir---
		                        case when sq.SoftwareVersionNo=1 then 
		                        (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo=1 
		                        and sii1.IssueType='MINOR' and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial)) 
		                        else
		                        (select count(*) as Minor from CellPhoneProject.dbo.SwQcIssueDetails sii1 where sii1.SwQcHeadAssignId=sq.SwQcHeadAssignId and sii1.SoftwareVersionNo !=1 
		                        and sii1.IssueType='MINOR' and (sii1.WaltonQcStatus='NEW ISSUE')  and  (sii1.RefernceModule <> 'CTS' or sii1.RefernceModule is null) and  sii1.IssueSerial in (select  top 1  IssueSerial from CellPhoneProject.dbo.SwQcIssueDetails where IssueSerial=sii1.IssueSerial))
		                        end as Minor,
		                        --Base Amount---
		                        case when sq.IsFinalPhaseMP !=1 and sq.TestPhaseID=8  then 
		                        (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField='Version Software Testing' and RegularClaimArea='Version Software Testing' and sq.ProjectType=ProjectType) 
           
		                        else
		                        (select distinct BaseAmount from [CellPhoneProject].[dbo].[SwQcAllIncentiveList] where ClaimingField=stp.TestPhaseName and RegularClaimArea=stp.TestPhaseName and sq.ProjectType=ProjectType) 
		                        end as BaseAmount	

		                        from CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sq
		                        left JOIN CellPhoneProject.[dbo].SwQcIssueDetails spm   on spm.SwQcHeadAssignId=sq.SwQcHeadAssignId	
		                        left JOIN CellPhoneProject.[dbo].SwQcTestPhase stp on stp.TestPhaseID=sq.TestPhaseID			          
		                        where sq.SwQcHeadAssignId={0}

                            )a ", penal.SwQcHeadAssignId).FirstOrDefault();
                    #endregion

                    var previous = (from pn in _dbEntities.SwIncentive_Penalties
                                    where pn.MonNum < mon && pn.Year <= yrs && pn.EmployeeCode == empCode
                                    && pn.ProjectName == penal.ProjectName
                                    select pn).ToList();

                    SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                    ss.ProjectName = penal.ProjectName;
                    ss.ReleaseDate = penal.ReleaseDate;
                    ss.TotalIssuePercentage = penal.TotalIssuePercentage;
                    ss.AssignedPersons = 1;
                    ss.TotalAmount = Convert.ToDecimal(qAmount.BaseAmount) + Convert.ToDecimal(qAmount.IssueAmount);
                    var previousDeductedAmount = previous.Sum(x => x.FinalAmount);
                    ss.PreviousDeductedAmount = Convert.ToDecimal(previousDeductedAmount);

                    Decimal deductPercent;


                    if (roles.Trim() == "DEPUTY")
                    {
                        if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                        {
                            ss.PenaltiesPercentage = "5.6%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.056), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "8.4%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.084), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "14%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.14), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                    }
                    else if (roles.Trim() == "QCHEAD")
                    {
                        if (ss.TotalIssuePercentage > Convert.ToDecimal(0.02) && ss.TotalIssuePercentage < Convert.ToDecimal(0.04))
                        {
                            ss.PenaltiesPercentage = "7%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.07), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.04) && ss.TotalIssuePercentage < Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "10.5%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.105), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                        else if (ss.TotalIssuePercentage > Convert.ToDecimal(0.08))
                        {
                            ss.PenaltiesPercentage = "23%";
                            deductPercent = Math.Round(Convert.ToDecimal(0.23), 4);
                            ss.TotalPenalties = Convert.ToDecimal(ss.TotalAmount * deductPercent);
                        }
                    }

                    ss.PerPersonPenalties = Math.Round(Convert.ToDecimal(ss.TotalPenalties / ss.AssignedPersons), 4);
                    if (ss.PreviousDeductedAmount > ss.PerPersonPenalties)
                    {
                        // ss.FinalAmount = ss.PreviousDeductedAmount - ss.PerPersonPenalties;
                        ss.FinalAmount = 0;
                    }
                    else
                    {
                        ss.FinalAmount = ss.PerPersonPenalties - ss.PreviousDeductedAmount;
                    }
                    ss.Month = penal.Month;
                    ss.Months = mon;
                    ss.Years = yrs;
                    newPenal.Add(ss);

                }


            }
            globalStringsForPerEmployee.AddRange(newPenal);

            return globalStringsForPerEmployee;
        }

        public string SaveSwIncentive_OthersAuto(List<Custom_Sw_IncentiveModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var insResult in results)
            {

                DateTime birthDate = Convert.ToDateTime(insResult.EffectiveMonth);

                var year = birthDate.Year;
                var month = birthDate.Month;
                string monthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);

                var model = new SwIncentive_Others();
                model.EmployeeCode = insResult.EmployeeCode;
                model.OthersType = insResult.OthersType;
                model.ProjectName = insResult.ProjectName;
                model.AssignedPersons = insResult.AssignedPersons;
                model.TestPhaseId = insResult.TestPhaseId;
                model.IncentiveClaimArea = insResult.IncentiveClaimArea;
                model.Critical = insResult.Critical;
                model.Major = insResult.Major;
                model.Minor = insResult.Minor;
                model.AddAmountRemarks = insResult.AddAmountRemarks;
                model.EffectiveMonth = insResult.EffectiveMonth;
                // model.FinalAmount = insResult.FinalAmount;

                model.Month = monthName1;
                model.MonNum = Convert.ToInt32(month);
                model.Year = year;
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                var qry1 =
                    (from pm in _dbEntities.ProjectMasters
                     where pm.ProjectName == insResult.ProjectName.Trim() && pm.IsActive==true
                     select pm.ProjectType).FirstOrDefault();
                var baseAmount = new List<SwQcAllIncentiveList>();

                if (qry1 == "Smart")
                {
                    if (model.IncentiveClaimArea == "Server Management (Hw Team Inventory Server)")
                    {
                        insResult.IncentiveClaimArea = "Hw Team Inventory Server";
                        insResult.ClaimingField = "Server Management";
                    }
                    if (model.IncentiveClaimArea == "Server Management (Production Line Personal Handset Tracking Server)")
                    {
                        insResult.IncentiveClaimArea = "Production Line Personal Handset Tracking Server";
                        insResult.ClaimingField = "Server Management";
                    }
                    if (model.IncentiveClaimArea == "Inventory Management")
                    {
                        insResult.IncentiveClaimArea = "Sw Qa Team Inventory";
                        insResult.ClaimingField = "Inventory Management";
                    }
                    baseAmount = (from pm in _dbEntities.SwQcAllIncentiveLists
                                  where pm.RegularClaimArea == insResult.IncentiveClaimArea.Trim() && pm.ProjectType == "Smart" && pm.IsActive==true
                                  select pm).ToList();
                    var critical = 0;
                    var major = 0;
                    var minor = 0;

                    foreach (var bb in baseAmount)
                    {
                        if (model.IncentiveClaimArea == "Inventory Management")
                        {
                            model.TotalAmount = bb.BaseAmount;
                            model.FinalAmount = (model.BaseAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        if (model.IncentiveClaimArea == "In House Application Test")
                        {
                            model.TotalAmount = bb.BaseAmount;
                            model.FinalAmount = (model.BaseAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        //Server Management
                        if (bb.RegularClaimArea == "Hw Team Inventory Server")
                        {
                            if (bb.RegularClaimArea == "Hw Team Inventory Server" && bb.ClaimingField == "Server Management")
                            {
                                model.BaseAmount = bb.BaseAmount;
                                model.TotalAmount = model.BaseAmount;
                                model.FinalAmount = model.BaseAmount / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        if (bb.RegularClaimArea == "Production Line Personal Handset Tracking Server")
                        {
                            if (bb.RegularClaimArea == "Production Line Personal Handset Tracking Server" && bb.ClaimingField == "Server Management")
                            {
                                model.BaseAmount = bb.BaseAmount;
                                model.TotalAmount = model.BaseAmount;
                                model.FinalAmount = model.BaseAmount / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }

                        //First version
                        if (bb.RegularClaimArea == "First version Software Testing")
                        {
                            if (bb.RegularClaimArea == "First version Software Testing" && bb.ClaimingField == "First version Software Testing")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Issue Claim")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical + model.Major + model.Minor) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        
                        //Field Test Complete Incentive
                        else if (bb.RegularClaimArea == "Field (Network Test)")
                        {

                            if (bb.ClaimingField == "Field Test Complete Incentive")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            //if (bb.ClaimingField == "Each Critical Issue")//old
                            //{
                            //    var bAmount = bb.BaseAmount;
                            //    model.IssueAmount = (model.Critical) * bAmount;
                            //    model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                            //    model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                            //    model.ParticularPersonIncentive = model.FinalAmount;
                            //}
                            //new
                            if (bb.ClaimingField == "Each Issue Claim")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical + model.Major + model.Minor) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        else if (bb.RegularClaimArea == "CTS related Test (per SW version)")
                        {
                            if (bb.ClaimingField == "CTS related Test (per SW version)")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        else if (bb.RegularClaimArea == "Monkey Test (per SW version)")
                        {
                            if (bb.ClaimingField == "Monkey Test (per SW version)")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        else if (bb.RegularClaimArea == "Personal Use Findings")
                        {
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                critical = Convert.ToInt32(model.Critical * bAmount);
                            }
                            if (bb.ClaimingField == "Each Major Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                major = Convert.ToInt32(model.Major * bAmount);
                            }
                            if (bb.ClaimingField == "Each Minor Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                minor = Convert.ToInt32(model.Minor * bAmount);
                            }

                            if (critical == null)
                            {
                                critical = 0;
                            }
                            if (major == null)
                            {
                                major = 0;
                            }
                            if (minor == null)
                            {
                                minor = 0;
                            }
                            model.IssueAmount = critical + major + minor;
                            if (model.IssueAmount == null)
                            {
                                model.IssueAmount = 0;
                            }
                            model.TotalAmount = (model.IssueAmount);
                            model.FinalAmount = (model.IssueAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        else
                        {
                            if (bb.RegularClaimArea == bb.ClaimingField)
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.RegularClaimArea != bb.ClaimingField)
                            {
                                if (bb.ClaimingField == "Each Critical Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    critical = Convert.ToInt32(model.Critical * bAmount);
                                }
                                if (bb.ClaimingField == "Each Major Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    major = Convert.ToInt32(model.Major * bAmount);
                                }
                                if (bb.ClaimingField == "Each Minor Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    minor = Convert.ToInt32(model.Minor * bAmount);
                                }

                                if (critical == null)
                                {
                                    critical = 0;
                                }
                                if (major == null)
                                {
                                    major = 0;
                                }
                                if (minor == null)
                                {
                                    minor = 0;
                                }
                                model.IssueAmount = critical + major + minor;
                                if (model.IssueAmount == null)
                                {
                                    model.IssueAmount = 0;
                                }
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }


                     
                    }//end foreach

                    

                }//end smart
                if (qry1 == "Feature")
                {
                    if (model.IncentiveClaimArea == "Server Management (Hw Team Inventory Server)")
                    {
                        insResult.IncentiveClaimArea = "Hw Team Inventory Server";
                        insResult.ClaimingField = "Server Management";
                    }
                    if (model.IncentiveClaimArea == "Server Management (Production Line Personal Handset Tracking Server)")
                    {
                        insResult.IncentiveClaimArea = "Production Line Personal Handset Tracking Server";
                        insResult.ClaimingField = "Server Management";
                    }
                    if (model.IncentiveClaimArea == "Inventory Management")
                    {
                        insResult.IncentiveClaimArea = "Sw Qa Team Inventory";
                        insResult.ClaimingField = "Inventory Management";
                    }
                    baseAmount = (from pm in _dbEntities.SwQcAllIncentiveLists
                                  where pm.RegularClaimArea == insResult.IncentiveClaimArea.Trim() && pm.ProjectType == "Feature" && pm.IsActive==true
                                  select pm).ToList();

                    var critical = 0;
                    var major = 0;
                    var minor = 0;

                    foreach (var bb in baseAmount)
                    {
                        if (model.IncentiveClaimArea == "Inventory Management")
                        {
                            model.TotalAmount = bb.BaseAmount;
                            model.FinalAmount = (model.BaseAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        if (model.IncentiveClaimArea == "In House Application Test")
                        {
                            model.TotalAmount = bb.BaseAmount;
                            model.FinalAmount = (model.BaseAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        //Server Management
                        if (bb.RegularClaimArea == "Hw Team Inventory Server")
                        {
                            if (bb.RegularClaimArea == "Hw Team Inventory Server" && bb.ClaimingField == "Server Management")
                            {
                                model.BaseAmount = bb.BaseAmount;
                                model.TotalAmount = model.BaseAmount;
                                model.FinalAmount = model.BaseAmount / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        if (bb.RegularClaimArea == "Production Line Personal Handset Tracking Server")
                        {
                            if (bb.RegularClaimArea == "Production Line Personal Handset Tracking Server" && bb.ClaimingField == "Server Management")
                            {
                                model.BaseAmount = bb.BaseAmount;
                                model.TotalAmount = model.BaseAmount;
                                model.FinalAmount = model.BaseAmount / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }

                        //First version Software Testing
                        if (bb.RegularClaimArea == "First version Software Testing")
                        {
                            if (bb.RegularClaimArea == "First version Software Testing" && bb.ClaimingField == "First version Software Testing")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Issue Claim")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical + model.Major + model.Minor) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        //Field Test Complete Incentive
                        else if (bb.RegularClaimArea == "Field (Network Test)")
                        {

                            if (bb.ClaimingField == "Field Test Complete Incentive")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Issue Claim")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical + model.Major + model.Minor) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        else if (bb.RegularClaimArea == "CTS related Test (per SW version)")
                        {
                            if (bb.ClaimingField == "CTS related Test (per SW version)")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        else if (bb.RegularClaimArea == "Monkey Test (per SW version)")
                        {
                            if (bb.ClaimingField == "Monkey Test (per SW version)")
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                model.IssueAmount = (model.Critical) * bAmount;
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }
                        //else if (bb.RegularClaimArea == "CTS related Test (per SW version)" && bb.ClaimingField == "CTS related Test (per SW version)")
                        //{

                        //    model.BaseAmount = bb.BaseAmount;
                        //    model.IssueAmount = 0;
                        //    model.TotalAmount = (model.BaseAmount);
                        //    model.FinalAmount = (model.BaseAmount) / model.AssignedPersons;
                        //    model.ParticularPersonIncentive = model.FinalAmount;

                        //}
                        else if (bb.RegularClaimArea == "Personal Use Findings")
                        {
                            if (bb.ClaimingField == "Each Critical Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                critical = Convert.ToInt32(model.Critical * bAmount);
                            }
                            if (bb.ClaimingField == "Each Major Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                major = Convert.ToInt32(model.Major * bAmount);
                            }
                            if (bb.ClaimingField == "Each Minor Issue")
                            {
                                var bAmount = bb.BaseAmount;
                                minor = Convert.ToInt32(model.Minor * bAmount);
                            }

                            if (critical == null)
                            {
                                critical = 0;
                            }
                            if (major == null)
                            {
                                major = 0;
                            }
                            if (minor == null)
                            {
                                minor = 0;
                            }
                            model.IssueAmount = critical + major + minor;
                            if (model.IssueAmount == null)
                            {
                                model.IssueAmount = 0;
                            }
                            model.TotalAmount = (model.IssueAmount);
                            model.FinalAmount = (model.IssueAmount) / model.AssignedPersons;
                            model.ParticularPersonIncentive = model.FinalAmount;
                        }
                        else
                        {
                            if (bb.RegularClaimArea == bb.ClaimingField)
                            {
                                model.BaseAmount = bb.BaseAmount;
                            }
                            if (bb.RegularClaimArea != bb.ClaimingField)
                            {
                                if (bb.ClaimingField == "Each Critical Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    critical = Convert.ToInt32(model.Critical * bAmount);
                                }
                                if (bb.ClaimingField == "Each Major Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    major = Convert.ToInt32(model.Major * bAmount);
                                }
                                if (bb.ClaimingField == "Each Minor Issue")
                                {
                                    var bAmount = bb.BaseAmount;
                                    minor = Convert.ToInt32(model.Minor * bAmount);
                                }

                                if (critical == null)
                                {
                                    critical = 0;
                                }
                                if (major == null)
                                {
                                    major = 0;
                                }
                                if (minor == null)
                                {
                                    minor = 0;
                                }
                                model.IssueAmount = critical + major + minor;
                                if (model.IssueAmount == null)
                                {
                                    model.IssueAmount = 0;
                                }
                                model.TotalAmount = (model.BaseAmount + model.IssueAmount);
                                model.FinalAmount = (model.BaseAmount + model.IssueAmount) / model.AssignedPersons;
                                model.ParticularPersonIncentive = model.FinalAmount;
                            }
                        }

                    }//end foreach
                }

                _dbEntities.SwIncentive_Others.Add(model);
            }
            _dbEntities.SaveChanges();

            return "ok";
        }

        public List<Custom_Sw_IncentiveModel> GetOthersDetails()
        {
            var query = _dbEntities.Database.SqlQuery<Custom_Sw_IncentiveModel>(@"select top 50 

           [EmployeeCode],[OthersType],[ProjectName],
            case when cast(AssignedPersons as int) is null then 0 else AssignedPersons end as AssignedPersons,
            case when cast(TestPhaseId as int) is null then 0 else TestPhaseId end as TestPhaseId,
            case when cast(Critical as int) is null then 0 else Critical end as Critical,
            case when cast(Major as int) is null then 0 else Major end as Major,
            case when cast(Minor as int) is null then 0 else Minor end as Minor,
            case when cast(BaseAmount as decimal(16,2)) is null then 0.0 else BaseAmount end as BaseAmount,
            case when cast(IssueAmount as decimal(16,2)) is null then 0.0 else IssueAmount end as IssueAmount,
            case when cast(TotalAmount as decimal(16,2)) is null then 0.0 else TotalAmount end as TotalAmount,
            case when cast(ParticularPersonIncentive as decimal(16,2)) is null then 0.0 else ParticularPersonIncentive end as ParticularPersonIncentive,
            case when cast(FinalAmount as decimal(16,2)) is null then 0.0 else FinalAmount end as FinalAmount,
            MonNum,AddAmountRemarks,
            [IncentiveClaimArea],Month,Year as Year2,EffectiveMonth    
     
            from [CellPhoneProject].[dbo].[SwIncentive_Others] order by AddedDate desc").ToList();

            return query;
        }

        public List<SwQcIssueDetailModel> GetOthersDataForIncentive(string months, string years, string roles, string persons)
        {
            var query = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(@"select  
            [EmployeeCode],[OthersType],[ProjectName],
            case when cast(AssignedPersons as int) is null then 0 else AssignedPersons end as AssignedPersons,         
            case when cast(Critical as int) is null then 0 else Critical end as Critical,
            case when cast(Major as int) is null then 0 else Major end as Major,
            case when cast(Minor as int) is null then 0 else Minor end as Minor,
            case when cast(BaseAmount as decimal(16,2)) is null then 0.0 else BaseAmount end as BaseAmount,
            case when cast(IssueAmount as decimal(16,2)) is null then 0.0 else IssueAmount end as IssueAmount,
            case when cast(TotalAmount as decimal(16,2)) is null then 0.0 else TotalAmount end as TotalAmount,
            case when cast(ParticularPersonIncentive as decimal(16,2)) is null then 0.0 else ParticularPersonIncentive end as ParticularPersonIncentive,
            case when cast(FinalAmount as decimal(16,2)) is null then 0.0 else FinalAmount end as FinalAmount,
            MonNum,AddAmountRemarks,
            [IncentiveClaimArea],Month,Year as Year2,EffectiveMonth         
            from [CellPhoneProject].[dbo].[SwIncentive_Others] where MonNum={0} and Year={1}", Convert.ToInt32(months), Convert.ToInt32(years)).ToList();

            List<SwQcIssueDetailModel> globalStringsForPerEmployee = new List<SwQcIssueDetailModel>();

            foreach (var qq in query)
            {
                List<SwQcIssueDetailModel> newPenal = new List<SwQcIssueDetailModel>();
                var idList = qq.EmployeeCode.Split(',');

                foreach (var iiLst in idList)
                {
                    if (iiLst.Trim() == persons)
                    {
                        SwQcIssueDetailModel ss = new SwQcIssueDetailModel();
                        ss.ProjectName = qq.ProjectName;
                        ss.OthersType = qq.OthersType;
                        ss.AssignedPersons = qq.AssignedPersons;
                        ss.EmployeeCode = qq.EmployeeCode;
                        ss.Critical = qq.Critical;
                        ss.Major = qq.Major;
                        ss.Minor = qq.Minor;
                        ss.BaseAmount = qq.BaseAmount;
                        ss.IssueAmount = qq.IssueAmount;
                        ss.TotalAmount = qq.TotalAmount;
                        ss.ParticularPersonIncentive = qq.ParticularPersonIncentive;
                        ss.FinalAmount = qq.FinalAmount;
                        ss.EffectiveMonth = qq.EffectiveMonth;
                        ss.Month = qq.Month;
                        ss.Year2 = qq.Year2;

                        newPenal.Add(ss);
                    }
                }
                globalStringsForPerEmployee.AddRange(newPenal);
            }

            return globalStringsForPerEmployee;
        }

        public List<ProjectMasterModel> GetDataFromPenaltiesTablePerProject(string monNum1, string year, string projectName)
        {
            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"select Month, Year, ProjectName,ProblemName,ProblemSubCategory as SubCategory, SubCategoryQty as SubCategoryQuantity,Activated,Percentage as IssuePercentage,TotalIssuePercentage
             from [CellPhoneProject].[dbo].[PenaltiesForAllProjects] where ProjectName={0}
             order by id asc", projectName.Trim()).ToList();

            return query;
        }


        #endregion

        #region Penalties

        public List<ProjectMasterModel> GetAllProjectNamesForPenalties()
        {
            String connectionString1 = ConfigurationManager.ConnectionStrings["RbConnectionString"].ConnectionString;
            List<ProjectMasterModel> totalhistry = new List<ProjectMasterModel>();

            string resultQuery1 = "";

            using (var connection = new SqlConnection(connectionString1))
            {
                connection.Open();
                resultQuery1 = String.Format(@"select distinct Model as ProjectName,FORMAT(ReleaseDate, 'yyyy-MM-dd') as ReleaseDate 
                from RBSYNERGY.dbo.tblCellPhoneDepriciationPrice ttp where GETDATE()-ReleaseDate <= 200 and 
                ReleaseDate in (select top 1 ReleaseDate from RBSYNERGY.dbo.tblCellPhoneDepriciationPrice where ttp.Model=Model and 			
                GETDATE()-(select top 1 ReleaseDate from RBSYNERGY.dbo.tblCellPhoneDepriciationPrice where ttp.Model=Model order by ReleaseDate asc) <= 200 order by ReleaseDate asc)");

                var command = new SqlCommand(resultQuery1, connection);
                command.CommandTimeout = 6000;
                SqlDataReader dataReader = command.ExecuteReader();


                while (dataReader.Read())
                {
                    var tsoReport = new ProjectMasterModel();
                    tsoReport.ProjectName = Convert.ToString(dataReader["ProjectName"]);
                    tsoReport.ReleaseDate = Convert.ToDateTime(dataReader["ReleaseDate"]);
                    totalhistry.Add(tsoReport);
                }
            }
            return totalhistry;
        }

        public List<SwIncentive_PenaltiesForIssuesModel> GetPenaltiesForIssues(string months, string years, string roles, string persons)
        {
            int years1;
            int.TryParse(years, out years1);
            int mon;
            int.TryParse(months, out mon);

            var query = _dbEntities.Database.SqlQuery<SwIncentive_PenaltiesForIssuesModel>(@"
           select IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,CONVERT(DATETIME,ReleaseDate) as ReleaseDate,CONVERT(DATETIME,AddedDate) as AddingDate,CONVERT(DATETIME,StartDate) as MonthlyStartDate,	 
           CONVERT(DATETIME,ClosingDate) as  ClosingDate,CONVERT(DATETIME,MonthlyEndDate) as  MonthlyEndDate,DateDiffs,MarketDateDiff,cast(TotalPenalties as decimal(18,2)) as TotalPenalties,AssignedPersons,cast((cast(TotalPenalties as decimal(18,2))/cast(AssignedPersons as decimal(18,2))) as decimal(18,2))  as ParticularPersonsPenalties, cast((cast(TotalPenalties as decimal(18,2))/cast(AssignedPersons as decimal(18,2))) as decimal(18,2)) as FinalAmount,Month,MonNum,Year

             from
              (
	            select IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,ReleaseDate,AddedDate,StartDate1,StartDate,	 
	            ClosingDate, MonthlyEndDate,DateDiffs,MarketDateDiff, case when MarketDateDiff<=60 then DateDiffs*150 
	            when MarketDateDiff>=61 then DateDiffs*50  end as TotalPenalties,(select count(*) as ss from CellPhoneProject.dbo.CmnUsers cu where cu.IsActive=1 and cu.RoleName='QC') AS AssignedPersons,ParticularPersonsPenalties=0,FinalAmount=0,Month,MonNum,Year
	            from
	            (
		            select IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,ReleaseDate,AddedDate,StartDate1,StartDate,	 
		            ClosingDate, MonthlyEndDate,DATEDIFF(day,StartDate,MonthlyEndDate)+1 as DateDiffs,DATEDIFF(day,ReleaseDate,AddedDate)+1 as MarketDateDiff,DateName(month,DateAdd( month ,{4} ,0)-1) as Month,MONTH(StartDate) as MonNum, Year(StartDate) as Year
		            from 
		            (
				            select IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,ReleaseDate,AddedDate,StartDate1,StartDate,	 
				            ClosingDate, case when Month(MonthlyEndDate)>Month(StartDate) and YEAR(MonthlyEndDate)=YEAR(StartDate) then EOMONTH(StartDate)
				            when Month(MonthlyEndDate)<Month(StartDate)  and YEAR(MonthlyEndDate)=YEAR(StartDate) then EOMONTH(StartDate) else MonthlyEndDate end as MonthlyEndDate

				            from
				            (
				            select B.IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,ReleaseDate,B.AddedDate,StartDate1,B.StartDate,	 
				            Case when 
				            Status='CLOSED' then (select top 1 StartDate from [CellPhoneProject].[dbo].AftersalesPm_IssueVerificationStatusLog alg where  
				            alg.IssueVerificationId=B.IssueVerificationId and alg.LogStatus='CLOSED') 	
				            else (SELECT EOMONTH(B.StartDate)) 			
				            end as MonthlyEndDate,
				            Case when 
				            Status='CLOSED' then (select top 1 StartDate from [CellPhoneProject].[dbo].AftersalesPm_IssueVerificationStatusLog alg where  
				            alg.IssueVerificationId=B.IssueVerificationId and alg.LogStatus='CLOSED') 
		                    end as ClosingDate
				            from
				            (
					            select IssueVerificationId,ProjectMasterId,ModelName,Module,IssueDetails,IssueFrequency,IssueType,Status,ReleaseDate,AddedDate,StartDate as StartDate1,

					            case when StartDate=AddedDate then AddedDate 
						             when MONTH(StartDate)= MONTH(AddedDate) and Year(StartDate)= Year(AddedDate)  then AddedDate 
						             when StartDate<AddedDate then AddedDate 
						             when StartDate>AddedDate and MONTH(StartDate)!= MONTH(AddedDate) and Year(StartDate)= Year(AddedDate) then StartDate 
						             when StartDate>AddedDate and MONTH(StartDate)!= MONTH(AddedDate) and Year(StartDate)!= Year(AddedDate) then StartDate 
						             end as StartDate

					            from 
					            (
						            select afi.Id as IssueVerificationId,afi.ProjectMasterId,afi.ModelName,afi.Module,afi.IssueDetails,afi.IssueFrequency,afi.IssueType,afi.Status,
						            FORMAT(pdd.MarketClearanceDate, 'yyyy-MM-dd')  as ReleaseDate,FORMAT(afi.AddedDate, 'yyyy-MM-dd')  as AddedDate ,DATEFROMPARTS({1},{0},1)  as StartDate 

						            FROM [CellPhoneProject].[dbo].[AftersalesPm_IssueVerification] afi
						            inner join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterId=afi.ProjectMasterId
						            where pdd.MarketClearanceDate is not null 
						            and afi.Status not in ('QCDECLINED')

					            )A where MONTH(StartDate)={0} and Year(StartDate)={1}
				            )B 
			             )C 
		              )D where MONTH(StartDate)={0} and Year(StartDate)={1}
                  )E
               )F", months, years1, roles, persons, mon).ToList();

            return query;
        }


        public bool CheckPenaltiesSaved(string ProjectName, string ProblemName, int MonNum, int Year, string SubCategory, decimal TotalIssuePercentage)
        {
            List<PenaltiesForAllProjectModel> getIncentiveReports = null;
            //decimal DEBITAMT = Math.Round(1156.547m, 2);
            Decimal tt = Math.Round(TotalIssuePercentage, 4);

            string getIncentiveReportQuery =
                string.Format(@"select *  from [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            where ProjectName ='" + ProjectName + "'  and ProblemName ='" + ProblemName + "' and MonNum ='" + MonNum + "' and Year ='" + Year + "' and ProblemSubCategory ='" + SubCategory + "' ");
            getIncentiveReports =
                _dbEntities.Database.SqlQuery<PenaltiesForAllProjectModel>(getIncentiveReportQuery).ToList();

            if (getIncentiveReports != null && getIncentiveReports.Count != 0)
            {
                return true;
            }
            return false;
        }
        public List<ProjectMasterModel> SaveGetAllModelsHistory(string Model, string ReleaseDate, DateTime StartDate, DateTime endDate, String fNames, int mons, string years)
        {

            String userIdentity =
          System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            SqlConnection conn = new SqlConnection(_rbSynergies);
            conn.Open();

            DateTime releaseDates = Convert.ToDateTime(ReleaseDate);
            List<ProjectMasterModel> totalhistry = new List<ProjectMasterModel>();


            List<ProjectMasterModel> gobalLists = new List<ProjectMasterModel>();
            DateTime sdd = StartDate.AddDays(30);

            int monNum = 0;
            int mYear = 0;
            string months = "";

            #region com

            //            SqlCommand command = new SqlCommand(String.Format(@"select kk.ProblemName,kk.SubCategory,sum(kk.SubCategoryQuantity) as SubCategoryQuantity,sum(kk.Activated) as Activated , DATENAME(MONTH, '{2}') as Month, DATEPART(MONTH, '{2}') as MonNum,  DATEPART(YEAR, '{2}') as Year
            //                from
            //                (SELECT IssueType as ProblemName,IssueName as SubCategory,COUNT(distinct ServiceID) as SubCategoryQuantity,
            //                (select COUNT(*) from RBSYNERGY.dbo.tblproductregistration tpr 
            //                left join RBSYNERGY.dbo.tblProductMaster tm on tpr.ProductModelID=tm.ProductID
            //                where (tpr.Imei_One in (select BarCode from RBSYNERGY.dbo.tblBarCodeInv where  tpr.Imei_One=BarCode))
            //                and (tpr.RegistrationDate between '{1}' and DATEADD(day, 30, '{1}')) and tm.ProductModel='{0}') as Activated
            //
            //               
            //                FROM (select distinct I.IssueType,SI.IssueID,sm.ServiceID,SM.Imei_One,i.IssueName
            //                from WSMS.dbo.ServiceIssue SI,WSMS.dbo.Issues I,WSMS.dbo.ServiceMaster SM
            //                where SI.IssueID=I.IssueID          
            //                and  sm.Model='{0}' and sm.ServicePlaceDate between '{1}' and DATEADD(day, 30, '{1}')
            //                and I.IssueType in ('AUDIO','BATTERY','HANG','NETWORK','TOUCH') 
            //                and I.IssueName in ('Ringer_No Sound','Battery_Drain Fast','Hang_Touch','Hang_While Apps Used','Sim_Sim Data Connection Failed','Touch _Some Times Not Work')
            //                and SI.ServiceID=SM.ServiceID and SM.ServicePointID not in (69) and
            //                SM.Model='{0}' and (SM.Imei_One in (select  barcode from RBSYNERGY.dbo.tblBarCodeInv tbc where tbc.Model='{0}') )  
            //                group by I.IssueName,I.IssueType,SM.Imei_One,sm.ServiceID,SI.IssueID
            //                ) as dt
            //                Group by IssueType,IssueName)kk group by kk.ProblemName,kk.SubCategory 
            //                order by kk.ProblemName,kk.SubCategory", Model, StartDate, sdd), conn);

            #endregion

            SqlCommand command = new SqlCommand(String.Format(@"

            select kk.ProblemName,kk.SubCategory,sum(kk.SubCategoryQuantity) as SubCategoryQuantity,sum(kk.Activated) as Activated , DATENAME(MONTH, '{2}') as Month, DATEPART(MONTH, '{2}') as MonNum,  DATEPART(YEAR, '{2}') as Year
            from
            (

		            SELECT IssueType as ProblemName,IssueName as SubCategory,COUNT(distinct ServiceID) as SubCategoryQuantity,
		            (select COUNT(*) from RBSYNERGY.dbo.tblproductregistration tpr 		
		            left join RBSYNERGY.dbo.tblBarCodeInv tii on tpr.Imei_One=tii.BarCode
		            where tii.Model='{0}' 	and tpr.RegistrationDate between '{1}' and DATEADD(day, 30, '{1}')) as Activated
               
		            FROM (
				            select distinct I.IssueType,SI.IssueID,sm.ServiceID,SM.Imei_One,i.IssueName
				            from WSMS.dbo.ServiceIssue SI
				            left join WSMS.dbo.Issues I on SI.IssueID=I.IssueID  
				            left join WSMS.dbo.ServiceMaster SM on SI.ServiceID=SM.ServiceID 				

				            where sm.ServicePlaceDate between '{1}' and DATEADD(day, 30, '{1}')
				            and I.IssueType in ('AUDIO','BATTERY','HANG','NETWORK','TOUCH') 
				            and I.IssueName in ('Ringer_No Sound','Battery_Drain Fast','Hang_Touch','Hang_While Apps Used','Sim_Sim Data Connection Failed','Touch _Some Times Not Work')				
				            and SM.ServicePointID not in (69) and
				            SM.Model='{0}' and (SM.Imei_One in (select  barcode from RBSYNERGY.dbo.tblBarCodeInv tbc where tbc.Model='{0}' and barcode=SM.Imei_One) )  

				            group by I.IssueName,I.IssueType,SM.Imei_One,sm.ServiceID,SI.IssueID
		            ) as dt Group by IssueType,IssueName

            )kk group by kk.ProblemName,kk.SubCategory order by kk.ProblemName,kk.SubCategory
            ", Model, StartDate, sdd), conn);

            command.CommandTimeout = 6000;

            SqlDataReader dataReader = command.ExecuteReader();
            decimal subQtyTotal = 0;
            decimal totalIssueSum = 0;
            decimal ttPercentage = 0;
            while (dataReader.Read())
            {
                var custDetails = new ProjectMasterModel();
                custDetails.ProjectName = Model;
                custDetails.EffectiveMonDate = sdd;
                custDetails.ProblemName = Convert.ToString(dataReader["ProblemName"]);
                custDetails.SubCategory = Convert.ToString(dataReader["SubCategory"]);
                custDetails.Month = dataReader["Month"].ToString();
                months = custDetails.Month;
                custDetails.Year = Convert.ToInt32(dataReader["Year"]);
                mYear = custDetails.Year;
                custDetails.MonNum = Convert.ToInt32(dataReader["MonNum"]);
                monNum = custDetails.MonNum;

                custDetails.SubCategoryQuantity = Convert.ToDecimal(dataReader["SubCategoryQuantity"]);
                custDetails.Activated = Convert.ToDecimal(dataReader["Activated"]);
                custDetails.IssuePercentage = Convert.ToDecimal(System.Math.Round((custDetails.SubCategoryQuantity * 100) / custDetails.Activated, 4));

                ttPercentage = ttPercentage + Convert.ToDecimal(custDetails.IssuePercentage);

                subQtyTotal = subQtyTotal + Convert.ToDecimal(custDetails.SubCategoryQuantity);

                if (custDetails.SubCategory == "Ringer_No Sound" || custDetails.SubCategory == "Hang_Touch" || custDetails.SubCategory == "Hang_While Apps Used")
                {
                    var ss = 0.5;
                    custDetails.TotalIssuePercentage = Math.Round(Convert.ToDecimal(ss) * custDetails.IssuePercentage, 4);
                }
                if (custDetails.SubCategory == "Sim_Sim Data Connection Failed")
                {
                    var ss = 0.6;
                    custDetails.TotalIssuePercentage = Math.Round(Convert.ToDecimal(ss) * custDetails.IssuePercentage, 4);
                }
                if (custDetails.SubCategory == "Battery_Drain Fast" || custDetails.SubCategory == "Touch _Some Times Not Work")
                {
                    var ss = 0.2;
                    custDetails.TotalIssuePercentage = Math.Round(Convert.ToDecimal(ss) * custDetails.IssuePercentage, 4);
                }

                totalIssueSum = totalIssueSum + Convert.ToDecimal(custDetails.TotalIssuePercentage);

                totalhistry.Add(custDetails);
            }
            var proDetails = new ProjectMasterModel();
            proDetails.MonNum = monNum;
            proDetails.Month = months;
            proDetails.Year = mYear;
            proDetails.EffectiveMonDate = sdd;
            proDetails.ProjectName = Model;
            proDetails.ProblemName = "Totals :";
            proDetails.SubCategory = "---";
            proDetails.SubCategoryQuantity = subQtyTotal;
            proDetails.Activated = 0;
            proDetails.IssuePercentage = Math.Round(Convert.ToDecimal(ttPercentage), 4);
            proDetails.TotalIssuePercentage = Math.Round(Convert.ToDecimal(totalIssueSum), 4);

            totalhistry.Add(proDetails);

            var isSaveCheck = false;

            foreach (var fSave in totalhistry)
            {
                isSaveCheck = CheckPenaltiesSaved(fSave.ProjectName.Trim(), fSave.ProblemName.Trim(), fSave.MonNum, fSave.Year, fSave.SubCategory.Trim(),
                    fSave.TotalIssuePercentage);

                if (isSaveCheck == false)
                {
                    var model = new PenaltiesForAllProject();

                    model.ReleaseDate = Convert.ToDateTime(ReleaseDate);
                    model.EffectiveMonDate = fSave.EffectiveMonDate;
                    model.ProjectName = fSave.ProjectName;
                    model.ProblemName = fSave.ProblemName;
                    model.ProblemSubCategory = fSave.SubCategory;
                    model.SubCategoryQty = fSave.SubCategoryQuantity;
                    model.Activated = fSave.Activated;
                    model.Percentage = Math.Round(Convert.ToDecimal(fSave.IssuePercentage), 4);//fSave.IssuePercentage;
                    model.TotalIssuePercentage = Math.Round(Convert.ToDecimal(fSave.TotalIssuePercentage), 4);
                    model.Month = fSave.Month;
                    model.MonNum = fSave.MonNum;
                    model.Year = fSave.Year;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;


                    _dbEntities.PenaltiesForAllProjects.Add(model);
                    _dbEntities.SaveChanges();
                }
            }

            conn.Close();

            return totalhistry;
        }

        public List<ProjectMasterModel> GetAllModelsHistory(string model, int mons, string year)
        {
            int years;
            int.TryParse(year, out years);

            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
  SELECT  ProjectName,sum(TotalIssuePercentage) as TotalIssuePercentage
  FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]  where  MonNum<={1} and Year<={2} and ProjectName='{0}'  group by ProjectName", model, mons, years).ToList();

            return query;
        }

        public List<ProjectMasterModel> GetDataFromPenaltiesTable(string monNum1, string year)
        {
            int monNums;
            int.TryParse(monNum1, out monNums);
            int years;
            int.TryParse(year, out years);

            #region com
            //            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
            //          SELECT * FROM
            //            (SELECT ProjectName,sum(TotalIssuePercentage) as TotalIssuePercentage
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //            group by ProjectName) t1 
            //            INNER JOIN
            //            (SELECT x.ProjectName,x.MonNum,x.Month,x.Year
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //            INNER JOIN
            //                (SELECT ProjectName, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //                GROUP BY ProjectName) a 
            //            ON x.ProjectName = a.ProjectName 
            //            AND x.MonNum = a.MonNum
            //
            //            GROUP BY x.ProjectName ,x.MonNum,x.Month,x.Year) t2
            //
            //            ON t1.ProjectName = t2.ProjectName where MonNum={0} and Year={1}", monNums, years).ToList();

            //            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
            //             SELECT * FROM
            //            (SELECT ProjectName,sum(TotalIssuePercentage) as TotalIssuePercentage
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
            //            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //            group by ProjectName) t1 
            //            INNER JOIN
            //            (SELECT x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year
            //            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            //            INNER JOIN
            //                (SELECT ProjectName,ReleaseDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
            //                FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
            //	            where  MonNum<={0} and Year<={1} and ProblemName in ('Totals :') 
            //                GROUP BY ProjectName,ReleaseDate) a 
            //            ON x.ProjectName = a.ProjectName 
            //            AND x.MonNum = a.MonNum
            //
            //            GROUP BY x.ProjectName,x.ReleaseDate,x.MonNum,x.Month,x.Year) t2
            //
            //            ON t1.ProjectName = t2.ProjectName where MonNum={0} and Year={1}
            //            order by TotalIssuePercentage desc
            //            ", monNums, years).ToList();
            #endregion

            var query = _dbEntities.Database.SqlQuery<ProjectMasterModel>(@"
             SELECT * FROM
            (
	            SELECT ProjectName,sum(TotalIssuePercentage) as TotalIssuePercentage
	            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] 
	            where (MonNum>={0}  or MonNum<={0}) and Year<={1}  and ProblemName in ('Totals :') 
	            group by ProjectName
            ) t1 

            INNER JOIN

            (
            SELECT x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year
            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects] x
            INNER JOIN
                (
		            SELECT ProjectName,ReleaseDate, DATEADD(month,4, ReleaseDate) as PenaltiesDate, MAX(MonNum) AS MonNum, MAX(Year) as Year
		            FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]
		            where  (MonNum>={0} or MonNum<={0}) and Year <= {1} and ProblemName in ('Totals :') 
		            GROUP BY ProjectName,ReleaseDate) a 
		            ON x.ProjectName = a.ProjectName 
		            AND x.MonNum >= a.MonNum 
		            GROUP BY x.ProjectName,x.ReleaseDate,PenaltiesDate,x.MonNum,x.Month,x.Year) t2

            ON t1.ProjectName = t2.ProjectName where MonNum>={0} and  Year <= {1} 

            and Month(PenaltiesDate) >={0} and Year(PenaltiesDate) = {1}
            order by TotalIssuePercentage desc", monNums, years).ToList();

            return query;
        }

       
        #endregion

        #region Accessories Test
        public List<SwQcAssignsFromQcHeadModel> GetAccessoriesModel(long userId)
        {
            var query =
              _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct SwQcAssignId,SwQcHeadAssignId,ProjectMasterId,TestPhaseID,ProjectType,ProjectName,AccessoriesTestType
                from CellPhoneProject.dbo.SwQcAssignsFromQcHead sp where sp.Status='ASSIGNED' and (AccessoriesTestType is not null) and sp.SwQcUserId={0} ", userId).ToList();
            return query;
        }

        public string SaveAccessoriesTest(List<SwQcEarphoneTestModel> issueList, List<SwQcEarphoneTestModel> issueList1, long swQcHeadAssignId, long swQcAssignId, string projectType, long proId, long testId)
        {
            String userIdentity =
           System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.ProjectMasters
                          where swQcHead.ProjectMasterId == proId
                          select swQcHead).FirstOrDefault();

            if (projectType == ("Feature").Trim())
            {
                foreach (var swQcIssues in issueList)
                {
                    SwQcEarphoneTest model = new SwQcEarphoneTest();

                    model.ProjectMasterId = proId;
                    model.SwQcHeadAssignId = swQcHeadAssignId;
                    model.SwQcAssignId = swQcAssignId;
                    model.TestPhaseID = testId;
                    model.ProjectName = query1.ProjectName.Trim();
                    model.ProjectType = projectType.Trim();
                    model.HeadphoneModel = swQcIssues.HeadphoneModel;
                    model.MusicPlayerPlayback = swQcIssues.MusicPlayerPlayback;
                    model.VideoPlayerPlayback = swQcIssues.VideoPlayerPlayback;
                    model.VoiceCall = swQcIssues.VoiceCall;
                    model.VoiceCallController = swQcIssues.VoiceCallController;
                    model.FmPlayback = swQcIssues.FmPlayback;
                    model.Controller = swQcIssues.Controller;
                    model.Remarks = swQcIssues.Remarks;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    _dbEntities.SwQcEarphoneTests.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }
            else if (projectType == ("Smart").Trim())
            {
                foreach (var swQcIssues in issueList1)
                {
                    SwQcEarphoneTest model = new SwQcEarphoneTest();

                    model.ProjectMasterId = proId;
                    model.SwQcHeadAssignId = swQcHeadAssignId;
                    model.SwQcAssignId = swQcAssignId;
                    model.TestPhaseID = testId;
                    model.ProjectName = query1.ProjectName.Trim();
                    model.ProjectType = projectType.Trim();
                    model.HeadphoneModel = swQcIssues.HeadphoneModel;
                    model.MusicPlayerPlayback = swQcIssues.MusicPlayerPlayback;
                    model.VideoPlayerPlayback = swQcIssues.VideoPlayerPlayback;
                    model.MusicBase = swQcIssues.MusicBase;
                    model.YoutubePlayback = swQcIssues.YoutubePlayback;
                    model.YoutubeController = swQcIssues.YoutubeController;
                    model.VoiceCall = swQcIssues.VoiceCall;
                    model.VoiceCallController = swQcIssues.VoiceCallController;
                    model.FmPlayback = swQcIssues.FmPlayback;
                    model.FmController = swQcIssues.FmController;
                    model.VolumeController = swQcIssues.VolumeController;
                    model.HighEndDevice = swQcIssues.HighEndDevice;
                    model.MidRangeDevice = swQcIssues.MidRangeDevice;
                    model.LowerMidRangeDevice = swQcIssues.LowerMidRangeDevice;
                    model.LowRangeDevice = swQcIssues.LowRangeDevice;
                    model.Remarks = swQcIssues.Remarks;
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    _dbEntities.SwQcEarphoneTests.AddOrUpdate(model);
                    _dbEntities.SaveChanges();
                }
            }
            _dbEntities.SaveChanges();
            return "ok";
        }
        public List<SwQcEarphoneTestModel> GetSavedAccessoriesDataEarphone(string swQcheadId, string swQcAssignId)
        {
            long swQcHeadIds;
            long.TryParse(swQcheadId, out swQcHeadIds);

            long swQcAssignIds;
            long.TryParse(swQcAssignId, out swQcAssignIds);

            var query =
             _dbEntities.Database.SqlQuery<SwQcEarphoneTestModel>(@"select * from CellPhoneProject.dbo.[SwQcEarphoneTest] sp where sp.SwQcHeadAssignId={0}
             and sp.SwQcAssignId={1} ", swQcHeadIds, swQcAssignIds).ToList();

            return query;
        }

        public string SaveAccessoriesIssueDelete(SwQcEarphoneTestModel supplierUpdate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedAssembly = (from c in _dbEntities.SwQcEarphoneTests
                                   where c.AccessId == supplierUpdate.AccessId
                                   select c).FirstOrDefault();

            _dbEntities.SwQcEarphoneTests.Remove(updatedAssembly);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string SaveEditAccessoriesData(long accessIds, string headphoneModel1, string musicPlayerPlayback,
            string videoPlayerPlayback, string voiceCall, string voiceCallController, string fmPlayback, string fmController,
            string controller, string remarks, string musicBase, string youtubePlayback, string youtubeController,
            string volumeController, string highEndDevice, string midRangeDevice, string lowerMidRangeDevice,
            string lowRangeDevice)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcEarphoneTests where pm.AccessId == accessIds select pm).FirstOrDefault();

            query.HeadphoneModel = headphoneModel1;
            query.MusicPlayerPlayback = musicPlayerPlayback;
            query.VideoPlayerPlayback = videoPlayerPlayback;
            query.VoiceCall = voiceCall;
            query.VoiceCallController = voiceCallController;
            query.FmPlayback = fmPlayback;
            query.FmController = fmController;
            query.Controller = controller;
            query.Remarks = remarks;
            query.MusicBase = musicBase;
            query.YoutubePlayback = youtubePlayback;
            query.YoutubeController = youtubeController;
            query.VolumeController = volumeController;
            query.HighEndDevice = highEndDevice;
            query.MidRangeDevice = midRangeDevice;
            query.LowerMidRangeDevice = lowerMidRangeDevice;
            query.LowRangeDevice = lowRangeDevice;

            _dbEntities.SwQcEarphoneTests.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string SaveAccessoriesSubmittedProjectToQcHead(long swQcHeadIds, long swQcAssignIds)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            if (swQcHeadIds != 0)
            {
                var dbModel = _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(i => i.SwQcHeadAssignId == swQcHeadIds);
                if (dbModel != null)
                {
                    dbModel.Status = "QCCOMPLETED";
                    dbModel.SwQcFinishedTime = DateTime.Now;
                    dbModel.Updated = userId;
                    dbModel.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel).State = EntityState.Modified;
                }
                _dbEntities.SaveChanges();


                var dbModel2 =
                   _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(
                       i => i.SwQcAssignId == swQcAssignIds);

                dbModel2.Status = "QCCOMPLETED";
                dbModel2.SwQcEndTime = DateTime.Now;
                dbModel2.Updated = userId;
                dbModel2.UpdatedDate = DateTime.Now;

                _dbEntities.Entry(dbModel2).State = EntityState.Modified;
                _dbEntities.SaveChanges();
            }
            _dbEntities.SaveChanges();
            return "OK";
        }

        public List<SwQcEarphoneTestModel> GetEarphoneDataForDetails(string projectId, string swqcInchargeId)
        {
            long swqcInchargeIds;
            long.TryParse(swqcInchargeId, out swqcInchargeIds);

            var query = _dbEntities.Database.SqlQuery<SwQcEarphoneTestModel>(@"select sq.*,cs.UserFullName as DoneBy from [CellPhoneProject].[dbo].[SwQcEarphoneTest] sq
            left join [CellPhoneProject].[dbo].[CmnUsers] cs on cs.CmnUserId=sq.Added
             where  SwQcHeadAssignId={0}", swqcInchargeIds).ToList();

            return query;

        }

        public List<SwQcHeadAssignsFromPmModel> GetAccessoriesModelForExcel()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select distinct ProjectName,ProjectType from CellPhoneProject.dbo.SwQcHeadAssignsFromPm where AccessoriesTestType is not null").ToList();

            return query;
        }

        public List<SwQcEarphoneTestModel> GetAccessListForExportEarphone(string projectName, string allOrLatest)
        {
            var query = new List<SwQcEarphoneTestModel>();

            if (projectName != "0" && allOrLatest == "Latest")
            {
                query = _dbEntities.Database.SqlQuery<SwQcEarphoneTestModel>(@"select * from
                (select SwQcHeadAssignId,ProjectName,ProjectType,HeadphoneModel,MusicPlayerPlayback,VideoPlayerPlayback,VoiceCall,VoiceCallController,FmPlayback,FmController,
                Controller,Remarks,MusicBase,YoutubePlayback,YoutubeController,VolumeController,HighEndDevice,MidRangeDevice,LowerMidRangeDevice,LowRangeDevice
                from CellPhoneProject.dbo.SwQcEarphoneTest
                where ProjectName={0}
                group by SwQcHeadAssignId,ProjectName,ProjectType,HeadphoneModel,MusicPlayerPlayback,VideoPlayerPlayback,VoiceCall,VoiceCallController,FmPlayback,FmController,
                Controller,Remarks,MusicBase,YoutubePlayback,YoutubeController,FmController,VolumeController,HighEndDevice,MidRangeDevice,LowerMidRangeDevice,LowRangeDevice)s
                where SwQcHeadAssignId=(select top 1 ss.SwQcHeadAssignId from CellPhoneProject.dbo.SwQcEarphoneTest ss where ss.ProjectName={0} order by ss.SwQcHeadAssignId desc)
                order by s.SwQcHeadAssignId desc", projectName).ToList();

            }
            if (projectName != "0" && allOrLatest == "All")
            {
                query = _dbEntities.Database.SqlQuery<SwQcEarphoneTestModel>(@"
                select SwQcHeadAssignId,ProjectName,ProjectType,HeadphoneModel,MusicPlayerPlayback,VideoPlayerPlayback,VoiceCall,VoiceCallController,FmPlayback,FmController,
                Controller,Remarks,MusicBase,YoutubePlayback,YoutubeController,FmController,VolumeController,HighEndDevice,MidRangeDevice,LowerMidRangeDevice,LowRangeDevice
                from CellPhoneProject.dbo.SwQcEarphoneTest
                where ProjectName={0}
                group by SwQcHeadAssignId,ProjectName,ProjectType,HeadphoneModel,MusicPlayerPlayback,VideoPlayerPlayback,VoiceCall,VoiceCallController,FmPlayback,FmController,
                Controller,Remarks,MusicBase,YoutubePlayback,YoutubeController,FmController,VolumeController,HighEndDevice,MidRangeDevice,LowerMidRangeDevice,LowRangeDevice
                order by SwQcHeadAssignId asc", projectName).ToList();

            }

            return query;
        }

        public string SaveBatteryTest(List<SwQcBatteryTestModel> issueList3, long swQcHeadAssignId, long swQcAssignId, string projectType, long proId,
            long testId, string accessoriesTestType)
        {
            String userIdentity =
         System.Web.HttpContext.Current.User.Identity.Name;

            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.ProjectMasters
                          where swQcHead.ProjectMasterId == proId
                          select swQcHead).FirstOrDefault();


            foreach (var swQcIssues in issueList3)
            {
                SwQcBatteryTest model = new SwQcBatteryTest();

                model.ProjectMasterId = proId;
                model.SwQcHeadAssignId = swQcHeadAssignId;
                model.SwQcAssignId = swQcAssignId;
                model.TestPhaseID = testId;
                model.ProjectName = query1.ProjectName.Trim();
                model.ProjectType = projectType.Trim();
                model.BatterymAh = Convert.ToInt32(swQcIssues.BatterymAh);
                model.CheckPoints = swQcIssues.CheckPoints;
                model.HundredToNighty = swQcIssues.HundredToNighty;
                model.NightyToEighty = swQcIssues.NightyToEighty;
                model.EightyToSeventy = swQcIssues.EightyToSeventy;
                model.SeventyToSixty = swQcIssues.SeventyToSixty;
                model.SixtyToFifty = swQcIssues.SixtyToFifty;
                model.FiftyToFourty = swQcIssues.FiftyToFourty;
                model.FourtyToThirty = swQcIssues.FourtyToThirty;
                model.ThirtyToTwenty = swQcIssues.ThirtyToTwenty;
                model.TwentyToTen = swQcIssues.TwentyToTen;
                model.TenToZero = swQcIssues.TenToZero;
                model.AverageFullDischarge = swQcIssues.AverageFullDischarge;
                model.Added = userId;
                model.AddedDate = DateTime.Now;

                _dbEntities.SwQcBatteryTests.Add(model);
                _dbEntities.SaveChanges();
            }


            _dbEntities.SaveChanges();
            return "ok";
        }

        public List<SwQcBatteryTestModel> GetSavedAccessoriesDataBattery(string swQcheadId, string swQcAssignId)
        {
            long swQcHeadIds;
            long.TryParse(swQcheadId, out swQcHeadIds);

            long swQcAssignIds;
            long.TryParse(swQcAssignId, out swQcAssignIds);

            var query =
             _dbEntities.Database.SqlQuery<SwQcBatteryTestModel>(@"select * from CellPhoneProject.dbo.[SwQcBatteryTest] sp where sp.SwQcHeadAssignId={0}
             and sp.SwQcAssignId={1} ", swQcHeadIds, swQcAssignIds).ToList();

            return query;
        }
        public List<SwQcGlassProtectorTestModel> GetSavedGlassProtectorAndChargerData(string swQcheadId, string swQcAssignId)
        {
            long swQcHeadIds;
            long.TryParse(swQcheadId, out swQcHeadIds);

            long swQcAssignIds;
            long.TryParse(swQcAssignId, out swQcAssignIds);

            var query1 =
                (from swpm in _dbEntities.SwQcHeadAssignsFromPms where swpm.SwQcHeadAssignId == swQcHeadIds select swpm)
                    .FirstOrDefault();
            var query = new List<SwQcGlassProtectorTestModel>();

            if (query1.AccessoriesTestType == "Glass Protector")
            {
                query =
               _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select [ProjectMasterId],[SwQcHeadAssignId]
              ,[SwQcAssignId]
              ,[TestPhaseID]
              ,[ProjectName]
              ,[ProjectType]
              ,[IssueScenario]
              ,[ExpectedOutcome]
              ,[WaltonQcStatus],IssueSerial
              ,[Upload] from CellPhoneProject.dbo.[SwQcGlassProtectorTest] sp where sp.SwQcHeadAssignId={0}
             and sp.SwQcAssignId={1} ", swQcHeadIds, swQcAssignIds).ToList();

            }
            else if (query1.AccessoriesTestType == "Charger")
            {
                query =
               _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select [ProjectMasterId],[SwQcHeadAssignId]
              ,[SwQcAssignId]
              ,[TestPhaseID]
              ,[ProjectName]
              ,[ProjectType]
              ,[IssueScenario]
              ,[ExpectedOutcome]
              ,[WaltonQcStatus],IssueSerial
              ,[Upload] from CellPhoneProject.dbo.[SwQcChargerTest] sp where sp.SwQcHeadAssignId={0}
             and sp.SwQcAssignId={1} ", swQcHeadIds, swQcAssignIds).ToList();
            }

            return query;
        }
        public string SaveBatteryIssueDelete(SwQcBatteryTestModel supplierUpdate)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);


            var updatedAssembly = (from c in _dbEntities.SwQcBatteryTests
                                   where c.BatteryId == supplierUpdate.BatteryId
                                   select c).FirstOrDefault();

            _dbEntities.SwQcBatteryTests.Remove(updatedAssembly);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string SaveEditBatteryData(long batteryIds, string checkPoints1, string batterymAh, string hundredToNighty,
            string nightyToEighty, string eightyToSeventy, string seventyToSixty, string sixtyToFifty, string fiftyToFourty,
            string fourtyToThirty, string thirtyToTwenty, string twentyToTen, string tenToZero, string averageFullDischarge)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcBatteryTests where pm.BatteryId == batteryIds select pm).FirstOrDefault();

            query.CheckPoints = checkPoints1;
            query.BatterymAh = Convert.ToInt32(batterymAh);
            query.HundredToNighty = hundredToNighty;
            query.NightyToEighty = nightyToEighty;
            query.EightyToSeventy = eightyToSeventy;
            query.SeventyToSixty = seventyToSixty;
            query.SixtyToFifty = sixtyToFifty;
            query.FiftyToFourty = fiftyToFourty;
            query.FourtyToThirty = fourtyToThirty;
            query.ThirtyToTwenty = thirtyToTwenty;
            query.TwentyToTen = twentyToTen;
            query.TenToZero = tenToZero;
            query.AverageFullDischarge = averageFullDischarge;

            _dbEntities.SwQcBatteryTests.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public List<SwQcBatteryTestModel> GetSavedBatteryDataForDetails(string projectId, string swqcInchargeId)
        {
            long projectIds;
            long.TryParse(projectId, out projectIds);

            long swqcInchargeIds;
            long.TryParse(swqcInchargeId, out swqcInchargeIds);

            var query =
             _dbEntities.Database.SqlQuery<SwQcBatteryTestModel>(@"select * from CellPhoneProject.dbo.[SwQcBatteryTest] sp where sp.SwQcHeadAssignId={0} ", swqcInchargeIds).ToList();

            return query;
        }

        public List<SwQcBatteryTestModel> GetAccessListForExportBattery(string projectName, string allOrLatest)
        {
            var query = new List<SwQcBatteryTestModel>();

            if (projectName != "0" && allOrLatest == "Latest")
            {
                query = _dbEntities.Database.SqlQuery<SwQcBatteryTestModel>(@"select * from
                (select SwQcHeadAssignId,ProjectName,ProjectType,CheckPoints,[BatterymAh],[HundredToNighty],[NightyToEighty],[EightyToSeventy],[SeventyToSixty],[SixtyToFifty],[FiftyToFourty],[FourtyToThirty],
                [ThirtyToTwenty],[TwentyToTen],[TenToZero],[AverageFullDischarge]
                from CellPhoneProject.dbo.[SwQcBatteryTest]
                where ProjectName={0}
                group by SwQcHeadAssignId,ProjectName,ProjectType,CheckPoints,[BatterymAh],[HundredToNighty],[NightyToEighty],[EightyToSeventy],[SeventyToSixty],[SixtyToFifty],[FiftyToFourty],[FourtyToThirty],
                [ThirtyToTwenty],[TwentyToTen],[TenToZero],[AverageFullDischarge])s
                where SwQcHeadAssignId=(select top 1 ss.SwQcHeadAssignId from CellPhoneProject.dbo.[SwQcBatteryTest] ss where ss.ProjectName={0} order by ss.SwQcHeadAssignId desc)
                order by s.SwQcHeadAssignId desc", projectName).ToList();

            }
            if (projectName != "0" && allOrLatest == "All")
            {
                query = _dbEntities.Database.SqlQuery<SwQcBatteryTestModel>(@"select SwQcHeadAssignId,ProjectName,ProjectType,CheckPoints,[BatterymAh],[HundredToNighty],[NightyToEighty],[EightyToSeventy],[SeventyToSixty],[SixtyToFifty],[FiftyToFourty],[FourtyToThirty],
                [ThirtyToTwenty],[TwentyToTen],[TenToZero],[AverageFullDischarge] from CellPhoneProject.dbo.[SwQcBatteryTest]
                where ProjectName={0}
                group by SwQcHeadAssignId,ProjectName,ProjectType,CheckPoints,[BatterymAh],[HundredToNighty],[NightyToEighty],[EightyToSeventy],[SeventyToSixty],[SixtyToFifty],[FiftyToFourty],[FourtyToThirty],
                [ThirtyToTwenty],[TwentyToTen],[TenToZero],[AverageFullDischarge]
                order by SwQcHeadAssignId asc
                ", projectName).ToList();

            }

            return query;
        }

        #endregion

        #region FieldTest New
        public List<SwQcAssignsFromQcHeadModel> GetFieldTestModel(long userId)
        {
            var query =
            _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct SwQcAssignId,SwQcHeadAssignId,ProjectMasterId,sp.TestPhaseID,ProjectType,ProjectName,st.TestPhaseName,sp.SoftwareVersionNo, CONVERT(VARCHAR(10),SwQcHeadToQcAssignTime, 120) as SwQcAssignTimeByHead
            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sp left join CellPhoneProject.dbo.SwQcTestPhase st on sp.TestPhaseID=st.TestPhaseID
            where sp.Status='ASSIGNED' and st.TestPhaseName='Field (Network Test)' and sp.SwQcUserId={0} ", userId).ToList();
            return query;
        }

        public List<SwQcFieldTestStaticDataModel> GetFieldTestDetailsData(string swQcheadId, string proName, string swQcAssignId)
        {
            long swQcheadIds;
            long.TryParse(swQcheadId, out swQcheadIds);

            long swQcAssignIds;
            long.TryParse(swQcAssignId, out swQcAssignIds);

            var query =
           _dbEntities.Database.SqlQuery<SwQcFieldTestStaticDataModel>(@"select * from
            (select 
            STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
            and sw.SwQcHeadAssignId=swq.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
            sf.*,sp.TestPhaseID,SWQ.ProjectName,Status,SwQcAssignId,SwQcHeadAssignId,ProjectMasterId,SoftwareVersionName,SoftwareVersionNo

            from  [CellPhoneProject].[dbo].[SwQcFieldTestStaticData] sf
            left join  [CellPhoneProject].[dbo].SwQcTestPhase sp on sp.TestPhaseName=sf.TestPhaseName
            left join  [CellPhoneProject].[dbo].[SwQcAssignsFromQcHead] swq on swq.TestPhaseID=sp.TestPhaseID
            where swq.ProjectName={1} and swq.Status='ASSIGNED' and swq.SwQcHeadAssignId={0} and swq.SwQcAssignId={2})x ", swQcheadIds, proName.Trim(), swQcAssignIds).ToList();


            return query;
        }

        public string SaveOrUpdateFieldTestData(List<SwQcFieldTestDetailModel> issueList, List<SwQcFieldTestDetailModel> issueList1, string SoftwareVersionName1, string FrequencyBand33, string operatorStatus, long swQcHeadAssignId,
         long swQcAssignId, string projectType, long proId, long testId, string projectName, string attachment1,
         string benchmarkPhone1, string route1, string region1, string fieldTestResult1, string remarks1, string location1,
         string speedLimit1, string rssiBars1, string bRssiBars1)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var chkQuery =
                (from mm in _dbEntities.SwQcFieldTestDetails where mm.SwQcHeadAssignId == swQcHeadAssignId && mm.ProjectMasterId == proId && mm.ProjectName == projectName.Trim() select mm)
                    .FirstOrDefault();

            var proDetails = (from pm in _dbEntities.SwQcHeadAssignsFromPms
                              where pm.SwQcHeadAssignId == swQcHeadAssignId && pm.ProjectName == projectName.Trim()
                              select pm).FirstOrDefault();

            if (chkQuery != null)
            {
                var ckqury = (from mm in _dbEntities.SwQcFieldTestDetails
                              where mm.SwQcHeadAssignId == swQcHeadAssignId && mm.ProjectMasterId == proId && mm.ProjectName == projectName.Trim()
                                  && mm.Route != null && mm.Region != null
                              select mm).FirstOrDefault();

                if (ckqury == null && operatorStatus == "true")
                {
                    var fields = new SwQcFieldTestDetail();
                    fields.SwQcHeadAssignId = swQcHeadAssignId;
                    fields.SwQcAssignId = swQcAssignId;
                    fields.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                    fields.ProjectMasterId = proId;
                    fields.OrderNumber = proDetails.OrderNumber;
                    fields.ProjectName = projectName.Trim();
                    fields.ProjectType = projectType;
                    fields.TestPhaseID = testId;
                    fields.FrequencyBand = FrequencyBand33;
                    fields.SoftwareVersionName = SoftwareVersionName1;
                    fields.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                    fields.BenchmarkPhone = benchmarkPhone1;
                    fields.Route = route1;
                    fields.Region = region1;
                    fields.FieldTestResult = fieldTestResult1;
                    fields.Remarks = remarks1;
                    fields.Attachment = attachment1;
                    fields.Added = userId;
                    fields.AddedDate = DateTime.Now;
                    fields.EntryDate = DateTime.Now;

                    _dbEntities.SwQcFieldTestDetails.Add(fields);
                    _dbEntities.SaveChanges();
                }
                else if (ckqury != null)
                {
                    if (attachment1 != "")
                    {
                        ckqury.Attachment = attachment1;
                    }
                    ckqury.SoftwareVersionName = SoftwareVersionName1;
                    ckqury.FrequencyBand = FrequencyBand33;
                    ckqury.Added = userId;
                    ckqury.AddedDate = DateTime.Now;
                    ckqury.EntryDate = DateTime.Now;
                    _dbEntities.Entry(ckqury).State = EntityState.Modified;
                    _dbEntities.SaveChanges();
                }
            }
            //issue
            foreach (var issues in issueList)
            {
                if (issues.Issue != null)
                {
                    var fields1 = new SwQcFieldTestDetail();
                    fields1.SwQcHeadAssignId = swQcHeadAssignId;
                    fields1.SwQcAssignId = swQcAssignId;
                    fields1.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                    fields1.ProjectMasterId = proId;
                    fields1.OrderNumber = proDetails.OrderNumber;
                    fields1.ProjectName = projectName.Trim();
                    fields1.ProjectType = projectType;
                    fields1.TestPhaseID = testId;
                    fields1.SoftwareVersionName = SoftwareVersionName1;
                    fields1.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                    fields1.Issue = issues.Issue;
                    fields1.ExpectedOutcome = issues.ExpectedOutcome;
                    fields1.IssueType = issues.IssueType;
                    fields1.IssueAttachment = issues.IssueAttachment;
                    fields1.FrequencyBand = FrequencyBand33;
                    fields1.Added = userId;
                    fields1.AddedDate = DateTime.Now;
                    fields1.EntryDate = DateTime.Now;

                    _dbEntities.SwQcFieldTestDetails.Add(fields1);
                    _dbEntities.SaveChanges();
                }

            }
            if (chkQuery == null && operatorStatus == "true")
            {
                //Attachment and Remarks Details
                if (route1 != "" && region1 != "")
                {
                    var fields = new SwQcFieldTestDetail();
                    fields.SwQcHeadAssignId = swQcHeadAssignId;
                    fields.SwQcAssignId = swQcAssignId;
                    fields.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                    fields.ProjectMasterId = proId;
                    fields.OrderNumber = proDetails.OrderNumber;
                    fields.ProjectName = projectName.Trim();
                    fields.ProjectType = projectType;
                    fields.TestPhaseID = testId;
                    fields.SoftwareVersionName = SoftwareVersionName1;
                    fields.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                    fields.BenchmarkPhone = benchmarkPhone1;
                    fields.Route = route1;
                    fields.Region = region1;
                    fields.FrequencyBand = FrequencyBand33;
                    fields.FieldTestResult = fieldTestResult1;
                    fields.Remarks = remarks1;
                    fields.Attachment = attachment1;
                    fields.Added = userId;
                    fields.AddedDate = DateTime.Now;
                    fields.EntryDate = DateTime.Now;

                    _dbEntities.SwQcFieldTestDetails.Add(fields);
                    _dbEntities.SaveChanges();
                }

                //Test Details

                foreach (var allOperators in issueList1)
                {
                    if (allOperators.AirtelMt.Trim() == "AIRTEL-MT")
                    {
                        var airtelMts = new SwQcFieldTestDetail();
                        airtelMts.SwQcHeadAssignId = swQcHeadAssignId;
                        airtelMts.SwQcAssignId = swQcAssignId;
                        airtelMts.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        airtelMts.ProjectMasterId = proId;
                        airtelMts.OrderNumber = proDetails.OrderNumber;
                        airtelMts.ProjectName = projectName.Trim();
                        airtelMts.ProjectType = projectType;
                        airtelMts.TestPhaseID = testId;
                        airtelMts.SoftwareVersionName = SoftwareVersionName1;
                        airtelMts.SoftwareVersionNo = proDetails.SoftwareVersionNo;

                        airtelMts.Location = location1;
                        airtelMts.SpeedLimit = speedLimit1;
                        airtelMts.TRssiBars = allOperators.AirtelMtTRssiBars;
                        airtelMts.BRssiBars = allOperators.AirtelMtBRssiBars;
                        airtelMts.FrequencyBand = FrequencyBand33;
                        airtelMts.OperatorName = allOperators.AirtelMt.Trim();
                        airtelMts.TCallDrop = allOperators.AirtelMtTCallDrop;
                        airtelMts.TNoiseInterference = allOperators.AirtelMtTNoiseInterference;
                        airtelMts.TLongMute = allOperators.AirtelMtTLongMute;
                        airtelMts.BCallDrop = allOperators.AirtelMtBCallDrop;
                        airtelMts.BNoiseInterference = allOperators.AirtelMtBNoiseInterference;
                        airtelMts.BLongMute = allOperators.AirtelMtBLongMute;

                        airtelMts.Added = userId;
                        airtelMts.AddedDate = DateTime.Now;
                        airtelMts.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(airtelMts);
                        _dbEntities.SaveChanges();
                    }

                    if (allOperators.AirtelMo.Trim() == "AIRTEL-MO")
                    {
                        var airtelMos = new SwQcFieldTestDetail();
                        airtelMos.SwQcHeadAssignId = swQcHeadAssignId;
                        airtelMos.SwQcAssignId = swQcAssignId;
                        airtelMos.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        airtelMos.ProjectMasterId = proId;
                        airtelMos.OrderNumber = proDetails.OrderNumber;
                        airtelMos.ProjectName = projectName.Trim();
                        airtelMos.ProjectType = projectType;
                        airtelMos.TestPhaseID = testId;
                        airtelMos.SoftwareVersionName = SoftwareVersionName1;
                        airtelMos.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        airtelMos.Location = location1;
                        airtelMos.SpeedLimit = speedLimit1;
                        airtelMos.TRssiBars = allOperators.AirtelMoTRssiBars;
                        airtelMos.BRssiBars = allOperators.AirtelMoBRssiBars;
                        airtelMos.FrequencyBand = FrequencyBand33;
                        airtelMos.OperatorName = allOperators.AirtelMo.Trim();
                        airtelMos.TCallDrop = allOperators.AirtelMoTCallDrop;
                        airtelMos.TNoiseInterference = allOperators.AirtelMoTNoiseInterference;
                        airtelMos.TLongMute = allOperators.AirtelMoTLongMute;
                        airtelMos.BCallDrop = allOperators.AirtelMoBCallDrop;
                        airtelMos.BNoiseInterference = allOperators.AirtelMoBNoiseInterference;
                        airtelMos.BLongMute = allOperators.AirtelMoBLongMute;
                        airtelMos.Added = userId;
                        airtelMos.AddedDate = DateTime.Now;
                        airtelMos.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(airtelMos);
                        _dbEntities.SaveChanges();
                    }
                    if (allOperators.TeletalkMt.Trim() == "TELETALK-MT")
                    {
                        var teletalkMts = new SwQcFieldTestDetail();
                        teletalkMts.SwQcHeadAssignId = swQcHeadAssignId;
                        teletalkMts.SwQcAssignId = swQcAssignId;
                        teletalkMts.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        teletalkMts.ProjectMasterId = proId;
                        teletalkMts.OrderNumber = proDetails.OrderNumber;
                        teletalkMts.ProjectName = projectName.Trim();
                        teletalkMts.ProjectType = projectType;
                        teletalkMts.TestPhaseID = testId;
                        teletalkMts.SoftwareVersionName = SoftwareVersionName1;
                        teletalkMts.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        teletalkMts.Location = location1;
                        teletalkMts.SpeedLimit = speedLimit1;
                        teletalkMts.TRssiBars = allOperators.TeletalkMtTRssiBars;
                        teletalkMts.BRssiBars = allOperators.TeletalkMtBRssiBars;
                        teletalkMts.FrequencyBand = FrequencyBand33;
                        teletalkMts.OperatorName = allOperators.TeletalkMt.Trim();
                        teletalkMts.TCallDrop = allOperators.TeletalkMtTCallDrop;
                        teletalkMts.TNoiseInterference = allOperators.TeletalkMtTNoiseInterference;
                        teletalkMts.TLongMute = allOperators.TeletalkMtTLongMute;
                        teletalkMts.BCallDrop = allOperators.TeletalkMtBCallDrop;
                        teletalkMts.BNoiseInterference = allOperators.TeletalkMtBNoiseInterference;
                        teletalkMts.BLongMute = allOperators.TeletalkMtBLongMute;
                        teletalkMts.Added = userId;
                        teletalkMts.AddedDate = DateTime.Now;
                        teletalkMts.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(teletalkMts);
                        _dbEntities.SaveChanges();
                    }

                    if (allOperators.TeletalkMo.Trim() == "TELETALK-MO")
                    {
                        var teletalkMos = new SwQcFieldTestDetail();
                        teletalkMos.SwQcHeadAssignId = swQcHeadAssignId;
                        teletalkMos.SwQcAssignId = swQcAssignId;
                        teletalkMos.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        teletalkMos.ProjectMasterId = proId;
                        teletalkMos.OrderNumber = proDetails.OrderNumber;
                        teletalkMos.ProjectName = projectName.Trim();
                        teletalkMos.ProjectType = projectType;
                        teletalkMos.TestPhaseID = testId;
                        teletalkMos.FrequencyBand = FrequencyBand33;
                        teletalkMos.SoftwareVersionName = SoftwareVersionName1;
                        teletalkMos.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        teletalkMos.Location = location1;
                        teletalkMos.SpeedLimit = speedLimit1;
                        teletalkMos.TRssiBars = allOperators.TeletalkMoTRssiBars;
                        teletalkMos.BRssiBars = allOperators.TeletalkMoBRssiBars;

                        teletalkMos.OperatorName = allOperators.TeletalkMo.Trim();
                        teletalkMos.TCallDrop = allOperators.TeletalkMoTCallDrop;
                        teletalkMos.TNoiseInterference = allOperators.TeletalkMoTNoiseInterference;
                        teletalkMos.TLongMute = allOperators.TeletalkMoTLongMute;
                        teletalkMos.BCallDrop = allOperators.TeletalkMoBCallDrop;
                        teletalkMos.BNoiseInterference = allOperators.TeletalkMoBNoiseInterference;
                        teletalkMos.BLongMute = allOperators.TeletalkMoBLongMute;
                        teletalkMos.Added = userId;
                        teletalkMos.AddedDate = DateTime.Now;
                        teletalkMos.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(teletalkMos);
                        _dbEntities.SaveChanges();
                    }
                    if (allOperators.RobiMt.Trim() == "ROBI-MT")
                    {
                        var robiMts = new SwQcFieldTestDetail();
                        robiMts.SwQcHeadAssignId = swQcHeadAssignId;
                        robiMts.SwQcAssignId = swQcAssignId;
                        robiMts.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        robiMts.ProjectMasterId = proId;
                        robiMts.OrderNumber = proDetails.OrderNumber;
                        robiMts.ProjectName = projectName.Trim();
                        robiMts.ProjectType = projectType;
                        robiMts.TestPhaseID = testId;
                        robiMts.SoftwareVersionName = SoftwareVersionName1;
                        robiMts.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        robiMts.FrequencyBand = FrequencyBand33;
                        robiMts.Location = location1;
                        robiMts.SpeedLimit = speedLimit1;
                        robiMts.TRssiBars = allOperators.RobiMtTRssiBars;
                        robiMts.BRssiBars = allOperators.RobiMtBRssiBars;

                        robiMts.OperatorName = allOperators.RobiMt.Trim();
                        robiMts.TCallDrop = allOperators.RobiMtTCallDrop;
                        robiMts.TNoiseInterference = allOperators.RobiMtTNoiseInterference;
                        robiMts.TLongMute = allOperators.RobiMtTLongMute;
                        robiMts.BCallDrop = allOperators.RobiMtBCallDrop;
                        robiMts.BNoiseInterference = allOperators.RobiMtBNoiseInterference;
                        robiMts.BLongMute = allOperators.RobiMtBLongMute;
                        robiMts.Added = userId;
                        robiMts.AddedDate = DateTime.Now;
                        robiMts.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(robiMts);
                        _dbEntities.SaveChanges();
                    }

                    if (allOperators.RobiMo.Trim() == "ROBI-MO")
                    {
                        var robiMos = new SwQcFieldTestDetail();
                        robiMos.SwQcHeadAssignId = swQcHeadAssignId;
                        robiMos.SwQcAssignId = swQcAssignId;
                        robiMos.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        robiMos.ProjectMasterId = proId;
                        robiMos.OrderNumber = proDetails.OrderNumber;
                        robiMos.ProjectName = projectName.Trim();
                        robiMos.ProjectType = projectType;
                        robiMos.TestPhaseID = testId;
                        robiMos.SoftwareVersionName = SoftwareVersionName1;
                        robiMos.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        robiMos.Location = location1;
                        robiMos.SpeedLimit = speedLimit1;
                        robiMos.TRssiBars = allOperators.RobiMoTRssiBars;
                        robiMos.BRssiBars = allOperators.RobiMoBRssiBars;
                        robiMos.FrequencyBand = FrequencyBand33;
                        robiMos.OperatorName = allOperators.RobiMo.Trim();
                        robiMos.TCallDrop = allOperators.RobiMoTCallDrop;
                        robiMos.TNoiseInterference = allOperators.RobiMoTNoiseInterference;
                        robiMos.TLongMute = allOperators.RobiMoTLongMute;
                        robiMos.BCallDrop = allOperators.RobiMoBCallDrop;
                        robiMos.BNoiseInterference = allOperators.RobiMoBNoiseInterference;
                        robiMos.BLongMute = allOperators.RobiMoBLongMute;
                        robiMos.Added = userId;
                        robiMos.AddedDate = DateTime.Now;
                        robiMos.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(robiMos);
                        _dbEntities.SaveChanges();
                    }
                    if (allOperators.BanglalinkMt.Trim() == "BANGLALINK-MT")
                    {
                        var banglalinkMts = new SwQcFieldTestDetail();
                        banglalinkMts.SwQcHeadAssignId = swQcHeadAssignId;
                        banglalinkMts.SwQcAssignId = swQcAssignId;
                        banglalinkMts.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        banglalinkMts.ProjectMasterId = proId;
                        banglalinkMts.OrderNumber = proDetails.OrderNumber;
                        banglalinkMts.ProjectName = projectName.Trim();
                        banglalinkMts.ProjectType = projectType;
                        banglalinkMts.TestPhaseID = testId;
                        banglalinkMts.SoftwareVersionName = SoftwareVersionName1;
                        banglalinkMts.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        banglalinkMts.Location = location1;
                        banglalinkMts.SpeedLimit = speedLimit1;
                        banglalinkMts.TRssiBars = allOperators.BanglalinkMtTRssiBars;
                        banglalinkMts.BRssiBars = allOperators.BanglalinkMtBRssiBars;
                        banglalinkMts.FrequencyBand = FrequencyBand33;
                        banglalinkMts.OperatorName = allOperators.BanglalinkMt.Trim();
                        banglalinkMts.TCallDrop = allOperators.BanglalinkMtTCallDrop;
                        banglalinkMts.TNoiseInterference = allOperators.BanglalinkMtTNoiseInterference;
                        banglalinkMts.TLongMute = allOperators.BanglalinkMtTLongMute;
                        banglalinkMts.BCallDrop = allOperators.BanglalinkMtBCallDrop;
                        banglalinkMts.BNoiseInterference = allOperators.BanglalinkMtBNoiseInterference;
                        banglalinkMts.BLongMute = allOperators.BanglalinkMtBLongMute;
                        banglalinkMts.Added = userId;
                        banglalinkMts.AddedDate = DateTime.Now;
                        banglalinkMts.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(banglalinkMts);
                        _dbEntities.SaveChanges();
                    }

                    if (allOperators.BanglalinkMo.Trim() == "BANGLALINK-MO")
                    {
                        var banglalinkMos = new SwQcFieldTestDetail();
                        banglalinkMos.SwQcHeadAssignId = swQcHeadAssignId;
                        banglalinkMos.SwQcAssignId = swQcAssignId;
                        banglalinkMos.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        banglalinkMos.ProjectMasterId = proId;
                        banglalinkMos.OrderNumber = proDetails.OrderNumber;
                        banglalinkMos.ProjectName = projectName.Trim();
                        banglalinkMos.ProjectType = projectType;
                        banglalinkMos.TestPhaseID = testId;
                        banglalinkMos.SoftwareVersionName = SoftwareVersionName1;
                        banglalinkMos.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        banglalinkMos.Location = location1;
                        banglalinkMos.SpeedLimit = speedLimit1;
                        banglalinkMos.TRssiBars = allOperators.BanglalinkMoTRssiBars;
                        banglalinkMos.BRssiBars = allOperators.BanglalinkMoBRssiBars;
                        banglalinkMos.FrequencyBand = FrequencyBand33;
                        banglalinkMos.OperatorName = allOperators.BanglalinkMo.Trim();
                        banglalinkMos.TCallDrop = allOperators.BanglalinkMoTCallDrop;
                        banglalinkMos.TNoiseInterference = allOperators.BanglalinkMoTNoiseInterference;
                        banglalinkMos.TLongMute = allOperators.BanglalinkMoTLongMute;
                        banglalinkMos.BCallDrop = allOperators.BanglalinkMoBCallDrop;
                        banglalinkMos.BNoiseInterference = allOperators.BanglalinkMoBNoiseInterference;
                        banglalinkMos.BLongMute = allOperators.BanglalinkMoBLongMute;
                        banglalinkMos.Added = userId;
                        banglalinkMos.AddedDate = DateTime.Now;
                        banglalinkMos.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(banglalinkMos);
                        _dbEntities.SaveChanges();
                    }
                    if (allOperators.GrameenphoneMt.Trim() == "GRAMEENPHONE-MT")
                    {
                        var grameenphoneMts = new SwQcFieldTestDetail();
                        grameenphoneMts.SwQcHeadAssignId = swQcHeadAssignId;
                        grameenphoneMts.SwQcAssignId = swQcAssignId;
                        grameenphoneMts.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        grameenphoneMts.ProjectMasterId = proId;
                        grameenphoneMts.OrderNumber = proDetails.OrderNumber;
                        grameenphoneMts.ProjectName = projectName.Trim();
                        grameenphoneMts.ProjectType = projectType;
                        grameenphoneMts.TestPhaseID = testId;
                        grameenphoneMts.SoftwareVersionName = SoftwareVersionName1;
                        grameenphoneMts.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        grameenphoneMts.Location = location1;
                        grameenphoneMts.SpeedLimit = speedLimit1;
                        grameenphoneMts.TRssiBars = allOperators.GrameenphoneMtTRssiBars;
                        grameenphoneMts.BRssiBars = allOperators.GrameenphoneMtBRssiBars;
                        grameenphoneMts.FrequencyBand = FrequencyBand33;
                        grameenphoneMts.OperatorName = allOperators.GrameenphoneMt.Trim();
                        grameenphoneMts.TCallDrop = allOperators.GrameenphoneMtTCallDrop;
                        grameenphoneMts.TNoiseInterference = allOperators.GrameenphoneMtTNoiseInterference;
                        grameenphoneMts.TLongMute = allOperators.GrameenphoneMtTLongMute;
                        grameenphoneMts.BCallDrop = allOperators.GrameenphoneMtBCallDrop;
                        grameenphoneMts.BNoiseInterference = allOperators.GrameenphoneMtBNoiseInterference;
                        grameenphoneMts.BLongMute = allOperators.GrameenphoneMtBLongMute;
                        grameenphoneMts.Added = userId;
                        grameenphoneMts.AddedDate = DateTime.Now;
                        grameenphoneMts.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(grameenphoneMts);
                        _dbEntities.SaveChanges();
                    }

                    if (allOperators.GrameenphoneMo.Trim() == "GRAMEENPHONE-MO")
                    {
                        var grameenphoneMos = new SwQcFieldTestDetail();
                        grameenphoneMos.SwQcHeadAssignId = swQcHeadAssignId;
                        grameenphoneMos.SwQcAssignId = swQcAssignId;
                        grameenphoneMos.ProjectPmAssignId = proDetails.ProjectPmAssignId;
                        grameenphoneMos.ProjectMasterId = proId;
                        grameenphoneMos.OrderNumber = proDetails.OrderNumber;
                        grameenphoneMos.ProjectName = projectName.Trim();
                        grameenphoneMos.ProjectType = projectType;
                        grameenphoneMos.TestPhaseID = testId;
                        grameenphoneMos.SoftwareVersionName = SoftwareVersionName1;
                        grameenphoneMos.SoftwareVersionNo = proDetails.SoftwareVersionNo;
                        grameenphoneMos.Location = location1;
                        grameenphoneMos.SpeedLimit = speedLimit1;
                        grameenphoneMos.TRssiBars = allOperators.GrameenphoneMoTRssiBars;
                        grameenphoneMos.BRssiBars = allOperators.GrameenphoneMoBRssiBars;
                        grameenphoneMos.FrequencyBand = FrequencyBand33;
                        grameenphoneMos.OperatorName = allOperators.GrameenphoneMo.Trim();
                        grameenphoneMos.TCallDrop = allOperators.GrameenphoneMoTCallDrop;
                        grameenphoneMos.TNoiseInterference = allOperators.GrameenphoneMoTNoiseInterference;
                        grameenphoneMos.TLongMute = allOperators.GrameenphoneMoTLongMute;
                        grameenphoneMos.BCallDrop = allOperators.GrameenphoneMoBCallDrop;
                        grameenphoneMos.BNoiseInterference = allOperators.GrameenphoneMoBNoiseInterference;
                        grameenphoneMos.BLongMute = allOperators.GrameenphoneMoBLongMute;
                        grameenphoneMos.Added = userId;
                        grameenphoneMos.AddedDate = DateTime.Now;
                        grameenphoneMos.EntryDate = DateTime.Now;

                        _dbEntities.SwQcFieldTestDetails.Add(grameenphoneMos);
                        _dbEntities.SaveChanges();
                    }
                }
            }
            return "OK";
        }

        public string SaveGlassProtectorAndChargerTest(List<SwQcBatteryTestModel> issueList4, long swQcHeadAssignId, long swQcAssignId, string projectType, long proId,
        long testId, string accessoriesTestType)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query1 = (from swQcHead in _dbEntities.ProjectMasters where swQcHead.ProjectMasterId == proId select swQcHead).FirstOrDefault();

            if (accessoriesTestType == "Glass Protector")
            {
                SwQcGlassProtectorTestModel qryForIssueSerial = new SwQcGlassProtectorTestModel();
                foreach (var swQcIssues in issueList4)
                {
                    qryForIssueSerial = _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select top 1 case when IssueSerial is null 
                    then 0 else IssueSerial end as IssueSerial
                    from [CellPhoneProject].[dbo].[SwQcGlassProtectorTest] where ProjectName='" + query1.ProjectName + "' order by IssueSerial desc").FirstOrDefault();

                    var model = new SwQcGlassProtectorTest();

                    model.ProjectMasterId = proId;
                    model.SwQcHeadAssignId = swQcHeadAssignId;
                    model.SwQcAssignId = swQcAssignId;
                    model.TestPhaseID = testId;
                    model.ProjectName = query1.ProjectName.Trim();
                    model.ProjectType = projectType.Trim();
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.ExpectedOutcome = swQcIssues.ExpectedOutcome;
                    model.WaltonQcStatus = swQcIssues.WaltonQcStatus;
                    model.Upload = swQcIssues.Upload;
                    if (qryForIssueSerial == null)
                    {
                        model.IssueSerial = 0 + 1;
                    }
                    else
                    {
                        model.IssueSerial = Convert.ToInt64(qryForIssueSerial.IssueSerial) + 1;

                    }
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    _dbEntities.SwQcGlassProtectorTests.Add(model);
                    _dbEntities.SaveChanges();
                }
            }
            else if (accessoriesTestType == "Charger")
            {
                SwQcChargerTestModel qryForIssueSerial = new SwQcChargerTestModel();

                foreach (var swQcIssues in issueList4)
                {
                    qryForIssueSerial = _dbEntities.Database.SqlQuery<SwQcChargerTestModel>(@"select top 1 case when IssueSerial is null 
                    then 0 else IssueSerial end as IssueSerial
                    from [CellPhoneProject].[dbo].[SwQcChargerTest] where ProjectName='" + query1.ProjectName + "' order by IssueSerial desc").FirstOrDefault();

                    var model = new SwQcChargerTest();

                    model.ProjectMasterId = proId;
                    model.SwQcHeadAssignId = swQcHeadAssignId;
                    model.SwQcAssignId = swQcAssignId;
                    model.TestPhaseID = testId;
                    model.ProjectName = query1.ProjectName.Trim();
                    model.ProjectType = projectType.Trim();
                    model.IssueScenario = swQcIssues.IssueScenario;
                    model.ExpectedOutcome = swQcIssues.ExpectedOutcome;
                    model.WaltonQcStatus = swQcIssues.WaltonQcStatus;
                    model.Upload = swQcIssues.Upload;
                    if (qryForIssueSerial == null)
                    {
                        model.IssueSerial = 0 + 1;
                    }
                    else
                    {
                        model.IssueSerial = Convert.ToInt64(qryForIssueSerial.IssueSerial) + 1;
                    }
                    model.Added = userId;
                    model.AddedDate = DateTime.Now;

                    _dbEntities.SwQcChargerTests.Add(model);
                    _dbEntities.SaveChanges();
                }
            }
            _dbEntities.SaveChanges();
            return "ok";
        }
        public List<SwQcFieldTestDetailModel> GetFieldTestDetailsSavedData(string swQcheadId, string swQcAssignId)
        {
            long swQcheadIds;
            long.TryParse(swQcheadId, out swQcheadIds);

            long swQcAssignIds;
            long.TryParse(swQcAssignId, out swQcAssignIds);

            var query =
           _dbEntities.Database.SqlQuery<SwQcFieldTestDetailModel>(@"select * from [CellPhoneProject].[dbo].[SwQcFieldTestDetails] 
            where SwQcHeadAssignId={0} and SwQcAssignId={1} ", swQcheadIds, swQcAssignIds).ToList();
            return query;
        }

        public string UpdateFieldOperatorData(long fieldTestIds, string TRSSIbars, string BRSSIbars, string callDrop, string noiseInterference, string longMute,
            string bCallDrop, string bNoiseInterference, string bLongMute)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcFieldTestDetails where pm.FieldTestId == fieldTestIds select pm).FirstOrDefault();

            query.TCallDrop = callDrop;
            query.TNoiseInterference = noiseInterference;
            query.TRssiBars = TRSSIbars;
            query.BRssiBars = BRSSIbars;
            query.TLongMute = longMute;
            query.BCallDrop = bCallDrop;
            query.BNoiseInterference = bNoiseInterference;
            query.BLongMute = bLongMute;
            query.Updated = userId;
            query.UpdatedDate = DateTime.Now;

            _dbEntities.SwQcFieldTestDetails.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string UpdateFieldRouteData(long fieldTestIds, string benchmarkPhone, string route, string region, string FrequencyBand,
            string fieldTestResult, string remarks)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcFieldTestDetails where pm.FieldTestId == fieldTestIds select pm).FirstOrDefault();

            query.BenchmarkPhone = benchmarkPhone;
            query.Route = route;
            query.Region = region;
            query.FrequencyBand = FrequencyBand;
            query.FieldTestResult = fieldTestResult;
            query.Remarks = remarks;
            query.Updated = userId;
            query.UpdatedDate = DateTime.Now;

            _dbEntities.SwQcFieldTestDetails.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string UpdateFieldIssueData(long fieldTestIds, string issue, string expectedOutcome, string issueType)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcFieldTestDetails where pm.FieldTestId == fieldTestIds select pm).FirstOrDefault();

            query.Issue = issue;
            query.ExpectedOutcome = expectedOutcome;
            query.IssueType = issueType;
            query.Updated = userId;
            query.UpdatedDate = DateTime.Now;

            _dbEntities.SwQcFieldTestDetails.AddOrUpdate(query);
            _dbEntities.SaveChanges();
            return "OK";
        }

        public string DeleteFieldIssueData(long fieldTestIds)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcFieldTestDetails where pm.FieldTestId == fieldTestIds select pm).FirstOrDefault();

            _dbEntities.SwQcFieldTestDetails.Remove(query);
            _dbEntities.SaveChanges();

            return "OK";
        }

        public string FieldTestFinalSubmit(long swQcheadIds, long swQcAssignIds)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            if (swQcAssignIds != 0)
            {
                var dbModel = _dbEntities.SwQcAssignsFromQcHeads.FirstOrDefault(i => i.SwQcAssignId == swQcAssignIds &&
                                                                                     i.SwQcHeadAssignId == swQcheadIds);
                if (dbModel != null)
                {
                    dbModel.Status = "RECOMMENDED";
                    dbModel.SwQcEndTime = DateTime.Now;
                    dbModel.Updated = userId;
                    dbModel.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel).State = EntityState.Modified;
                }
                _dbEntities.SaveChanges();


                var dbModel1 = (from swQcHead in _dbEntities.SwQcHeadAssignsFromPms
                                join swQc in _dbEntities.SwQcAssignsFromQcHeads on
                                    swQcHead.SwQcHeadAssignId equals swQc.SwQcHeadAssignId
                                where swQc.Status != "INACTIVE" && swQcHead.SwQcHeadAssignId == swQcheadIds && swQc.SwQcAssignId == swQcAssignIds
                                select new
                                {
                                    swQc.Status,
                                    SwQcHeadStatus = swQcHead.Status,
                                    swQcHead.SwQcFinishedTime,
                                    swQcHead.Updated,
                                    swQcHead.UpdatedDate

                                }).ToList();


                if (dbModel1.Exists(x => x.Status == "ASSIGNED"))
                {
                }
                else
                {
                    var dbModel2 =
                        _dbEntities.SwQcHeadAssignsFromPms.FirstOrDefault(
                            i => i.SwQcHeadAssignId == swQcheadIds);

                    dbModel2.Status = "RECOMMENDED";
                    dbModel2.SwQcFinishedTime = DateTime.Now;
                    dbModel2.Updated = userId;
                    dbModel2.UpdatedDate = DateTime.Now;

                    _dbEntities.Entry(dbModel2).State = EntityState.Modified;
                }
            }

            _dbEntities.SaveChanges();
            return "OK";
        }
        //Field Print
        public List<SwQcAssignsFromQcHeadModel> GetFieldTestModelForPrint(long userId)
        {
            //            var query =
            //           _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct SwQcHeadAssignId,ProjectMasterId,sp.TestPhaseID,ProjectType,ProjectName,st.TestPhaseName,sp.SoftwareVersionNo,SwQcHeadToQcAssignTime, CONVERT(VARCHAR(10),SwQcHeadToQcAssignTime, 120) as SwQcAssignTimeByHead
            //            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sp left join CellPhoneProject.dbo.SwQcTestPhase st on sp.TestPhaseID=st.TestPhaseID
            //            where sp.Status='RECOMMENDED' and st.TestPhaseName='Field (Network Test)' and sp.SwQcHeadAssignId != 0
            //            order by SwQcHeadToQcAssignTime,ProjectName desc", userId).ToList();
            var query =
         _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct ProjectName 
            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sp left join CellPhoneProject.dbo.SwQcTestPhase st on sp.TestPhaseID=st.TestPhaseID
            where sp.Status='RECOMMENDED' and st.TestPhaseName='Field (Network Test)' and sp.SwQcHeadAssignId != 0
            order by ProjectName desc", userId).ToList();

            return query;
        }

        public List<SwQcAssignsFromQcHeadModel> GetProjectDetailsForFieldDetails(string ProjectsDetails)
        {
            var query =
        _dbEntities.Database.SqlQuery<SwQcAssignsFromQcHeadModel>(@"select distinct SwQcHeadAssignId,ProjectMasterId,sp.TestPhaseID,ProjectType,ProjectName,st.TestPhaseName,sp.SoftwareVersionNo,
        (select top 1 SoftwareVersionName from CellPhoneProject.dbo.SwQcFieldTestDetails where SwQcHeadAssignId=sp.SwQcHeadAssignId and SoftwareVersionName is not null) as SoftwareVersionName,SwQcHeadToQcAssignTime,
        CONVERT(VARCHAR(10),SwQcHeadToQcAssignTime, 120) as SwQcAssignTimeByHead
        from CellPhoneProject.dbo.SwQcAssignsFromQcHead sp left join CellPhoneProject.dbo.SwQcTestPhase st on sp.TestPhaseID=st.TestPhaseID
        where sp.Status='RECOMMENDED' and st.TestPhaseName='Field (Network Test)'  and sp.SwQcHeadAssignId !=0 and sp.ProjectName={0}
        order by SwQcHeadToQcAssignTime,ProjectName desc", ProjectsDetails.Trim()).ToList();

            return query;
        }

        public List<SwQcFieldTestDetailModel> GetDataForFieldTestPrint(long swQcheadIds, string projectName)
        {
            var query =
       _dbEntities.Database.SqlQuery<SwQcFieldTestDetailModel>(@"select *,
        STUFF((SELECT ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
        and sw.SwQcHeadAssignId={0} WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson
                from CellPhoneProject.dbo.SwQcFieldTestDetails where SwQcHeadAssignId={0}", swQcheadIds).ToList();

            return query;
        }

        public List<SwQcTestPhaseModel> GetSwQcTestPhaseForSupp()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcTestPhaseModel>(@"select * from [CellPhoneProject].[dbo].[SwQcTestPhase] where TestPhaseIsActive=1 and TestPhaseName not in ('Field (Network Test)')  order by TestPhaseID asc").ToList();
            return query;
        }

        public string ForwardSwQcIssues(long SwQcIssueIds, string ProjectName, long IssueSerials, string issueScenario, int softwareVersionNos, long testPhaseIDs,
            string waltonQcStatus, string waltonQcComment, string supplierComment)
        {
            #region com
            //String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            //long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            //var query = (from pm in _dbEntities.SwQcIssueDetails where pm.SwQcIssueId == SwQcIssueIds select pm).FirstOrDefault();
            //var soft = (from pm in _dbEntities.SwQcHeadAssignsFromPms
            //            where pm.ProjectName == ProjectName.Trim()
            //                && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID == testPhaseIDs
            //            select pm).FirstOrDefault();


            //SwQcIssueDetail models = new SwQcIssueDetail();
            //models.SwQcHeadAssignId = query.SwQcAssignId;
            //models.SwQcAssignId = query.SwQcAssignId;
            //models.ProjectPmAssignId = query.ProjectPmAssignId;
            //models.ProjectMasterId = query.ProjectMasterId;
            //models.OrderNumber = query.OrderNumber;
            //models.ProjectName = query.ProjectName;
            //models.ProjectType = query.ProjectType;
            //models.IssueScenario = query.IssueScenario;
            //models.ExpectedOutcome = query.ExpectedOutcome;
            //models.RefernceModule = query.RefernceModule;
            //models.Frequency = query.Frequency;
            //models.IssueReproducePath = query.IssueReproducePath;
            //models.Attachment = query.Attachment;
            //models.IssueType = query.IssueType;
            //models.Result = query.Result;

            //if (testPhaseIDs == 5)
            //{
            //    models.Demo = "Demo";
            //}
            //models.TestPhaseID = testPhaseIDs;
            //if (soft != null)
            //{
            //    models.SoftwareVersionName = soft.SoftwareVersionName;
            //}
            //else
            //{
            //    models.SoftwareVersionName = "";
            //}

            //models.SoftwareVersionNo = softwareVersionNos;
            //models.FilesUrl = query.FilesUrl;
            //models.FilesDetail = query.FilesDetail;
            //models.Upload = query.Upload;
            //models.IsFile = query.IsFile;
            //models.IsIssue = query.IsIssue;
            //models.WaltonQcComDate = DateTime.Now;
            //models.WaltonQcStatus = waltonQcStatus;
            //models.WaltonQcComment = waltonQcComment;
            //if (waltonQcStatus.Trim() == "FIXED")
            //{
            //    if (soft != null)
            //    {
            //        models.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + soft.SoftwareVersionName + ")";

            //    }
            //    else
            //    {
            //        models.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + models.SoftwareVersionName + ")";
            //    }

            //}
            //models.SupplierComDate = query.SupplierComDate;
            //models.SupplierComment = supplierComment;
            //models.WaltonPmComDate = query.WaltonPmComDate;
            //models.WaltonPmComment = query.WaltonPmComment;
            //models.WaltonPmStatus = query.WaltonPmStatus;
            //models.IsSmart = query.IsSmart;
            //models.IsFeature = query.IsFeature;
            //models.IsWalpad = query.IsWalpad;
            //models.IsTab = query.IsTab;
            //models.IsApprovedForChina = query.IsApprovedForChina;
            //models.SupplierFeedbackForAppend = query.SupplierFeedbackForAppend;
            //models.SupplierFeedbackForAppend = query.SupplierFeedbackForAppend;
            //models.IssueSerial = query.IssueSerial;
            //models.Added = userId;
            //models.AddedDate = DateTime.Now;

            //_dbEntities.SwQcIssueDetails.Add(models);
            //_dbEntities.SaveChanges();
            //return "OK";
            #endregion

            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var query = (from pm in _dbEntities.SwQcIssueDetails where pm.SwQcIssueId == SwQcIssueIds select pm).FirstOrDefault();

            var soft = new SwQcHeadAssignsFromPm();
            var queryIssueSerial = new SwQcIssueDetail();

            if (testPhaseIDs == 5)
            {
                soft = (from pm in _dbEntities.SwQcHeadAssignsFromPms
                        where pm.ProjectName == ProjectName.Trim() && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID == testPhaseIDs

                        select pm).FirstOrDefault();
            }
            else
            {
                soft = (from pm in _dbEntities.SwQcHeadAssignsFromPms
                        where pm.ProjectName == ProjectName.Trim() && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID != 5 && pm.TestPhaseID != 10
                        select pm).FirstOrDefault();
            }

            if (testPhaseIDs == 5)
            {

                queryIssueSerial = (from pm in _dbEntities.SwQcIssueDetails
                                    where pm.ProjectName == ProjectName.Trim() && pm.IssueSerial == IssueSerials
                                        && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID == testPhaseIDs
                                    select pm).FirstOrDefault();

            }
            else
            {

                queryIssueSerial = (from pm in _dbEntities.SwQcIssueDetails
                                    where pm.ProjectName == ProjectName.Trim() && pm.IssueSerial == IssueSerials
                                        && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID != 5
                                    select pm).FirstOrDefault();
            }

            if (queryIssueSerial == null)
            {
                SwQcIssueDetail models = new SwQcIssueDetail();
                models.SwQcHeadAssignId = query.SwQcAssignId;
                models.SwQcAssignId = query.SwQcAssignId;
                models.ProjectPmAssignId = query.ProjectPmAssignId;
                models.ProjectMasterId = query.ProjectMasterId;
                models.OrderNumber = query.OrderNumber;
                models.ProjectName = query.ProjectName;
                models.ProjectType = query.ProjectType;
                models.IssueScenario = query.IssueScenario;
                models.ExpectedOutcome = query.ExpectedOutcome;
                models.RefernceModule = query.RefernceModule;
                models.Frequency = query.Frequency;
                models.IssueReproducePath = query.IssueReproducePath;
                models.Attachment = query.Attachment;
                models.IssueType = query.IssueType;
                models.Result = query.Result;

                if (testPhaseIDs == 5)
                {
                    models.Demo = "Demo";
                }
                models.TestPhaseID = testPhaseIDs;
                if (soft != null)
                {
                    models.SoftwareVersionName = soft.SoftwareVersionName;
                }
                else
                {
                    models.SoftwareVersionName = "";
                }

                models.SoftwareVersionNo = softwareVersionNos;
                models.FilesUrl = query.FilesUrl;
                models.FilesDetail = query.FilesDetail;
                models.Upload = query.Upload;
                models.IsFile = query.IsFile;
                models.IsIssue = query.IsIssue;
                models.WaltonQcComDate = DateTime.Now;
                models.WaltonQcStatus = waltonQcStatus;
                models.WaltonQcComment = waltonQcComment;
                if (waltonQcStatus.Trim() == "FIXED")
                {
                    if (soft != null)
                    {
                        models.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + soft.SoftwareVersionName +
                                              ")";

                    }
                    else
                    {
                        models.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + models.SoftwareVersionName +
                                              ")";
                    }

                }
                else
                {
                    models.FixedVersion = "";
                }
                models.SupplierComDate = query.SupplierComDate;
                models.SupplierComment = supplierComment;
                models.WaltonPmComDate = query.WaltonPmComDate;
                models.WaltonPmComment = query.WaltonPmComment;
                models.WaltonPmStatus = query.WaltonPmStatus;
                models.IsSmart = query.IsSmart;
                models.IsFeature = query.IsFeature;
                models.IsWalpad = query.IsWalpad;
                models.IsTab = query.IsTab;
                models.IsApprovedForChina = query.IsApprovedForChina;
                models.SupplierFeedbackForAppend = query.SupplierFeedbackForAppend;
                models.SupplierFeedbackForAppend = query.SupplierFeedbackForAppend;
                models.IssueSerial = query.IssueSerial;
                models.Added = userId;
                models.AddedDate = DateTime.Now;

                _dbEntities.SwQcIssueDetails.Add(models);
                _dbEntities.SaveChanges();
            }
            else
            {
                if (testPhaseIDs == 5)
                {

                    var updateTables = (from pm in _dbEntities.SwQcIssueDetails where pm.ProjectName == ProjectName.Trim() && pm.IssueSerial == IssueSerials && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID == 5 select pm).FirstOrDefault();

                    updateTables.WaltonQcComment = waltonQcComment;
                    updateTables.WaltonQcStatus = waltonQcStatus;
                    updateTables.SupplierComment = supplierComment;
                    updateTables.SoftwareVersionName = soft.SoftwareVersionName;
                    updateTables.Demo = "Demo";
                    updateTables.Updated = userId;
                    updateTables.UpdatedDate = DateTime.Now;
                    if (waltonQcStatus.Trim() == "FIXED")
                    {
                        if (soft != null)
                        {
                            updateTables.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" +
                                                        soft.SoftwareVersionName + ")";

                        }
                        else
                        {
                            updateTables.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" +
                                                        updateTables.SoftwareVersionName + ")";
                        }
                    }
                    else
                    {
                        updateTables.FixedVersion = "";
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updateTables);
                    _dbEntities.SaveChanges();
                }
                else
                {
                    var updateTables = (from pm in _dbEntities.SwQcIssueDetails where pm.ProjectName == ProjectName.Trim() && pm.IssueSerial == IssueSerials && pm.SoftwareVersionNo == softwareVersionNos && pm.TestPhaseID != 5 select pm).FirstOrDefault();

                    updateTables.WaltonQcComment = waltonQcComment;
                    updateTables.WaltonQcStatus = waltonQcStatus;
                    updateTables.SupplierComment = supplierComment;
                    updateTables.SoftwareVersionName = soft.SoftwareVersionName;
                    updateTables.Demo = "";
                    updateTables.Updated = userId;
                    updateTables.UpdatedDate = DateTime.Now;
                    if (waltonQcStatus.Trim() == "FIXED")
                    {
                        if (soft != null)
                        {
                            updateTables.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + soft.SoftwareVersionName + ")";

                        }
                        else
                        {
                            updateTables.FixedVersion = "SW-V-" + softwareVersionNos + " (SW_VER-" + updateTables.SoftwareVersionName + ")";
                        }
                    }
                    else
                    {
                        updateTables.FixedVersion = "";
                    }

                    _dbEntities.SwQcIssueDetails.AddOrUpdate(updateTables);
                    _dbEntities.SaveChanges();
                }
            }
            return "OK";
        }

        public List<SwQcTestPhaseModel> GetSwQcTestPhaseForSuppDemo()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcTestPhaseModel>(@"select * from [CellPhoneProject].[dbo].[SwQcTestPhase] where TestPhaseIsActive=1 and TestPhaseName in ('Demo Test')  order by TestPhaseID asc").ToList();
            return query;
        }

        #endregion
        public List<VmAllIncentiveList> GetPoDateWisePenalties(string monthNum, string yearName)
        {
            int monNo;
            int.TryParse(monthNum, out monNo);

            long years;
            long.TryParse(yearName, out years);
            _dbEntities.Database.CommandTimeout = 6000;
            var query = _dbEntities.Database.SqlQuery<VmAllIncentiveList>(@"select  * from
	          (
		        select distinct cast(A.ProjectMasterId as bigint) as ProjectMasterId,A.ProjectName,A.EmployeeCode,A.UserFullName,A.ProjectType,cast(A.Orders as varchar(10)) as Orders,A.PoDate,A.LSD,cast (A.PoVsLSDDiff as int) as PoVsLSDDiff,A.VesselDate,cast(A.LsdVsVesselDiffForDeduct as int) as LsdVsVesselDiffForDeduct,
		        cast(A.DeductPoint as bigint) as DeductPoint,cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) as bigint) as DeductedAmount,
	            cast(A.LsdVsVesselDiffForReward as int) as LsdVsVesselDiffForReward,cast(A.RewardPoint as bigint) as RewardPoint,cast((A.RewardPoint * A.LsdVsVesselDiffForReward) as bigint) as RewardAmount,  
                cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*75/100 as bigint) as TeamAmount,cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*10/100 as bigint) as DeputyAmount,cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*15/100 as bigint) as QcheadAmount,
				cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*75/100 as bigint) as PenaltiesTeamAmount,cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*10/100 as bigint) as PenaltiesDeputyAmount,cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*15/100 as bigint) as PenaltiesQcheadAmount
	      
	            from 
		        (
				        select distinct ppf.ProjectMasterId,pm.ProjectName,
				         STUFF((SELECT distinct ', '  + cmn1.EmployeeCode FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
                        WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  EmployeeCode,		
				
                        STUFF((SELECT distinct ', '  + cmn1.UserFullName FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
                        WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  UserFullName,				
								
				        ppa.SwQcUserId,pm.ProjectType,pm.OrderNuber as Orders,ppf.PoDate,pm.ApproxShipmentDate as LSD,((DATEDIFF(day, ppf.PoDate, pm.ApproxShipmentDate))) as PoVsLSDDiff,ps.VesselDate,
				        case when pm.ApproxShipmentDate<=ps.VesselDate then (DATEDIFF(day, pm.ApproxShipmentDate, ps.VesselDate)) else 0 end as LsdVsVesselDiffForDeduct,
				        case when pm.ApproxShipmentDate>=ps.VesselDate then (DATEDIFF(day, ps.VesselDate, pm.ApproxShipmentDate)) else 0 end as LsdVsVesselDiffForReward,
				        ps.ShipmentType,				
				        DeductPoint=100,RewardPoint=500

				        from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
				        left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
				        left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
				        left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                        left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
				        where pm.IsActive=1 and  
				        pm.ApproxShipmentDate = (select  top 1  ApproxShipmentDate from CellPhoneProject.dbo.ProjectMasters  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
				        and ps.VesselDate= (select  top 1  VesselDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)

				        and DATEPART(mm,ps.VesselDate)={0} and  DATENAME(YEAR,ps.VesselDate)={1}
		        )A 		
	        )B where (B.DeductedAmount+B.RewardAmount)>0  order by B.ProjectName asc", monNo, years).ToList();
            return query;
        }
        public List<VmAllIncentiveList> GetNinetyFiveProductionReward(string monthNum, string yearName)
        {
            int monNo;
            int.TryParse(monthNum, out monNo);

            long years;
            long.TryParse(yearName, out years);
            _dbRbEntites.Database.CommandTimeout = 6000;
            _dbEntities.Database.CommandTimeout = 6000;
            var query = _dbRbEntites.Database.SqlQuery<VmAllIncentiveList>(@"select D.ProjectMasterId,D.ProjectModel,D.EmployeeCode,D.UserFullName,D.SourcingType,D.WpmsOrders as Orders,D.WarehouseEntryDate,D.ExtendedWarehouseDate,D.OrderQuantity,
            D.TotalProductionQuantity,D.EffectiveDays,D.RewardPercentage,D.ExistedPercentage,cast(D.RewardAmount as bigint) as RewardAmount,cast((D.RewardAmount*70)/100 as bigint) as TeamAmount,cast((D.RewardAmount*12)/100 as bigint) as DeputyAmount,cast((D.RewardAmount*18)/100 as bigint) as QcheadAmount
            from
            (
               select distinct cast(C.ProjectMasterID as bigint) as ProjectMasterID,C.ProjectModel,C.EmployeeCode,C.UserFullName,C.SourcingType,C.WpmsOrders,C.WarehouseEntryDate,C.ExtendedWarehouseDate,cast(C.OrderQuantity as bigint) as OrderQuantity,cast(C.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(C.EffectiveDays as bigint) as EffectiveDays,cast(C.RewardPercentage as bigint) as RewardPercentage,cast(C.ExistedPercentage as bigint) as ExistedPercentage,
               case when C.ExistedPercentage>=C.RewardPercentage then 2100 else 0 end as RewardAmount
                 from
	             (
		            select B.ProjectMasterID,B.ProjectModel,B.EmployeeCode,B.UserFullName,B.SourcingType,B.WpmsOrders,B.WarehouseEntryDate,B.ExtendedWarehouseDate,B.OrderQuantity,B.TotalProductionQuantity,B.EffectiveDays,B.RewardPercentage,
		            ((100 * B.TotalProductionQuantity)/OrderQuantity) as ExistedPercentage,B.IsFinalShipment
			              from 
				             (
					              select A.ProjectMasterID,A.ProjectModel,A.EmployeeCode,A.UserFullName,A.SourcingType,A.WpmsOrders,A.WarehouseEntryDate,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,count(tbi.Barcode) as TotalProductionQuantity,RewardPercentage=95,A.EffectiveDays
					              from 
						            (
							            select AA.ProjectMasterID,AA.ProjectModel,AA.EmployeeCode,AA.UserFullName,AA.SourcingType,AA.WpmsOrders,AA.WarehouseEntryDate,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate) as ExtendedWarehouseDate,AA.IsFinalShipment,AA.OrderQuantity,AA.EffectiveDays from
							            (
								            select distinct ps.ProjectMasterID,pdd.ProjectModel,											
											
											STUFF((SELECT distinct ', '  + cmn1.EmployeeCode FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
											WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  EmployeeCode,		
				
											STUFF((SELECT distinct ', '  + cmn1.UserFullName FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
											WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  UserFullName,	
											pm.SourcingType,('Order '+ cast(pm.OrderNuber as varchar(10))) as WpmsOrders,ps.WarehouseEntryDate,ps.IsFinalShipment,pdd.OrderQuantity,case when pm.SourcingType like 'SKD' then 30  when  pm.SourcingType like 'CKD' then 45 end as EffectiveDays
								            from [CellPhoneProject].[dbo].[ProjectOrderShipments] ps
								            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterID=ps.ProjectMasterID
								         	left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                            left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
								            where							
								             ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)

											
							            )AA where DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={1} 

						            )A
						            left join RBSYNERGY.dbo.tblBarcodeInv tbi on tbi.UpdatedBy=A.WpmsOrders  and tbi.Model=A.ProjectModel
						            where tbi.Model=A.ProjectModel and PrintDate between A.WarehouseEntryDate and DATEADD(day, A.EffectiveDays, A.WarehouseEntryDate)
						            group by  A.ProjectMasterID,A.ProjectModel,A.WpmsOrders,A.WarehouseEntryDate,A.IsFinalShipment,A.OrderQuantity,A.SourcingType,A.EffectiveDays,A.ExtendedWarehouseDate,A.EmployeeCode,A.UserFullName
				            )B

                  )C  
	  
            )D	 where D.RewardAmount>0 order by ProjectMasterID asc", monNo, years).ToList();
            return query;
        }

        public List<VmAllIncentiveList> GetPmClearanceVsLsdForReport(string monNum1, string year)
        {
            int monNo;
            int.TryParse(monNum1, out monNo);

            long years;
            long.TryParse(year, out years);
            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<VmAllIncentiveList>(@"
            select ProjectMasterId,ProjectName,cast(Orders as varchar(50)) as Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,TeamMember,TeamReward,TeamPenalties,
            DeputyReward,DeputyPenalties,HeadReward,HeadPenalties
            from
            (	
	            select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,TeamMember,cast((Reward)*70/100 as decimal(18,2)) as TeamReward,cast((RealPenalties)*70/100 as decimal(18,2)) as TeamPenalties,
	            cast((Reward)*12/100 as decimal(18,2)) as DeputyReward,cast((RealPenalties)*12/100 as decimal(18,2)) as DeputyPenalties,cast((Reward)*18/100 as decimal(18,2)) as HeadReward,cast((RealPenalties)*18/100 as decimal(18,2)) as HeadPenalties
	            from
	            (	
		            select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,cast(Reward as decimal(18,2)) as Reward,cast(RealPenalties as decimal(18,2)) as RealPenalties,
		            case when Reward=0 then RealPenalties when RealPenalties=0 then Reward end as FinalAmount,TeamMember
	
		            from
		            (
			            select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,-Penalties1 as RealPenalties,(select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember
			            from
			            ( 
				            select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,DaysBeforeLsd*100 as Reward,DaysAfterLsd*70 as Penalties1
		
				            from
				            (
				            select rmi.ProjectMasterId,rmi.ProjectName,rmi.Orders,rmi.ProjectType,rmi.PoCategory,rmi.PoQuantity,rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate as LSD,
				            case when rmi.ProjectManagerClearanceDate<pm.ApproxShipmentDate then DATEDIFF(day, rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate) else 0 end as DaysBeforeLsd,
				            case when rmi.ProjectManagerClearanceDate>pm.ApproxShipmentDate then DATEDIFF(day,pm.ApproxShipmentDate, rmi.ProjectManagerClearanceDate) else 0 end as DaysAfterLsd

				            from [CellPhoneProject].[dbo].[RawMaterialInspection] rmi
				            left join [CellPhoneProject].[dbo].ProjectMasters pm on rmi.ProjectMasterId=pm.ProjectmasterId			
			 
				            where pm.IsActive=1 and DATEPART(mm,rmi.ProjectManagerClearanceDate)={0} and DATENAME(YEAR,rmi.ProjectManagerClearanceDate)={1} 
				            and rmi.ProjectManagerClearanceDate = (select top 1 rr.ProjectManagerClearanceDate from [CellPhoneProject].[dbo].[RawMaterialInspection] rr where rr.ProjectName=rmi.ProjectName and rr.Orders=rmi.Orders order by RawMaterialId desc)  
				            )A
			            )B 
		            )C 
	            )D
            )E  order by ProjectName asc", monNo, years).ToList();
            return query;
        }

        public List<VmAllIncentiveList> GetNinetyFiveSalesOutReward(string monthNum, string yearName)
        {
            int monNo;
            int.TryParse(monthNum, out monNo);

            long years;
            long.TryParse(yearName, out years);
            _dbEntities.Database.CommandTimeout = 6000;
            var query = _dbEntities.Database.SqlQuery<VmAllIncentiveList>(@"select distinct E.ProjectmasterID,E.ProjectModel,E.EmployeeCode,E.UserFullName,E.Orders,E.tblBarcodeOrder,E.WarehouseEntryDate,E.ExtendedWarehouseDate,E.EffectiveDays,
            E.OrderQuantity,E.TotalTblBarcodeIMEI,E.TotalSalesOut,E.RewardPercentage,E.ExistedPercentage,cast(E.RewardAmount as bigint) as RewardAmount,cast((E.RewardAmount*75)/100 as bigint) as TeamAmount,cast((E.RewardAmount*10)/100 as bigint) as DeputyAmount,cast((E.RewardAmount*15)/100 as bigint) as QcheadAmount
            from
                (
 	                SELECT cast(D.ProjectmasterId as bigint) as ProjectmasterId,D.ProjectModel,D.EmployeeCode,D.UserFullName,D.Orders,D.tblBarcodeOrder ,D.WarehouseEntryDate,D.ExtendedWarehouseDate,cast(D.EffectiveDays as bigint) as EffectiveDays,cast(D.OrderQuantity as bigint) as OrderQuantity, cast(D.TotalTblBarcodeIMEI as bigint) as TotalTblBarcodeIMEI,
                    cast(D.TotalSalesOut as bigint) as TotalSalesOut,cast(D.RewardPercentage as bigint) as RewardPercentage,cast(D.ExistedPercentage as bigint) as ExistedPercentage,
	                case when D.ExistedPercentage>=D.RewardPercentage then 5000 else 0 end as RewardAmount
	                FROM
	                (
		                select C.ProjectmasterId,C.ProjectModel,C.EmployeeCode,C.UserFullName,C.Orders,C.tblBarcodeOrder,C.WarehouseEntryDate,C.ExtendedWarehouseDate,C.EffectiveDays,C.OrderQuantity, C.TotalTblBarcodeIMEI,C.TotalSalesOut,C.RewardPercentage,
		                ((100 * C.TotalSalesOut)/OrderQuantity) as ExistedPercentage,IsFinalShipment  from
			            ( 
			                select B.ProjectmasterId,B.ProjectModel,B.EmployeeCode,B.UserFullName,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,B.ExtendedWarehouseDate,EffectiveDays=120, sum(TotalTblBarcodeIMEI) as TotalTblBarcodeIMEI,sum(TotalSalesOut) as TotalSalesOut,RewardPercentage=95,IsFinalShipment,B.OrderQuantity  from
					            ( 
					                select A.ProjectmasterId,A.ProjectModel,A.EmployeeCode,A.UserFullName,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.ExtendedWarehouseDate, count(A.Barcode) as TotalTblBarcodeIMEI,case when A.TddBarcode is not null and A.TddBarcode !='' then 1 else 0 end as TotalSalesOut,IsFinalShipment,A.OrderQuantity  from
							                (
								                select distinct proM.ProjectMasterId,proM.ProjectModel,proM.EmployeeCode,proM.UserFullName,												
												proM.Orders,proM.ShipmentType,proM.WarehouseEntryDate,proM.ExtendedWarehouseDate,proM.ShipmentPercentage,proM.IsFinalShipment,
								                tbl.Model,tbl.Barcode,tbl.Barcode2,tbl.DateAdded,tbl.UpdatedBy as tblBarcodeOrder,tdd.Barcode as TddBarcode,proM.OrderQuantity from 
								            (
										            select distinct ps.ProjectMasterId,pdd.ProjectModel,
													STUFF((SELECT distinct ', '  + cmn1.EmployeeCode FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
													WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  EmployeeCode,		
				
													STUFF((SELECT distinct ', '  + cmn1.UserFullName FROM [CellPhoneProject].[dbo].CmnUsers cmn1 left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=pm.ProjectMasterId and sw.Status not in ('INACTIVE')           
													WHERE  sw.SwQcUserId=cmn1.CmnUserId  FOR XML PATH('')),1,2,'')  AS  UserFullName,	

													('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,ps.ShipmentType,ps.WarehouseEntryDate,DATEADD(day, 120, ps.WarehouseEntryDate) AS ExtendedWarehouseDate,ps.ShipmentPercentage,ps.IsFinalShipment,pdd.OrderQuantity
										            FROM [CellPhoneProject].[dbo].[ProjectOrderShipments] ps 
										            left join CellphoneProject.dbo.ProjectMasters pm on ps.ProjectMasterId=pm.ProjectMasterId
										            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pm.ProjectMasterID=pdd.ProjectMasterID
										            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                                    left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
										            where DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate))={1} and 
										            ps.WarehouseEntryDate in (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)
								            )proM
								            left join [RBSYNERGY].[dbo].[tblBarCodeInv] tbl on proM.ProjectModel=tbl.Model and RTRIM(tbl.UpdatedBy)=RTRIM(proM.Orders)
								            left join [RBSYNERGY].[dbo].tblDealerDistributionDetails tdd on tbl.Barcode =tdd.Barcode and
								            tdd.DistributionDate between proM.WarehouseEntryDate and  DATEADD(day, 120, proM.WarehouseEntryDate)

								            where proM.ProjectModel=tbl.Model 
							            )A 
						            group by A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.Barcode,A.TddBarcode,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,A.EmployeeCode,A.UserFullName
					                )B
					                group by B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,ExtendedWarehouseDate,IsFinalShipment,B.OrderQuantity,B.EmployeeCode,B.UserFullName
			                )C 
	                )D
                )E
                where E.RewardAmount>0  order by E.ProjectModel asc", monNo, years).ToList();

            return query;
        }

        public List<QcNewRewardAndPenaltiesModel> GetPoDateWisePenaltiesAccountant(string monNum1, string year)
        {
            int monNo;
            int.TryParse(monNum1, out monNo);
            long years;
            long.TryParse(year, out years);
            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(@"select * from [CellPhoneProject].[dbo].[SwIncentive_AllMembersRewardAndPenalties] 
            where IncentiveType='LsdVsVessel' and MonNum={0} and Year={1} ", monNo, years).ToList();
            return query;
        }
        public List<QcNewRewardAndPenaltiesModel> GetNinetyFiveProductionRewardAccountant(string monNum1, string year)
        {
            int monNo;
            int.TryParse(monNum1, out monNo);
            long years;
            long.TryParse(year, out years);
            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(@"select * from [CellPhoneProject].[dbo].[SwIncentive_AllMembersRewardAndPenalties] 
            where IncentiveType='Production' and MonNum={0} and Year={1} ", monNo, years).ToList();
            return query;
        }
        public List<QcNewRewardAndPenaltiesModel> GetNinetyFiveSalesOutRewardAccountant(string monNum1, string year)
        {
            int monNo;
            int.TryParse(monNum1, out monNo);
            long years;
            long.TryParse(year, out years);
            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(@"select * from [CellPhoneProject].[dbo].[SwIncentive_AllMembersRewardAndPenalties] 
            where IncentiveType='SalesOut' and MonNum={0} and Year={1} ", monNo, years).ToList();
            return query;
        }

        public List<QcNewRewardAndPenaltiesModel> GetTotalRewardAndPenalties(string monNum1, string year)
        {
            int monNo;
            int.TryParse(monNum1, out monNo);
            long years;
            long.TryParse(year, out years);
            _dbEntities.Database.CommandTimeout = 6000;

            var query = _dbEntities.Database.SqlQuery<QcNewRewardAndPenaltiesModel>(@"select sum(PerPersonReward) as TeamReward,sum(PerPersonPenalties) as TeamPenalties,sum(DeputyAmount) as DeputyAmount,
            sum(DeputyPenalties) as DeputyPenalties,sum(HeadAmount) as HeadAmount, sum(HeadPenalties) as HeadPenalties
            from [CellPhoneProject].[dbo].[SwIncentive_AllMembersRewardAndPenalties] where MonNum={0} and Year={1} ", monNo, years).ToList();
            return query;
        }

        public List<VmIncentivePolicy> GetRewardAndPenaltiesQc(string months, string years)
        {
            long mons;
            long.TryParse(months, out mons);
            long yearIds;
            long.TryParse(years, out yearIds);
            _dbEntities.Database.CommandTimeout = 6000;
            _dbRbEntites.Database.CommandTimeout = 6000;

            List<VmIncentivePolicy> cmList = new List<VmIncentivePolicy>();
            //sales out
            #region sales out comment
            //            _dbRbEntites.Database.CommandTimeout = 6000;
            //            string proEv1 = string.Format(@"select cast(sum(G.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(G.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
            //            (select distinct F.ProjectmasterID,F.ProjectModel,F.Orders,F.TeamMember,F.TeamAmount,(F.TeamAmount/F.TeamMember) as PerPersonReward	,PerPersonPenalties=0		
            //            from 
            //            (
            //            select E.ProjectmasterID,E.ProjectModel,E.Orders,cast(E.RewardAmount as bigint) as RewardAmount,
            //            (select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember
            //            ,cast((E.RewardAmount*75)/100 as bigint) as TeamAmount
            //            from
            //            (
            // 	            SELECT cast(D.ProjectmasterId as bigint) as ProjectmasterId,D.ProjectModel,D.Orders,D.tblBarcodeOrder ,D.WarehouseEntryDate,D.ExtendedWarehouseDate,cast(D.EffectiveDays as bigint) as EffectiveDays,cast(D.OrderQuantity as bigint) as OrderQuantity, cast(D.TotalTblBarcodeIMEI as bigint) as TotalTblBarcodeIMEI,
            //                cast(D.TotalSalesOut as bigint) as TotalSalesOut,cast(D.RewardPercentage as bigint) as RewardPercentage,cast(D.ExistedPercentage as bigint) as ExistedPercentage,
            //	            case when D.ExistedPercentage>=D.RewardPercentage then 5000 else 0 end as RewardAmount
            //	            FROM
            //	            (
            //		            select C.ProjectmasterId,C.ProjectModel,C.Orders,C.tblBarcodeOrder,C.WarehouseEntryDate,C.ExtendedWarehouseDate,C.EffectiveDays,C.OrderQuantity, C.TotalTblBarcodeIMEI,C.TotalSalesOut,C.RewardPercentage,
            //		            ((100 * C.TotalSalesOut)/OrderQuantity) as ExistedPercentage,IsFinalShipment  from
            //		            ( 
            //			            select B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,B.ExtendedWarehouseDate,EffectiveDays=120, sum(TotalTblBarcodeIMEI) as TotalTblBarcodeIMEI,sum(TotalSalesOut) as TotalSalesOut,RewardPercentage=95,IsFinalShipment,B.OrderQuantity  from
            //				            ( 
            //					            select A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.ExtendedWarehouseDate, count(A.Barcode) as TotalTblBarcodeIMEI,case when A.TddBarcode is not null and A.TddBarcode !='' then 1 else 0 end as TotalSalesOut,IsFinalShipment,A.OrderQuantity  from
            //							            (
            //								            select distinct proM.ProjectMasterId,proM.ProjectModel,												
            //								            proM.Orders,proM.ShipmentType,proM.WarehouseEntryDate,proM.ExtendedWarehouseDate,proM.ShipmentPercentage,proM.IsFinalShipment,
            //								            tbl.Model,tbl.Barcode,tbl.Barcode2,tbl.DateAdded,tbl.UpdatedBy as tblBarcodeOrder,tdd.Barcode as TddBarcode,proM.OrderQuantity from 
            //							            (
            //									            select distinct ps.ProjectMasterId,pdd.ProjectModel,	
            //									            ('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,ps.ShipmentType,ps.WarehouseEntryDate,DATEADD(day, 120, ps.WarehouseEntryDate) AS ExtendedWarehouseDate,ps.ShipmentPercentage,ps.IsFinalShipment,pdd.OrderQuantity
            //									            FROM [CellPhoneProject].[dbo].[ProjectOrderShipments] ps 
            //									            left join CellphoneProject.dbo.ProjectMasters pm on ps.ProjectMasterId=pm.ProjectMasterId
            //									            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pm.ProjectMasterID=pdd.ProjectMasterID
            //									            where DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate))={1} and pm.IsActive=1 and
            //									            ps.WarehouseEntryDate in (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)
            //							            )proM
            //							            left join [RBSYNERGY].[dbo].[tblBarCodeInv] tbl on proM.ProjectModel=tbl.Model and RTRIM(tbl.UpdatedBy)=RTRIM(proM.Orders)
            //							            left join [RBSYNERGY].[dbo].tblDealerDistributionDetails tdd on tbl.Barcode =tdd.Barcode and
            //							            tdd.DistributionDate between proM.WarehouseEntryDate and  DATEADD(day, 120, proM.WarehouseEntryDate)
            //
            //							            where proM.ProjectModel=tbl.Model 
            //						            )A 
            //					            group by A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.Barcode,A.TddBarcode,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity
            //					            )B
            //					            group by B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,ExtendedWarehouseDate,IsFinalShipment,B.OrderQuantity
            //			            )C 
            //	            )D
            //            )E
            //            where E.RewardAmount>0)F)G group by G.PerPersonPenalties", mons, yearIds);

            //            var proEvent1 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv1).ToList();

            //            foreach (var project in proEvent1)
            //            {

            //                VmIncentivePolicy items = new VmIncentivePolicy();
            //                items.TotalDeduction = project.PerPersonPenalties;
            //                items.TotalReward = project.PerPersonReward;
            //                cmList.Add(items);
            //            }
            #endregion
            //production
            string proEv12 = string.Format(@"select cast(sum(F.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(F.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
            (select E.ProjectMasterID,E.ProjectModel,E.Orders,E.TeamMember,E.TeamAmount,(E.TeamAmount/E.TeamMember) as PerPersonReward,PerPersonPenalties=0
             from 
            (select D.ProjectMasterID,D.ProjectModel,D.WpmsOrders as Orders,(select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember,
            cast((D.RewardAmount*70)/100 as bigint) as TeamAmount
            from
            (
                select distinct cast(C.ProjectMasterID as bigint) as ProjectMasterID,C.ProjectModel,C.SourcingType,C.WpmsOrders,C.WarehouseEntryDate,C.ExtendedWarehouseDate,cast(C.OrderQuantity as bigint) as OrderQuantity,cast(C.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(C.EffectiveDays as bigint) as EffectiveDays,cast(C.RewardPercentage as bigint) as RewardPercentage,cast(C.ExistedPercentage as bigint) as ExistedPercentage,
                case when C.ExistedPercentage>=C.RewardPercentage then 2100 else 0 end as RewardAmount
                    from
	                (
		            select B.ProjectMasterID,B.ProjectModel,B.SourcingType,B.WpmsOrders,B.WarehouseEntryDate,B.ExtendedWarehouseDate,B.OrderQuantity,B.TotalProductionQuantity,B.EffectiveDays,B.RewardPercentage,
		            ((100 * B.TotalProductionQuantity)/OrderQuantity) as ExistedPercentage,B.IsFinalShipment
			                from 
				                (
					                select A.ProjectMasterID,A.ProjectModel,A.SourcingType,A.WpmsOrders,A.WarehouseEntryDate,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,count(tbi.Barcode) as TotalProductionQuantity,RewardPercentage=95,A.EffectiveDays
					                from 
						            (
							            select AA.ProjectMasterID,AA.ProjectModel,AA.SourcingType,AA.WpmsOrders,AA.WarehouseEntryDate,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate) as ExtendedWarehouseDate,AA.IsFinalShipment,AA.OrderQuantity,AA.EffectiveDays from
							            (
								            select distinct ps.ProjectMasterID,pdd.ProjectModel,											
										
								            pm.SourcingType,('Order '+ cast(pm.OrderNuber as varchar(10))) as WpmsOrders,ps.WarehouseEntryDate,ps.IsFinalShipment,pdd.OrderQuantity,case when pm.SourcingType like 'SKD' then 30  when  pm.SourcingType like 'CKD' then 45 end as EffectiveDays
								            from [CellPhoneProject].[dbo].[ProjectOrderShipments] ps
								            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                            left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
								            where pm.IsActive=1	and				
								                ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)

											
							            )AA where DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={1}

						            )A
						            left join RBSYNERGY.dbo.tblBarcodeInv tbi on tbi.UpdatedBy=A.WpmsOrders  and tbi.Model=A.ProjectModel
						            where tbi.Model=A.ProjectModel and PrintDate between A.WarehouseEntryDate and DATEADD(day, A.EffectiveDays, A.WarehouseEntryDate)
						            group by  A.ProjectMasterID,A.ProjectModel,A.WpmsOrders,A.WarehouseEntryDate,A.IsFinalShipment,A.OrderQuantity,A.SourcingType,A.EffectiveDays,A.ExtendedWarehouseDate
				            )B

                    )C  
	  
            )D	 where D.RewardAmount>0)E)F group by F.PerPersonPenalties", mons, yearIds);

            var proEvent12 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv12).ToList();
            foreach (var project in proEvent12)
            {

                VmIncentivePolicy items = new VmIncentivePolicy();
                items.TotalDeduction = project.PerPersonPenalties;
                items.TotalReward = project.PerPersonReward;
                cmList.Add(items);
            }
            //pm clearance vs Lsd

            string proEv13 = string.Format(@"
            select sum(PerPersonReward) as PerPersonReward, sum(PerPersonPenalties) as PerPersonPenalties
	        from	 
	        (	
		        select ProjectMasterID,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,FinalAmount,TeamMember,TeamReward,TeamPenalties,	
		        cast((TeamReward/TeamMember) as decimal(18,2)) as PerPersonReward,cast((TeamPenalties/TeamMember) as decimal(18,2)) as PerPersonPenalties
		        from
		        (	
			        select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,FinalAmount,TeamMember,cast((Reward)*70/100 as bigint) as TeamReward,cast((RealPenalties)*70/100 as bigint) as TeamPenalties
			        from
			        (	
				        select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,cast(Reward as decimal(18,2)) as Reward,cast(RealPenalties as decimal(18,2)) as RealPenalties,
				        case when Reward=0 then RealPenalties when RealPenalties=0 then Reward end as FinalAmount,TeamMember
	
				        from
				        (
					        select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,-Penalties1 as RealPenalties,(select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember
					        from
					        ( 
						        select ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,DaysBeforeLsd*100 as Reward,DaysAfterLsd*70 as Penalties1
		
						        from
						        (
						        select rmi.ProjectMasterId,rmi.ProjectName,rmi.Orders,rmi.ProjectType,rmi.PoCategory,rmi.PoQuantity,rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate as LSD,
						        case when rmi.ProjectManagerClearanceDate<pm.ApproxShipmentDate then DATEDIFF(day, rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate) else 0 end as DaysBeforeLsd,
						        case when rmi.ProjectManagerClearanceDate>pm.ApproxShipmentDate then DATEDIFF(day,pm.ApproxShipmentDate, rmi.ProjectManagerClearanceDate) else 0 end as DaysAfterLsd

						        from [CellPhoneProject].[dbo].[RawMaterialInspection] rmi
						        left join [CellPhoneProject].[dbo].ProjectMasters pm on rmi.ProjectMasterId=pm.ProjectmasterId			
			 
						        where pm.IsActive=1 and DATEPART(mm,rmi.ProjectManagerClearanceDate)={0} and DATENAME(YEAR,rmi.ProjectManagerClearanceDate)={1} 
						        and rmi.ProjectManagerClearanceDate = (select top 1 rr.ProjectManagerClearanceDate from [CellPhoneProject].[dbo].[RawMaterialInspection] rr where rr.ProjectName=rmi.ProjectName and rr.Orders=rmi.Orders order by RawMaterialId desc)  
						        )A
					        )B 
				        )C 
			        )D
		         )E  
            )F", mons, yearIds);

            var proEvent13 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
            foreach (var project in proEvent13)
            {
                VmIncentivePolicy items = new VmIncentivePolicy();
                items.TotalDeduction = project.PerPersonPenalties;
                items.TotalReward = project.PerPersonReward;
                cmList.Add(items);
            }

            //po wise
            #region po wise comment
            //            string proEv13 = string.Format(@"select cast(sum(C.PerPersonReward) as decimal(16,2)) as PerPersonReward, cast(sum(C.PerPersonPenalties) as decimal(16,2)) as PerPersonPenalties from
            //            (select  B.ProjectMasterID,B.ProjectName,B.Orders,B.TeamMember,B.TeamReward,(B.TeamReward/B.TeamMember) as PerPersonReward,B.TeamPenalties,(B.TeamPenalties/B.TeamMember) as PerPersonPenalties
            //             from
            //            (
            //            select distinct cast(A.ProjectMasterId as bigint) as ProjectMasterId,A.ProjectName,cast(A.Orders as varchar(10)) as Orders,
            //            (select count(CmnUserId)-1 from CellPhoneProject.dbo.CmnUsers where RoleName='QC' and IsActive=1) as TeamMember,
            //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) as bigint) as DeductedAmount,
            //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward) as bigint) as RewardAmount,  
            //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*75/100 as bigint) as TeamReward,
            //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*75/100 as bigint) as TeamPenalties
            //	      
            //            from 
            //            (
            //		            select distinct ppf.ProjectMasterId,pm.ProjectName,			       
            //								
            //		            ppa.SwQcUserId,pm.ProjectType,pm.OrderNuber as Orders,ppf.PoDate,pm.ApproxShipmentDate as LSD,((DATEDIFF(day, ppf.PoDate, pm.ApproxShipmentDate))) as PoVsLSDDiff,ps.VesselDate,
            //		            case when pm.ApproxShipmentDate<=ps.VesselDate then (DATEDIFF(day, pm.ApproxShipmentDate, ps.VesselDate)) else 0 end as LsdVsVesselDiffForDeduct,
            //		            case when pm.ApproxShipmentDate>=ps.VesselDate then (DATEDIFF(day, ps.VesselDate, pm.ApproxShipmentDate)) else 0 end as LsdVsVesselDiffForReward,
            //		            ps.ShipmentType,				
            //		            DeductPoint=100,RewardPoint=500
            //
            //		            from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
            //		            left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
            //		            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
            //		            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
            //                    left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
            //		            where pm.IsActive=1 and
            //		            pm.ApproxShipmentDate = (select  top 1  ApproxShipmentDate from CellPhoneProject.dbo.ProjectMasters  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
            //		            and ps.VesselDate= (select  top 1  VesselDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
            //
            //		            and DATEPART(mm,ps.VesselDate)={0} and  DATENAME(YEAR,ps.VesselDate)={1}
            //            )A 		
            //            )B where (B.DeductedAmount+B.RewardAmount)>0)C", mons, yearIds);

            //            var proEvent13 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
            //            foreach (var project in proEvent13)
            //            {
            //                VmIncentivePolicy items = new VmIncentivePolicy();
            //                items.TotalDeduction = project.PerPersonPenalties;
            //                items.TotalReward = project.PerPersonReward;
            //                cmList.Add(items);
            //            }
            #endregion
            //

            VmIncentivePolicy itemsTotal = new VmIncentivePolicy();

            itemsTotal.TotalDeduction1 = cmList.Sum(i => i.TotalDeduction);
            itemsTotal.TotalReward1 = cmList.Sum(i => i.TotalReward);

            cmList.Add(itemsTotal);
            return cmList;
        }

        public List<VmIncentivePolicy> GetRewardAndPenaltiesDeputyAndHead(string monNum, string year, string roles)
        {
            long mons;
            long.TryParse(monNum, out mons);
            long yearIds;
            long.TryParse(year, out yearIds);

            List<VmIncentivePolicy> cmList = new List<VmIncentivePolicy>();
            //sales out
            _dbEntities.Database.CommandTimeout = 6000;
            _dbRbEntites.Database.CommandTimeout = 6000;

            if (roles == "DEPUTY")
            {
                #region sales out for deputy comment
                //                string proEv1 = string.Format(@"select cast(sum(G.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(G.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
                //            (select distinct F.ProjectmasterID,F.ProjectModel,F.Orders,F.DeputyAmount as PerPersonReward	,PerPersonPenalties=0		
                //            from 
                //            (
                //            select E.ProjectmasterID,E.ProjectModel,E.Orders,cast(E.RewardAmount as bigint) as RewardAmount
                //            ,cast((E.RewardAmount * 10)/100 as bigint) as DeputyAmount
                //            from
                //            (
                // 	            SELECT cast(D.ProjectmasterId as bigint) as ProjectmasterId,D.ProjectModel,D.Orders,D.tblBarcodeOrder ,D.WarehouseEntryDate,D.ExtendedWarehouseDate,cast(D.EffectiveDays as bigint) as EffectiveDays,cast(D.OrderQuantity as bigint) as OrderQuantity, cast(D.TotalTblBarcodeIMEI as bigint) as TotalTblBarcodeIMEI,
                //                cast(D.TotalSalesOut as bigint) as TotalSalesOut,cast(D.RewardPercentage as bigint) as RewardPercentage,cast(D.ExistedPercentage as bigint) as ExistedPercentage,
                //	            case when D.ExistedPercentage>=D.RewardPercentage then 5000 else 0 end as RewardAmount
                //	            FROM
                //	            (
                //		            select C.ProjectmasterId,C.ProjectModel,C.Orders,C.tblBarcodeOrder,C.WarehouseEntryDate,C.ExtendedWarehouseDate,C.EffectiveDays,C.OrderQuantity, C.TotalTblBarcodeIMEI,C.TotalSalesOut,C.RewardPercentage,
                //		            ((100 * C.TotalSalesOut)/OrderQuantity) as ExistedPercentage,IsFinalShipment  from
                //		            ( 
                //			            select B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,B.ExtendedWarehouseDate,EffectiveDays=120, sum(TotalTblBarcodeIMEI) as TotalTblBarcodeIMEI,sum(TotalSalesOut) as TotalSalesOut,RewardPercentage=95,IsFinalShipment,B.OrderQuantity  from
                //				            ( 
                //					            select A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.ExtendedWarehouseDate, count(A.Barcode) as TotalTblBarcodeIMEI,case when A.TddBarcode is not null and A.TddBarcode !='' then 1 else 0 end as TotalSalesOut,IsFinalShipment,A.OrderQuantity  from
                //							            (
                //								            select distinct proM.ProjectMasterId,proM.ProjectModel,												
                //								            proM.Orders,proM.ShipmentType,proM.WarehouseEntryDate,proM.ExtendedWarehouseDate,proM.ShipmentPercentage,proM.IsFinalShipment,
                //								            tbl.Model,tbl.Barcode,tbl.Barcode2,tbl.DateAdded,tbl.UpdatedBy as tblBarcodeOrder,tdd.Barcode as TddBarcode,proM.OrderQuantity from 
                //							            (
                //									            select distinct ps.ProjectMasterId,pdd.ProjectModel,	
                //
                //									            ('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,ps.ShipmentType,ps.WarehouseEntryDate,DATEADD(day, 120, ps.WarehouseEntryDate) AS ExtendedWarehouseDate,ps.ShipmentPercentage,ps.IsFinalShipment,pdd.OrderQuantity
                //									            FROM [CellPhoneProject].[dbo].[ProjectOrderShipments] ps 
                //									            left join CellphoneProject.dbo.ProjectMasters pm on ps.ProjectMasterId=pm.ProjectMasterId
                //									            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pm.ProjectMasterID=pdd.ProjectMasterID
                //									            where pm.IsActive=1 and DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate))={1} and 
                //									            ps.WarehouseEntryDate in (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)
                //							            )proM
                //							            left join [RBSYNERGY].[dbo].[tblBarCodeInv] tbl on proM.ProjectModel=tbl.Model and RTRIM(tbl.UpdatedBy)=RTRIM(proM.Orders)
                //							            left join [RBSYNERGY].[dbo].tblDealerDistributionDetails tdd on tbl.Barcode =tdd.Barcode and
                //							            tdd.DistributionDate between proM.WarehouseEntryDate and  DATEADD(day, 120, proM.WarehouseEntryDate)
                //
                //							            where proM.ProjectModel=tbl.Model 
                //						            )A 
                //					            group by A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.Barcode,A.TddBarcode,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity
                //					            )B
                //					            group by B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,ExtendedWarehouseDate,IsFinalShipment,B.OrderQuantity
                //			            )C 
                //	            )D
                //            )E
                //            where E.RewardAmount>0)F)G group by G.PerPersonPenalties", mons, yearIds);

                //                var proEvent1 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv1).ToList();

                //                foreach (var project in proEvent1)
                //                {

                //                    VmIncentivePolicy items = new VmIncentivePolicy();
                //                    items.TotalDeduction = project.PerPersonPenalties;
                //                    items.TotalReward = project.PerPersonReward;
                //                    cmList.Add(items);
                //                }
                #endregion
                //production
                string proEv12 = string.Format(@"select cast(sum(F.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(F.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
            (select E.ProjectMasterID,E.ProjectModel,E.Orders,E.DeputyAmount as PerPersonReward,PerPersonPenalties=0
             from 
            (select D.ProjectMasterID,D.ProjectModel,D.WpmsOrders as Orders,cast((D.RewardAmount * 12)/100 as bigint) as DeputyAmount
            from
            (
                select distinct cast(C.ProjectMasterID as bigint) as ProjectMasterID,C.ProjectModel,C.SourcingType,C.WpmsOrders,C.WarehouseEntryDate,C.ExtendedWarehouseDate,cast(C.OrderQuantity as bigint) as OrderQuantity,cast(C.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(C.EffectiveDays as bigint) as EffectiveDays,cast(C.RewardPercentage as bigint) as RewardPercentage,cast(C.ExistedPercentage as bigint) as ExistedPercentage,
                case when C.ExistedPercentage>=C.RewardPercentage then 2100 else 0 end as RewardAmount
                    from
	                (
		            select B.ProjectMasterID,B.ProjectModel,B.SourcingType,B.WpmsOrders,B.WarehouseEntryDate,B.ExtendedWarehouseDate,B.OrderQuantity,B.TotalProductionQuantity,B.EffectiveDays,B.RewardPercentage,
		            ((100 * B.TotalProductionQuantity)/OrderQuantity) as ExistedPercentage,B.IsFinalShipment
			                from 
				                (
					                select A.ProjectMasterID,A.ProjectModel,A.SourcingType,A.WpmsOrders,A.WarehouseEntryDate,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,count(tbi.Barcode) as TotalProductionQuantity,RewardPercentage=95,A.EffectiveDays
					                from 
						            (
							            select AA.ProjectMasterID,AA.ProjectModel,AA.SourcingType,AA.WpmsOrders,AA.WarehouseEntryDate,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate) as ExtendedWarehouseDate,AA.IsFinalShipment,AA.OrderQuantity,AA.EffectiveDays from
							            (
								            select distinct ps.ProjectMasterID,pdd.ProjectModel,											
										
								            pm.SourcingType,('Order '+ cast(pm.OrderNuber as varchar(10))) as WpmsOrders,ps.WarehouseEntryDate,ps.IsFinalShipment,pdd.OrderQuantity,case when pm.SourcingType like 'SKD' then 30  when  pm.SourcingType like 'CKD' then 45 end as EffectiveDays
								            from [CellPhoneProject].[dbo].[ProjectOrderShipments] ps
								            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                            left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
								            where pm.IsActive=1 and							
								                ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)

											
							            )AA where DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={1}

						            )A
						            left join RBSYNERGY.dbo.tblBarcodeInv tbi on tbi.UpdatedBy=A.WpmsOrders  and tbi.Model=A.ProjectModel
						            where tbi.Model=A.ProjectModel and PrintDate between A.WarehouseEntryDate and DATEADD(day, A.EffectiveDays, A.WarehouseEntryDate)
						            group by  A.ProjectMasterID,A.ProjectModel,A.WpmsOrders,A.WarehouseEntryDate,A.IsFinalShipment,A.OrderQuantity,A.SourcingType,A.EffectiveDays,A.ExtendedWarehouseDate
				            )B

                    )C  
	  
            )D	 where D.RewardAmount>0)E)F group by F.PerPersonPenalties", mons, yearIds);

                var proEvent12 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv12).ToList();
                foreach (var project in proEvent12)
                {

                    VmIncentivePolicy items = new VmIncentivePolicy();
                    items.TotalDeduction = project.PerPersonPenalties;
                    items.TotalReward = project.PerPersonReward;
                    cmList.Add(items);
                }
                //po wise
                #region po wise deputy comment
                //                string proEv13 = string.Format(@"select cast(sum(C.PerPersonReward) as decimal(16,2)) as PerPersonReward, cast(sum(C.PerPersonPenalties) as decimal(16,2)) as PerPersonPenalties from
                //            (select  B.ProjectMasterID,B.ProjectName,B.Orders,B.DeputyReward as PerPersonReward,B.DeputyPenalties as PerPersonPenalties
                //             from
                //            (
                //            select distinct cast(A.ProjectMasterId as bigint) as ProjectMasterId,A.ProjectName,cast(A.Orders as varchar(10)) as Orders,
                //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) as bigint) as DeductedAmount,
                //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward) as bigint) as RewardAmount,  
                //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward) * 10/100 as bigint) as DeputyReward,
                //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) * 10/100 as bigint) as DeputyPenalties
                //	      
                //            from 
                //            (
                //		            select distinct ppf.ProjectMasterId,pm.ProjectName,			       
                //								
                //		            ppa.SwQcUserId,pm.ProjectType,pm.OrderNuber as Orders,ppf.PoDate,pm.ApproxShipmentDate as LSD,((DATEDIFF(day, ppf.PoDate, pm.ApproxShipmentDate))) as PoVsLSDDiff,ps.VesselDate,
                //		            case when pm.ApproxShipmentDate<=ps.VesselDate then (DATEDIFF(day, pm.ApproxShipmentDate, ps.VesselDate)) else 0 end as LsdVsVesselDiffForDeduct,
                //		            case when pm.ApproxShipmentDate>=ps.VesselDate then (DATEDIFF(day, ps.VesselDate, pm.ApproxShipmentDate)) else 0 end as LsdVsVesselDiffForReward,
                //		            ps.ShipmentType,				
                //		            DeductPoint=100,RewardPoint=500
                //
                //		            from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
                //		            left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
                //		            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
                //		            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                //                    left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
                //		            where pm.IsActive=1 and
                //		            pm.ApproxShipmentDate = (select  top 1  ApproxShipmentDate from CellPhoneProject.dbo.ProjectMasters  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
                //		            and ps.VesselDate= (select  top 1  VesselDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
                //
                //		            and DATEPART(mm,ps.VesselDate)={0} and  DATENAME(YEAR,ps.VesselDate)={1}
                //            )A 		
                //            )B where (B.DeductedAmount+B.RewardAmount)>0)C", mons, yearIds);

                //                var proEvent13 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
                //                foreach (var project in proEvent13)
                //                {
                //                    VmIncentivePolicy items = new VmIncentivePolicy();
                //                    items.TotalDeduction = project.PerPersonPenalties;
                //                    items.TotalReward = project.PerPersonReward;
                //                    cmList.Add(items);
                //                }
                #endregion

                //pm clearance vs Lsd

                string proEv13 = string.Format(@"
                select sum(DeputyReward) as PerPersonReward, sum(DeputyPenalties) as PerPersonPenalties
                from	 
                (	
		                select RawMaterialId,ProjectMasterID,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,FinalAmount,cast(DeputyReward as decimal(18,2)) as DeputyReward,
		                cast(DeputyPenalties as decimal(18,2)) as DeputyPenalties
		                from
		                (	
			                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,cast(FinalAmount as decimal(18,2)) as FinalAmount,
			                cast((Reward)*12/100 as decimal(18,2)) as DeputyReward,cast((RealPenalties)*12/100 as decimal(18,2)) as DeputyPenalties
			                from
			                (	
				                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,cast(Reward as decimal(18,2)) as Reward,cast(RealPenalties as decimal(18,2)) as RealPenalties,
				                case when Reward=0 then RealPenalties when RealPenalties=0 then Reward end as FinalAmount	
				                from
				                (
					                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,-Penalties1 as RealPenalties
					                from
					                ( 
						                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,DaysBeforeLsd*100 as Reward,DaysAfterLsd*70 as Penalties1		
						                from
						                (
							                select rmi.RawMaterialId,rmi.ProjectMasterId,rmi.ProjectName,rmi.Orders,rmi.ProjectType,rmi.PoCategory,rmi.PoQuantity,rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate as LSD,
							                case when rmi.ProjectManagerClearanceDate<pm.ApproxShipmentDate then DATEDIFF(day, rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate) else 0 end as DaysBeforeLsd,
							                case when rmi.ProjectManagerClearanceDate>pm.ApproxShipmentDate then DATEDIFF(day,pm.ApproxShipmentDate, rmi.ProjectManagerClearanceDate) else 0 end as DaysAfterLsd

							                from [CellPhoneProject].[dbo].[RawMaterialInspection] rmi
							                left join [CellPhoneProject].[dbo].ProjectMasters pm on rmi.ProjectMasterId=pm.ProjectmasterId			
			 
							                where pm.IsActive=1 and DATEPART(mm,rmi.ProjectManagerClearanceDate)={0} and DATENAME(YEAR,rmi.ProjectManagerClearanceDate)={1} 
							                and rmi.ProjectManagerClearanceDate = (select top 1 rr.ProjectManagerClearanceDate from [CellPhoneProject].[dbo].[RawMaterialInspection] rr where rr.ProjectName=rmi.ProjectName and rr.Orders=rmi.Orders order by RawMaterialId desc)  
				
						                )A
					                )B 
				                )C 
			                )D
		                )E  
                )F
                ", mons, yearIds);

                var proEvent13 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
                foreach (var project in proEvent13)
                {
                    VmIncentivePolicy items = new VmIncentivePolicy();
                    items.TotalDeduction = project.PerPersonPenalties;
                    items.TotalReward = project.PerPersonReward;
                    cmList.Add(items);
                }

            }
            else if (roles == "QCHEAD")
            {
                #region sales out qchead comment
                //                string proEv1 = string.Format(@"select cast(sum(G.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(G.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
                //            (select distinct F.ProjectmasterID,F.ProjectModel,F.Orders,F.HeadAmount as PerPersonReward,PerPersonPenalties=0		
                //            from 
                //            ( select E.ProjectmasterID,E.ProjectModel,E.Orders,cast((E.RewardAmount * 15)/100 as bigint) as HeadAmount
                //            from
                //            (
                // 	            SELECT cast(D.ProjectmasterId as bigint) as ProjectmasterId,D.ProjectModel,D.Orders,D.tblBarcodeOrder ,D.WarehouseEntryDate,D.ExtendedWarehouseDate,cast(D.EffectiveDays as bigint) as EffectiveDays,cast(D.OrderQuantity as bigint) as OrderQuantity, cast(D.TotalTblBarcodeIMEI as bigint) as TotalTblBarcodeIMEI,
                //                cast(D.TotalSalesOut as bigint) as TotalSalesOut,cast(D.RewardPercentage as bigint) as RewardPercentage,cast(D.ExistedPercentage as bigint) as ExistedPercentage,
                //	            case when D.ExistedPercentage>=D.RewardPercentage then 5000 else 0 end as RewardAmount
                //	            FROM
                //	            (
                //		            select C.ProjectmasterId,C.ProjectModel,C.Orders,C.tblBarcodeOrder,C.WarehouseEntryDate,C.ExtendedWarehouseDate,C.EffectiveDays,C.OrderQuantity, C.TotalTblBarcodeIMEI,C.TotalSalesOut,C.RewardPercentage,
                //		            ((100 * C.TotalSalesOut)/OrderQuantity) as ExistedPercentage,IsFinalShipment  from
                //		            ( 
                //			            select B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,B.ExtendedWarehouseDate,EffectiveDays=120, sum(TotalTblBarcodeIMEI) as TotalTblBarcodeIMEI,sum(TotalSalesOut) as TotalSalesOut,RewardPercentage=95,IsFinalShipment,B.OrderQuantity  from
                //				            ( 
                //					            select A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.ExtendedWarehouseDate, count(A.Barcode) as TotalTblBarcodeIMEI,case when A.TddBarcode is not null and A.TddBarcode !='' then 1 else 0 end as TotalSalesOut,IsFinalShipment,A.OrderQuantity  from
                //							            (
                //								            select distinct proM.ProjectMasterId,proM.ProjectModel,												
                //								            proM.Orders,proM.ShipmentType,proM.WarehouseEntryDate,proM.ExtendedWarehouseDate,proM.ShipmentPercentage,proM.IsFinalShipment,
                //								            tbl.Model,tbl.Barcode,tbl.Barcode2,tbl.DateAdded,tbl.UpdatedBy as tblBarcodeOrder,tdd.Barcode as TddBarcode,proM.OrderQuantity from 
                //							            (
                //									            select distinct ps.ProjectMasterId,pdd.ProjectModel,	
                //
                //									            ('Order '+ cast(pm.OrderNuber as varchar(10))) as Orders,ps.ShipmentType,ps.WarehouseEntryDate,DATEADD(day, 120, ps.WarehouseEntryDate) AS ExtendedWarehouseDate,ps.ShipmentPercentage,ps.IsFinalShipment,pdd.OrderQuantity
                //									            FROM [CellPhoneProject].[dbo].[ProjectOrderShipments] ps 
                //									            left join CellphoneProject.dbo.ProjectMasters pm on ps.ProjectMasterId=pm.ProjectMasterId
                //									            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pm.ProjectMasterID=pdd.ProjectMasterID
                //									            where pm.IsActive=1 and DATEPART(mm,DATEADD(day, 120, ps.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, 120, ps.WarehouseEntryDate))={1} and 
                //									            ps.WarehouseEntryDate in (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)
                //							            )proM
                //							            left join [RBSYNERGY].[dbo].[tblBarCodeInv] tbl on proM.ProjectModel=tbl.Model and RTRIM(tbl.UpdatedBy)=RTRIM(proM.Orders)
                //							            left join [RBSYNERGY].[dbo].tblDealerDistributionDetails tdd on tbl.Barcode =tdd.Barcode and
                //							            tdd.DistributionDate between proM.WarehouseEntryDate and  DATEADD(day, 120, proM.WarehouseEntryDate)
                //
                //							            where proM.ProjectModel=tbl.Model 
                //						            )A 
                //					            group by A.ProjectmasterId,A.ProjectModel,A.Orders,A.tblBarcodeOrder,A.WarehouseEntryDate,A.Barcode,A.TddBarcode,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity
                //					            )B
                //					            group by B.ProjectmasterId,B.ProjectModel,B.Orders,B.tblBarcodeOrder,B.WarehouseEntryDate,ExtendedWarehouseDate,IsFinalShipment,B.OrderQuantity
                //			            )C 
                //	            )D
                //            )E
                //            where E.RewardAmount>0)F)G group by G.PerPersonPenalties", mons, yearIds);

                //                var proEvent1 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv1).ToList();

                //                foreach (var project in proEvent1)
                //                {

                //                    VmIncentivePolicy items = new VmIncentivePolicy();
                //                    items.TotalDeduction = project.PerPersonPenalties;
                //                    items.TotalReward = project.PerPersonReward;
                //                    cmList.Add(items);
                //                }
                #endregion
                //production
                string proEv12 = string.Format(@"select cast(sum(F.PerPersonReward) as decimal(16,2)) as PerPersonReward,cast(F.PerPersonPenalties as decimal(16,2)) as PerPersonPenalties from
            (select E.ProjectMasterID,E.ProjectModel,E.Orders,E.HeadAmount as PerPersonReward,PerPersonPenalties=0
             from 
            (select D.ProjectMasterID,D.ProjectModel,D.WpmsOrders as Orders,cast((D.RewardAmount*18)/100 as bigint) as HeadAmount
            from
            (
                select distinct cast(C.ProjectMasterID as bigint) as ProjectMasterID,C.ProjectModel,C.SourcingType,C.WpmsOrders,C.WarehouseEntryDate,C.ExtendedWarehouseDate,cast(C.OrderQuantity as bigint) as OrderQuantity,cast(C.TotalProductionQuantity as bigint) as TotalProductionQuantity,cast(C.EffectiveDays as bigint) as EffectiveDays,cast(C.RewardPercentage as bigint) as RewardPercentage,cast(C.ExistedPercentage as bigint) as ExistedPercentage,
                case when C.ExistedPercentage>=C.RewardPercentage then 2100 else 0 end as RewardAmount
                    from
	                (
		            select B.ProjectMasterID,B.ProjectModel,B.SourcingType,B.WpmsOrders,B.WarehouseEntryDate,B.ExtendedWarehouseDate,B.OrderQuantity,B.TotalProductionQuantity,B.EffectiveDays,B.RewardPercentage,
		            ((100 * B.TotalProductionQuantity)/OrderQuantity) as ExistedPercentage,B.IsFinalShipment
			                from 
				                (
					                select A.ProjectMasterID,A.ProjectModel,A.SourcingType,A.WpmsOrders,A.WarehouseEntryDate,A.ExtendedWarehouseDate,A.IsFinalShipment,A.OrderQuantity,count(tbi.Barcode) as TotalProductionQuantity,RewardPercentage=95,A.EffectiveDays
					                from 
						            (
							            select AA.ProjectMasterID,AA.ProjectModel,AA.SourcingType,AA.WpmsOrders,AA.WarehouseEntryDate,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate) as ExtendedWarehouseDate,AA.IsFinalShipment,AA.OrderQuantity,AA.EffectiveDays from
							            (
								            select distinct ps.ProjectMasterID,pdd.ProjectModel,											
										
								            pm.SourcingType,('Order '+ cast(pm.OrderNuber as varchar(10))) as WpmsOrders,ps.WarehouseEntryDate,ps.IsFinalShipment,pdd.OrderQuantity,case when pm.SourcingType like 'SKD' then 30  when  pm.SourcingType like 'CKD' then 45 end as EffectiveDays
								            from [CellPhoneProject].[dbo].[ProjectOrderShipments] ps
								            left join [CellPhoneProject].[dbo].ProjectMasters pm on pm.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].[ProjectOrderQuantityDetails] pdd on pdd.ProjectMasterID=ps.ProjectMasterID
								            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                                            left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
								            where pm.IsActive=1 and							
								                ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate asc)										
							            )AA where DATEPART(mm,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={0} and  DATENAME(YEAR,DATEADD(day, AA.EffectiveDays, AA.WarehouseEntryDate))={1}

						            )A
						            left join RBSYNERGY.dbo.tblBarcodeInv tbi on tbi.UpdatedBy=A.WpmsOrders  and tbi.Model=A.ProjectModel
						            where tbi.Model=A.ProjectModel and PrintDate between A.WarehouseEntryDate and DATEADD(day, A.EffectiveDays, A.WarehouseEntryDate)
						            group by  A.ProjectMasterID,A.ProjectModel,A.WpmsOrders,A.WarehouseEntryDate,A.IsFinalShipment,A.OrderQuantity,A.SourcingType,A.EffectiveDays,A.ExtendedWarehouseDate
				            )B

                    )C  
	  
            )D	 where D.RewardAmount>0)E)F group by F.PerPersonPenalties", mons, yearIds);

                var proEvent12 = _dbRbEntites.Database.SqlQuery<VmIncentivePolicy>(proEv12).ToList();
                foreach (var project in proEvent12)
                {

                    VmIncentivePolicy items = new VmIncentivePolicy();
                    items.TotalDeduction = project.PerPersonPenalties;
                    items.TotalReward = project.PerPersonReward;
                    cmList.Add(items);
                }
                //po wise
                #region po wise qchead comment

                //                string proEv13 = string.Format(@"select cast(sum(C.PerPersonReward) as decimal(16,2)) as PerPersonReward, cast(sum(C.PerPersonPenalties) as decimal(16,2)) as PerPersonPenalties from
                //            (select  B.ProjectMasterID,B.ProjectName,B.Orders,B.HeadReward as PerPersonReward,B.HeadPenalties as PerPersonPenalties
                //             from
                //            (
                //            select distinct cast(A.ProjectMasterId as bigint) as ProjectMasterId,A.ProjectName,cast(A.Orders as varchar(10)) as Orders,
                //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct) as bigint) as DeductedAmount,
                //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward) as bigint) as RewardAmount,  
                //            cast((A.RewardPoint * A.LsdVsVesselDiffForReward)*15/100 as bigint) as HeadReward,
                //            cast((A.DeductPoint * A.LsdVsVesselDiffForDeduct)*15/100 as bigint) as HeadPenalties
                //	      
                //            from 
                //            (
                //		            select distinct ppf.ProjectMasterId,pm.ProjectName,			       
                //								
                //		            ppa.SwQcUserId,pm.ProjectType,pm.OrderNuber as Orders,ppf.PoDate,pm.ApproxShipmentDate as LSD,((DATEDIFF(day, ppf.PoDate, pm.ApproxShipmentDate))) as PoVsLSDDiff,ps.VesselDate,
                //		            case when pm.ApproxShipmentDate<=ps.VesselDate then (DATEDIFF(day, pm.ApproxShipmentDate, ps.VesselDate)) else 0 end as LsdVsVesselDiffForDeduct,
                //		            case when pm.ApproxShipmentDate>=ps.VesselDate then (DATEDIFF(day, ps.VesselDate, pm.ApproxShipmentDate)) else 0 end as LsdVsVesselDiffForReward,
                //		            ps.ShipmentType,				
                //		            DeductPoint=100,RewardPoint=500
                //
                //		            from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
                //		            left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
                //		            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
                //		            left join [CellPhoneProject].[dbo].SwQcAssignsFromQcHead ppa on ppa.ProjectMasterID=pm.ProjectMasterID and ppa.Status != ('INACTIVE')
                //                    left join [CellPhoneProject].[dbo].CmnUsers cm on cm.CmnUserId=ppa.SwQcUserId and cm.IsActive=1 
                //		            where   pm.IsActive=1 and
                //		            pm.ApproxShipmentDate = (select  top 1  ApproxShipmentDate from CellPhoneProject.dbo.ProjectMasters  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
                //		            and ps.VesselDate= (select  top 1  VesselDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by ProjectOrderShipmentId asc)
                //
                //		            and DATEPART(mm,ps.VesselDate)={0} and  DATENAME(YEAR,ps.VesselDate)={1}
                //            )A 		
                //            )B where (B.DeductedAmount+B.RewardAmount)>0)C", mons, yearIds);

                //                var proEvent13 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
                //                foreach (var project in proEvent13)
                //                {
                //                    VmIncentivePolicy items = new VmIncentivePolicy();
                //                    items.TotalDeduction = project.PerPersonPenalties;
                //                    items.TotalReward = project.PerPersonReward;
                //                    cmList.Add(items);
                //                }
                #endregion

                //pm clearance vs Lsd

                string proEv13 = string.Format(@"
                select sum(HeadReward) as PerPersonReward, sum(HeadPenalties) as PerPersonPenalties
                from	 
                (	
		                select RawMaterialId,ProjectMasterID,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,FinalAmount,cast(HeadPenalties as decimal(18,2)) as HeadPenalties,
		                cast(HeadReward as decimal(18,2)) as HeadReward
		                from
		                (	
			                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,RealPenalties,cast(FinalAmount as decimal(18,2)) as FinalAmount,
			                cast((Reward)*18/100 as decimal(18,2)) as HeadReward,cast((RealPenalties)*18/100 as decimal(18,2)) as HeadPenalties
			                from
			                (	
				                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,cast(Reward as decimal(18,2)) as Reward,cast(RealPenalties as decimal(18,2)) as RealPenalties,
				                case when Reward=0 then RealPenalties when RealPenalties=0 then Reward end as FinalAmount	
				                from
				                (
					                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,Reward,-Penalties1 as RealPenalties
					                from
					                ( 
						                select RawMaterialId,ProjectMasterId,ProjectName,Orders,ProjectType,PoCategory,ProjectManagerClearanceDate,LSD,DaysBeforeLsd,DaysAfterLsd,DaysBeforeLsd*100 as Reward,DaysAfterLsd*70 as Penalties1		
						                from
						                (
							                select rmi.RawMaterialId,rmi.ProjectMasterId,rmi.ProjectName,rmi.Orders,rmi.ProjectType,rmi.PoCategory,rmi.PoQuantity,rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate as LSD,
							                case when rmi.ProjectManagerClearanceDate<pm.ApproxShipmentDate then DATEDIFF(day, rmi.ProjectManagerClearanceDate,pm.ApproxShipmentDate) else 0 end as DaysBeforeLsd,
							                case when rmi.ProjectManagerClearanceDate>pm.ApproxShipmentDate then DATEDIFF(day,pm.ApproxShipmentDate, rmi.ProjectManagerClearanceDate) else 0 end as DaysAfterLsd

							                from [CellPhoneProject].[dbo].[RawMaterialInspection] rmi
							                left join [CellPhoneProject].[dbo].ProjectMasters pm on rmi.ProjectMasterId=pm.ProjectmasterId			
			 
							                where pm.IsActive=1 and DATEPART(mm,rmi.ProjectManagerClearanceDate)={0} and DATENAME(YEAR,rmi.ProjectManagerClearanceDate)={1} 
							                and rmi.ProjectManagerClearanceDate = (select top 1 rr.ProjectManagerClearanceDate from [CellPhoneProject].[dbo].[RawMaterialInspection] rr where rr.ProjectName=rmi.ProjectName and rr.Orders=rmi.Orders order by RawMaterialId desc)  
				
						                )A
					                )B 
				                )C 
			                )D
		                )E  
                )F
                ", mons, yearIds);

                var proEvent13 = _dbEntities.Database.SqlQuery<VmIncentivePolicy>(proEv13).ToList();
                foreach (var project in proEvent13)
                {
                    VmIncentivePolicy items = new VmIncentivePolicy();
                    items.TotalDeduction = project.PerPersonPenalties;
                    items.TotalReward = project.PerPersonReward;
                    cmList.Add(items);
                }

            }

            VmIncentivePolicy itemsTotal = new VmIncentivePolicy();
            itemsTotal.TotalDeduction1 = cmList.Sum(i => i.TotalDeduction);
            itemsTotal.TotalReward1 = cmList.Sum(i => i.TotalReward);

            cmList.Add(itemsTotal);

            return cmList;
        }
        public List<NinetyFiveProductionRewardModel> CmPenaltiesAndRewardCkdSkd(string MonNum, string Year)
        {
            long monIds;
            long yearIds;
            long.TryParse(MonNum, out monIds);
            long.TryParse(Year, out yearIds);
            _dbEntities.Database.CommandTimeout = 6000;
            string proEv14 = string.Format(@"select C.ProjectMasterID,C.ProjectName,C.ProjectType,C.ShipmentType,C.Orders,C.PoDate,C.WarehouseEntryDate, cast(C.DaysDiff as bigint) as DaysDiff,cast(C.EffectiveDays as bigint) as EffectiveDays,
            cast(C.DeductPoint as bigint) as DeductPoint,cast(C.DaysDiffForDeduct as bigint) as DaysDiffForDeduct,cast(C.AmountDeduct as bigint) as AmountDeduct,cast(C.RewardPoint as bigint) as RewardPoint,
            cast(C.DaysDiffForReward as bigint) as DaysDiffForReward,cast(C.AmountReward as bigint) as AmountReward,C.IsFinalShipment 
             from
            (select distinct B.ProjectMasterId,B.ProjectName,B.ProjectType,B.ShipmentType,cast(B.OrderNuber as varchar(50)) as Orders,B.PoDate,B.WarehouseEntryDate, B.DaysDiff,B.EffectiveDays,B.DeductPoint,
            case when B.DaysDiffForDeduct is null then 0 else B.DaysDiffForDeduct end as DaysDiffForDeduct,
            case when B.AmountDeduct is null then 0 else B.AmountDeduct end as AmountDeduct,
            B.RewardPoint,
            case when B.DaysDiffForReward is null then 0 else B.DaysDiffForReward end as DaysDiffForReward,
            case when B.AmountReward is null then 0 else B.AmountReward end as AmountReward ,B.IsFinalShipment
             from
            (select A.ProjectMasterId,A.ProjectName,A.ProjectType,A.ShipmentType,A.OrderNuber,A.PoDate,A.WarehouseEntryDate, A.DaysDiff,A.EffectiveDays,
            A.DeductPoint,case when DaysDiff>EffectiveDays then (DaysDiff-EffectiveDays)  end as DaysDiffForDeduct,case when DaysDiff>EffectiveDays then (DaysDiff-EffectiveDays) * DeductPoint end as AmountDeduct,
            A.RewardPoint,case when EffectiveDays>DaysDiff then (EffectiveDays-DaysDiff)  end as DaysDiffForReward,case when EffectiveDays>DaysDiff then  (EffectiveDays-DaysDiff) * RewardPoint end as AmountReward,A.IsFinalShipment
            from
            (select distinct ppf.ProjectMasterId,pm.ProjectName,pm.ProjectType,ps.ShipmentType,pm.OrderNuber,ppf.PoDate,ps.WarehouseEntryDate,((DATEDIFF(day, ppf.PoDate, ps.WarehouseEntryDate))) as DaysDiff,
            case when pm.ProjectType='Smart' then 150  when  pm.ProjectType='Feature' then 150 end as EffectiveDays, DeductPoint=100, RewardPoint=500,ps.IsFinalShipment

            from CellPhoneProject.dbo.ProjectPurchaseOrderForms ppf 
            left join CellPhoneProject.dbo.ProjectOrderShipments ps on ps.ProjectMasterId=ppf.ProjectMasterId
            left join CellPhoneProject.dbo.ProjectMasters pm on pm.ProjectMasterId=ps.ProjectMasterId
            where  pm.IsActive=1 and DATEPART(mm,ps.WarehouseEntryDate)={0} and  DATENAME(YEAR,ps.WarehouseEntryDate)={1} and pm.OrderNuber=1 and ps.IsFinalShipment='Yes'
            and ps.WarehouseEntryDate = (select  top 1  WarehouseEntryDate from CellPhoneProject.dbo.ProjectOrderShipments  where ProjectMasterId=ps.ProjectMasterId order by WarehouseEntryDate desc)
            )A where DaysDiff>=0)B )C order by C.ProjectName asc", monIds, yearIds);

            var proEvent14 = _dbEntities.Database.SqlQuery<NinetyFiveProductionRewardModel>(proEv14).ToList();

            return proEvent14;
        }
        public string ForwardFirstVersionIssueToSecondVersion(List<SwQcIssueDetailModel> results)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            foreach (var inss in results)
            {
                var query1 = (from pm in _dbEntities.SwQcIssueDetails where pm.ProjectName == inss.ProjectName && pm.SoftwareVersionNo == 1 select pm).ToList();

                foreach (var qq in query1)
                {
                    var query2 = (from pm in _dbEntities.SwQcIssueDetails where pm.ProjectName == inss.ProjectName && pm.SoftwareVersionNo == 2 && pm.IssueSerial == qq.IssueSerial select pm).FirstOrDefault();

                    var swVrName = (from pm in _dbEntities.SwQcHeadAssignsFromPms where pm.ProjectName == inss.ProjectName && pm.SoftwareVersionNo == 2 && pm.TestPhaseID != 5 && pm.TestPhaseID != 10 select pm).FirstOrDefault();

                    if (query2 == null)
                    {
                        var model = new SwQcIssueDetail();

                        model.SwQcHeadAssignId = qq.SwQcHeadAssignId;
                        model.SwQcAssignId = qq.SwQcAssignId;
                        model.ProjectPmAssignId = qq.ProjectPmAssignId;
                        model.ProjectMasterId = qq.ProjectMasterId;
                        model.OrderNumber = qq.OrderNumber;
                        model.ProjectName = qq.ProjectName;
                        model.ProjectType = qq.ProjectType;
                        model.IssueScenario = qq.IssueScenario;
                        model.ExpectedOutcome = qq.ExpectedOutcome;
                        model.IssueDetails = qq.IssueDetails;
                        model.RefernceModule = qq.RefernceModule;
                        model.Frequency = qq.Frequency;
                        model.IssueReproducePath = qq.IssueReproducePath;
                        model.Attachment = qq.Attachment;
                        model.IssueType = qq.IssueType;
                        model.Result = qq.Result;
                        //model.Demo = qq.Demo;
                        model.TestPhaseID = qq.TestPhaseID;

                        if (swVrName != null)
                        {
                            model.SoftwareVersionName = swVrName.SoftwareVersionName;
                        }
                        else
                        {
                            model.SoftwareVersionName = "";
                        }

                        model.SoftwareVersionNo = 2;
                        model.SupplierComment = qq.SupplierComment;
                        model.SupplierStatus = qq.SupplierStatus;
                        model.WaltonQcStatus = qq.WaltonQcStatus;
                        model.WaltonQcComment = qq.WaltonQcComment;
                        model.FilesUrl = qq.FilesUrl;
                        model.FilesDetail = qq.FilesDetail;
                        model.Upload = qq.Upload;
                        model.IsFile = qq.IsFile;
                        model.IsIssue = qq.IsIssue;

                        model.IsSmart = qq.IsSmart;
                        model.IsFeature = qq.IsFeature;
                        model.IsTab = qq.IsTab;
                        model.IsWalpad = qq.IsWalpad;

                        model.IsApprovedForChina = qq.IsApprovedForChina;
                        model.Added = userId;
                        model.AddedDate = DateTime.Now;
                        model.IssueSerial = qq.IssueSerial;
                        model.SupplierFeedbackForAppend = "SUPPLIER_FEEDBACK";

                        _dbEntities.SwQcIssueDetails.AddOrUpdate(model);
                        _dbEntities.SaveChanges();
                    }

                }
            }


            return "OK";
        }

        public List<SwQcIssueDetailModel> QcRecommendedProjectDetails1(string startDate, string endDate)
        {

            string query = string.Format(@"select distinct sqi.ProjectName,st.TestPhaseName,sqi.SoftwareVersionName,
            case when sqi.SoftwareVersionNo is null then 0 else sqi.SoftwareVersionNo end as SoftwareVersionNo,

            STUFF((SELECT  ', '  + cmn1.UserFullName FROM CmnUsers cmn1 left join SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId and sw.ProjectMasterId=sqi.ProjectMasterId and sw.Status not in ('INACTIVE')
            and sw.SwQcHeadAssignId=sqi.SwQcHeadAssignId 
            WHERE  sw.SwQcUserId=cmn1.CmnUserId ORDER BY cmn1.CmnUserId FOR XML PATH('')),1,2,'')  AS  AssignPerson,

            sqi.PmToQcHeadAssignTime,sqi.SwQcHeadToQcAssignTime,
            (select top 1 ApproxInchargeToQcDeliveryDate from CellPhoneProject.dbo.SwQcAssignsFromQcHead sh where sh.SwQcHeadAssignId=sqi.SwQcHeadAssignId) as DeadLineFromIncharge,sqi.SwQcFinishedTime, 
           sqi.SwQcHeadToPmSubmitTime,
            (select count(*) from CellPhoneProject.dbo.SwQcIssueDetails sh where sh.SwQcHeadAssignId=sqi.SwQcHeadAssignId and sh.WaltonQcStatus='NEW ISSUE') AS NewIssue,

            sqi.Status, 
            case when sqi.IsFinalPhaseMP=1 then 'YES' else 'NO' end as IsFinalPhaseMPs

            from CellphoneProject.dbo.SwQcHeadAssignsFromPm sqi
            left join CellphoneProject.dbo.SwQcTestPhase st on st.TestPhaseID=sqi.TestPhaseID
            where sqi.Status='RECOMMENDED' and sqi.UpdatedDate between '{0} 00:00:01.999' and '{1} 23:59:59.999'

            order by sqi.ProjectName asc", startDate, endDate);
            //Convert.ToDateTime(startDate), Convert.ToDateTime(endDate));

            var qq1 = _dbEntities.Database.SqlQuery<SwQcIssueDetailModel>(query).ToList();

            return qq1;
        }

        public SwQcHeadAssignsFromPmModel GetExcelsNames(string projectId, int swVersionNo, long testPhaseIds)
        {

            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"
              SELECT  ProjectName,sum(TotalIssuePercentage) as TotalIssuePercentage
              FROM [CellPhoneProject].[dbo].[PenaltiesForAllProjects]  where  MonNum<={1} and Year<={2} and ProjectName='{0}'  group by ProjectName", projectId, swVersionNo, testPhaseIds).FirstOrDefault();

            return query;
        }

        public List<SwQcGlassProtectorTestModel> GetAccessListForExportGlassProtectorAndCharger(string projectName, string allOrLatest, string AccessoriesCategories)
        {
            var query = new List<SwQcGlassProtectorTestModel>();

            if (AccessoriesCategories.Trim() == "Glass Protector")
            {
                if (projectName != "0" && allOrLatest == "Latest")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select * from
                (
	                select *
	                from CellPhoneProject.dbo.[SwQcGlassProtectorTest]
	                where ProjectName={0}
                )s
                where SwQcHeadAssignId=(select top 1 ss.SwQcHeadAssignId from CellPhoneProject.dbo.[SwQcGlassProtectorTest] ss where ss.ProjectName={0} order by ss.SwQcHeadAssignId desc)
                order by s.SwQcHeadAssignId desc", projectName).ToList();

                }
                if (projectName != "0" && allOrLatest == "All")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select distinct *
                from CellPhoneProject.dbo.[SwQcGlassProtectorTest]
                where ProjectName={0} order by SwQcHeadAssignId desc", projectName).ToList();

                }
            }
            else if (AccessoriesCategories.Trim() == "Charger")
            {
                if (projectName != "0" && allOrLatest == "Latest")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select * from
                (
	                select *
	                from CellPhoneProject.dbo.[SwQcChargerTest]
	                where ProjectName={0}
                )s
                where SwQcHeadAssignId=(select top 1 ss.SwQcHeadAssignId from CellPhoneProject.dbo.[SwQcChargerTest] ss where ss.ProjectName={0} order by ss.SwQcHeadAssignId desc)
                order by s.SwQcHeadAssignId desc", projectName).ToList();

                }
                if (projectName != "0" && allOrLatest == "All")
                {
                    query = _dbEntities.Database.SqlQuery<SwQcGlassProtectorTestModel>(@"select distinct *
                from CellPhoneProject.dbo.[SwQcChargerTest]
                where ProjectName={0} order by SwQcHeadAssignId desc", projectName).ToList();

                }
            }
            return query;
        }

        #region Qc Work Progress
        public List<SwQcHeadAssignsFromPmModel> GetRunningProjectForSwQcWork()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"
            select A.ProjectName+(' (v'+cast(A.SoftwareVersionNo as varchar(10))+') ') as ProjectName,A.ProjectType,A.AssignedPerson,(cast(A.DaysDiff as varchar(10))+' d') as DaysDiff from
            (
		            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType,
		            STUFF((SELECT  ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
		            and sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
		            DATEDIFF(day, sqp.SwQcHeadToQcAssignTime,(select top 1 ApproxInchargeToQcDeliveryDate
		            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId order by ApproxInchargeToQcDeliveryDate desc
		            )) AS DaysDiff,sqp.SwQcHeadToQcAssignTime,(select top 1 ApproxInchargeToQcDeliveryDate
		            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId order by ApproxInchargeToQcDeliveryDate desc) as ApproxInchargeToQcDeliveryDate

		            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp
		            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcHeadAssignId=sqp.SwQcHeadAssignId and sqh.Status in ('ASSIGNED')
		            where sqp.TestPhaseID not in (10,7) and sqp.Status not in ('NEW','RECOMMENDED','PAUSED') and sqh.Status in ('ASSIGNED')

            )A order by A.ProjectType desc").ToList();

            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetRunningProjectCountForSw()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select sum(A.FeatureCount) as FeatureCount,sum(A.SmartCount) as SmartCount from
            (
		            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectName,sqp.ProjectType,case when sqp.ProjectType ='Feature' then 1 else 0 end FeatureCount,case when sqp.ProjectType ='Smart' then 1 else 0 end SmartCount
		            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp
		            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcHeadAssignId=sqp.SwQcHeadAssignId and sqh.Status in ('ASSIGNED')
		            where sqp.TestPhaseID not in (10,7) and sqp.Status not in ('NEW','RECOMMENDED','PAUSED') and sqh.Status in ('ASSIGNED')

		            group by  sqp.SwQcHeadAssignId,sqp.ProjectName,sqp.ProjectType
            )A").ToList();

            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetRunningProjectForFtQcWork()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select A.ProjectName+(' (v'+cast(A.SoftwareVersionNo as varchar(10))+') (')+A.ProjectType+')' as ProjectName,A.AssignedPerson,A.ProjectType,(cast(A.DaysDiff as varchar(10))+' d') as DaysDiff from
            (
		            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,
		            case when sqp.ProjectType='Feature' then 'F' else 'S' end as ProjectType,
		            STUFF((SELECT  ', '  + cmn1.UserFullName FROM CellPhoneProject.dbo.CmnUsers cmn1 left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sw on sw.SwQcUserId=cmn1.CmnUserId 
		            and sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId WHERE sw.SwQcUserId=cmn1.CmnUserId and sw.Status not in ('INACTIVE') ORDER BY cmn1.UserFullName FOR XML PATH('')),1,2,'')  AS  AssignedPerson,
		            DATEDIFF(day, sqp.SwQcHeadToQcAssignTime,(select top 1 ApproxInchargeToQcDeliveryDate
		            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId order by ApproxInchargeToQcDeliveryDate desc
		            )) AS DaysDiff,sqp.SwQcHeadToQcAssignTime,(select top 1 ApproxInchargeToQcDeliveryDate
		            from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcHeadAssignId=sqp.SwQcHeadAssignId order by ApproxInchargeToQcDeliveryDate desc) as ApproxInchargeToQcDeliveryDate

		            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp
		            left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcHeadAssignId=sqp.SwQcHeadAssignId and sqh.Status in ('ASSIGNED')
		            where sqp.TestPhaseID in (10) and sqp.Status not in ('NEW','RECOMMENDED','PAUSED') and sqh.Status in ('ASSIGNED')

            )A  order by A.ProjectType asc").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetRunningProjectCountForFt()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select sum(FeatureCount) as FeatureCount, sum(SmartCount) as SmartCount  from
	        ( 
		        select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType,case when sqp.ProjectType='Feature' then 1 else 0 end as FeatureCount,
		        case when sqp.ProjectType='Smart' then 1 else 0 end as SmartCount
		        from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp
		        left join CellPhoneProject.dbo.SwQcAssignsFromQcHead sqh on sqh.SwQcHeadAssignId=sqp.SwQcHeadAssignId and sqh.Status in ('ASSIGNED')
		        where sqp.TestPhaseID in (10) and sqp.Status not in ('NEW','RECOMMENDED','PAUSED') and sqh.Status in ('ASSIGNED')

	        )A").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetNewProjectForSw()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select A.ProjectName+(' (v'+cast(A.SoftwareVersionNo as varchar(10))+') ')  as ProjectName,A.ProjectType from
            (
	            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType	
	            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp	
	            where sqp.TestPhaseID not in (10,7) and sqp.Status='NEW'
            )A   order by A.ProjectType desc").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetNewProjectForSwCount()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select count(*) as UpcomingSwCount from
            (
	            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType	
	            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp	
	            where sqp.TestPhaseID not in (10,7) and sqp.Status='NEW'
            )A").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetNewProjectForFt()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select A.ProjectName+(' (v'+cast(A.SoftwareVersionNo as varchar(10))+') ')  as ProjectName,A.ProjectType from
            (
	            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType	
	            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp	
	            where sqp.TestPhaseID=10 and sqp.Status='NEW'
            )A   order by A.ProjectType desc").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetNewProjectForFtCount()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@"select count(*) as UpcomingFtCount from
            (
	            select DISTINCT sqp.SwQcHeadAssignId,sqp.ProjectMasterId,SUBSTRING(sqp.ProjectName,7, 20) as  ProjectName,sqp.SoftwareVersionNo,sqp.ProjectType	
	            from CellPhoneProject.dbo.SwQcHeadAssignsFromPm sqp	
	            where sqp.TestPhaseID=10 and sqp.Status='NEW'
            )A").ToList();
            return query;
        }

        public List<SwQcHeadAssignsFromPmModel> GetAgentProgress()
        {
            var query = _dbEntities.Database.SqlQuery<SwQcHeadAssignsFromPmModel>(@" select cast(B.RowNum as varchar(10)) +'.' as RowNum, B.UserFullName,B.WorkStatusSw,WorkStatusFt from
              (
	              select ROW_NUMBER() OVER(ORDER BY A.WorkStatusSw,A.WorkStatusFt asc) AS RowNum,A.UserFullName,A.WorkStatusSw,WorkStatusFt from 
	               (
			            select  cu.UserFullName,
			            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcUserId=cu.CmnUserId and sw.Status='ASSIGNED' and sw.TestPhaseID not in (10,7)) as WorkStatusSw,
			            (select count(*) from CellPhoneProject.dbo.SwQcAssignsFromQcHead sw where sw.SwQcUserId=cu.CmnUserId and sw.Status='ASSIGNED' and sw.TestPhaseID in (10)) as WorkStatusFt  
			            from  CellPhoneProject.dbo.CmnUsers cu 
			            where cu.RoleName in ('QC') AND cu.ExtendedRoleName is null and cu.IsActive=1
	               )A
               )B").ToList();
            return query;
        }

        public List<PmQcAssignModel> OsRequirementAnalysisData(long userId)
        {
            String query = String.Format(@"select distinct sq.SwQcAssignId,sq.SwQcUserId,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.Added) AssignUserName,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId and ppa.Status not in ('INACTIVE')) ProjectManagerUserName,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.SwQcHeadUserId) QcInchargeUserName,
                case when ppa.ProjectPmAssignId is null then 0 else ppa.ProjectPmAssignId end as ProjectPmAssignId,
                case when ppa.ProjectManagerUserId is null then 0 else ppa.ProjectManagerUserId end as ProjectManagerUserId,
                pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,pm.SourcingType,pm.ProjectType, 
                sm.SwQcHeadAssignId,case when sm.Status='ASSIGNEDTOQC' then 'Os Requirement Analysis' else sm.AccessoriesTestType end as  AccessoriesTestType,
                sm.PmToQcHeadAssignComment,sm.PmToQcHeadAssignTime,sm.SwQcHeadUserId,sm.SupportingDocument,sm.Status

                from ProjectMasters pm 
                left join ProjectPmAssigns ppa on pm.ProjectMasterId=ppa.ProjectMasterId and ppa.Status not in ('INACTIVE')
                left join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sm on sm.ProjectMasterId=pm.ProjectMasterId
                left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sq on sq.SwQcHeadAssignId=sm.SwQcHeadAssignId
                where sm.Status in ('ASSIGNEDTOQC') and sq.SwQcUserId={0} order by sm.PmToQcHeadAssignTime desc", userId);

            List<PmQcAssignModel> models = GenereticRepo<PmQcAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }
            }
            return models;
        }

        public string UpdateOsRequirementAnalysis(long proId, long swQcAssignIds, long swQcHeadUserIds, string attachment)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            string returnValue = "OK";
            try
            {
                if (swQcHeadUserIds != 0 && attachment != "")
                {
                    var query1 =
                        (from sq in _dbEntities.SwQcHeadAssignsFromPms where sq.SwQcHeadAssignId == swQcHeadUserIds select sq)
                            .FirstOrDefault();

                    if (query1 != null)
                    {
                        query1.Status = "DONE";
                        query1.SwQcHeadToPmSubmitTime = DateTime.Now;
                        query1.SupportingDocument = attachment;
                        query1.Updated = userId;
                        query1.UpdatedDate = DateTime.Now;

                        _dbEntities.SwQcHeadAssignsFromPms.AddOrUpdate(query1);
                        _dbEntities.SaveChanges();

                    }

                    var query2 =
                        (from sq in _dbEntities.SwQcAssignsFromQcHeads where sq.SwQcHeadAssignId == swQcHeadUserIds select sq)
                            .ToList();

                    var query3 =
                     (from sq in _dbEntities.SwQcHeadAssignsFromPms where sq.SwQcHeadAssignId == swQcHeadUserIds select sq)
                         .FirstOrDefault();

                    foreach (var qqs in query2)
                    {
                        qqs.Status = "DONE";
                        qqs.SwQcHeadToPmSubmitTime = query3.SwQcHeadToPmSubmitTime;
                        qqs.Updated = userId;
                        qqs.UpdatedDate = DateTime.Now;
                        _dbEntities.SwQcAssignsFromQcHeads.AddOrUpdate(qqs);
                        _dbEntities.SaveChanges();
                    }
                }

                _dbEntities.SaveChanges();
            }
            catch (Exception exception)
            {
                returnValue = exception.Message;
            }
            return returnValue;
        }

        public List<PmQcAssignModel> OsRequirementAnalysisDoneData(long userId)
        {
            String query = String.Format(@"select distinct sq.SwQcAssignId,sq.SwQcUserId,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.Added) AssignUserName,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=ppa.ProjectManagerUserId and ppa.Status not in ('INACTIVE')) ProjectManagerUserName,
                (select UserFullName from CmnUsers cu where Cu.CmnUserId=sm.SwQcHeadUserId) QcInchargeUserName,
                case when ppa.ProjectPmAssignId is null then 0 else ppa.ProjectPmAssignId end as ProjectPmAssignId,
                case when ppa.ProjectManagerUserId is null then 0 else ppa.ProjectManagerUserId end as ProjectManagerUserId,
                pm.ProjectName,pm.ProjectMasterId,pm.OrderNuber,pm.SourcingType,pm.ProjectType, 
                sm.SwQcHeadAssignId,case when sm.Status='DONE' then 'Os Requirement Analysis' else sm.AccessoriesTestType end as  AccessoriesTestType,
                sm.PmToQcHeadAssignComment,sm.PmToQcHeadAssignTime,sm.SwQcHeadUserId,sm.SupportingDocument,sm.Status

                from ProjectMasters pm 
                left join ProjectPmAssigns ppa on pm.ProjectMasterId=ppa.ProjectMasterId and ppa.Status not in ('INACTIVE')
                left join CellPhoneProject.[dbo].[SwQcHeadAssignsFromPm] sm on sm.ProjectMasterId=pm.ProjectMasterId
                left join CellPhoneProject.[dbo].SwQcAssignsFromQcHead sq on sq.SwQcHeadAssignId=sm.SwQcHeadAssignId
                where sm.Status in ('DONE') and sq.SwQcUserId={0} order by sm.PmToQcHeadAssignTime desc", userId);

            List<PmQcAssignModel> models = GenereticRepo<PmQcAssignModel>.GetList(_dbEntities, query);

            foreach (var project in models)
            {
                project.OrderNumberOrdinal = project.OrderNuber != null
                    ? CommonConversion.AddOrdinal((int)project.OrderNuber) + " Order"
                    : string.Empty;
                if (!string.IsNullOrWhiteSpace(project.OrderNumberOrdinal))
                {
                    project.ProjectName = project.ProjectName + " (" + project.OrderNumberOrdinal + ")";
                }
            }
            return models;
        }
        #endregion

        #region Aftersales Issue Handling
        public List<AftersalesPm_IssueVerificationModel> GetAftersalesIssuesForVerification()
        {
            var query = _dbEntities.Database.SqlQuery<AftersalesPm_IssueVerificationModel>(@"SELECT top 20 afi.[Id],[ModelName],[SoftwareVersionName],[SoftwareVersionNo],[Module],[IssueDetails],[IssueFrequency],[IssueType]
                ,[TestingPath],[ResultFound],[ExpectedResult],[NumberOfHSsChecked],[HSsIssueRatio],[ComplainPercentage],[NumberOfHSsReturn]
                ,[IssueSolvingInfo],[NumberOfSample],[Status],[IsActive],[SupportingDocument],DocumentUploadedByQc,afi.[Added],afi.[AddedDate]  
              FROM [CellPhoneProject].[dbo].[AftersalesPm_IssueVerification] afi where afi.IsActive=1 order by Id desc").ToList();

            foreach (var afPm in query)
            {
                var query2 = (from aa in _dbEntities.AftersalesPm_IssueVerificationStatusLog
                              where aa.IssueVerificationId == afPm.Id
                              select aa).ToList();

                foreach (var afPmL in query2)
                {
                    if (afPmL.LogStatus == "SUBMITTED")
                    {
                        afPm.SubmitDate = afPmL.StartDate;
                    }
                    if (afPmL.LogStatus == "ACCEPTED")
                    {
                        afPm.AcceptationDate = afPmL.StartDate;
                    }
                    if (afPmL.LogStatus == "VALIDATED")
                    {
                        afPm.ValidationDate = afPmL.StartDate;
                    }
                    if (afPmL.LogStatus == "NOTVALIDATED")
                    {
                        afPm.ValidationFailDate = afPmL.StartDate;
                    }
                }
            }
            return query;
        }

        public string UpdateIssueVerificationStatus(long ids)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var returnVal = "OK";

            try
            {
                var query = _dbEntities.AftersalesPm_IssueVerification.FirstOrDefault(i => i.Id == ids);
                if (query != null)
                {
                    query.Status = "ACCEPTED";
                    query.Updated = userId;
                    query.UpdatedDate = DateTime.Now;
                }

                _dbEntities.AftersalesPm_IssueVerification.AddOrUpdate(query);
                _dbEntities.SaveChanges();

                var qq2 = new AftersalesPm_IssueVerificationStatusLog();
                qq2.IssueVerificationId = query.Id;
                qq2.LogStatus = "ACCEPTED";
                qq2.StartDate = DateTime.Now;
                qq2.Added = userId;
                qq2.AddedDate = DateTime.Now;

                _dbEntities.AftersalesPm_IssueVerificationStatusLog.Add(qq2);
                _dbEntities.SaveChanges();

                #region mail

                if (ids > 0)
                {
                    List<long> ids3 = new List<long>();
                    List<long> ids4 = new List<long>();
                    var wpmsUsers = _dbEntities.CmnUsers.FirstOrDefault(i => i.CmnUserId == userId);
                    var wpmsUsers2 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "QCHEAD" && i.IsActive == true);
                    var wpmsUsers3 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "ASPMHEAD" && i.IsActive == true);

                    ids3.Add(wpmsUsers2.CmnUserId);
                    ids3.Add(wpmsUsers3.CmnUserId);

                    ids4.Add(userId);

                    string body = string.Empty;

                    body += "This is to inform you that Aftersales Issues status (" + query.Status + ") has been changed by  <b>" + wpmsUsers.UserFullName
                        + " </b> for Verification purpose. Issue details are given below : ";

                    body += "<br/><br/> <b>Modele Name :</b>" + query.ModelName + "<br/><b>Issue Details :</b>" + query.IssueDetails +
                        "<br/><b>Expected Result :</b>" + query.ExpectedResult + "<br/><br/><br/>";

                    var mailSendFromPms = new MailSendFromPms();
                    mailSendFromPms.SendMail(ids3, ids4, "Aftersales Issues status (" + query.Status + ") has been changed for Verification purpose.", body);

                }
                #endregion
            }
            catch (Exception exception)
            {
                returnVal = exception.Message;
            }
            return returnVal;
        }

        public string SaveDataIntoValidationReportTable(long ids, string modelName, string softwareVersionName, int softVersionNo,
            string issueDetails, string issueOrRequirement, int noOfMpHsCheck, string foundInGoldenHs, string foundInMpHs,
            string validationResult, string remarks, string Attachment)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var returnVal = "OK";
            try
            {
                //var qq = _dbEntities.AftersalesPm_ValidationReport.FirstOrDefault(i => i.IssueVerificationId == ids);
                //if (qq==null)
                //{
                var aftersalesPm = new AftersalesPm_ValidationReport();
                aftersalesPm.IssueVerificationId = ids;
                aftersalesPm.ModelName = modelName;
                aftersalesPm.SoftwareVersionName = softwareVersionName;
                aftersalesPm.SoftwareVersionNo = softVersionNo;
                aftersalesPm.IssueDetails = issueDetails;
                aftersalesPm.IssueOrRequirement = issueOrRequirement;
                aftersalesPm.NumberOfMpHsCheck = noOfMpHsCheck;
                aftersalesPm.FoundInGoldenHs = foundInGoldenHs;
                aftersalesPm.FoundInMpHs = foundInMpHs;
                aftersalesPm.ValidationResult = validationResult;
                aftersalesPm.Remarks = remarks;

                if (validationResult == "YES")
                {
                    aftersalesPm.Status = "VALIDATED";
                }
                else if (validationResult == "NO")
                {
                    aftersalesPm.Status = "NOTVALIDATED";
                }
                else
                {
                    aftersalesPm.Status = "NOTAVAILABLE";
                }
                aftersalesPm.Added = userId;
                aftersalesPm.AddedDate = DateTime.Now;
                _dbEntities.AftersalesPm_ValidationReport.Add(aftersalesPm);
                _dbEntities.SaveChanges();

                var query = _dbEntities.AftersalesPm_IssueVerification.FirstOrDefault(i => i.Id == ids);
                string Dollar = Attachment.ToString();
                string dolreplace = "";
                if (Dollar != "")
                {
                    dolreplace = Dollar.Substring(1, Dollar.Length - 1);
                }
                else
                {
                    dolreplace = "";
                }
             

                if (query != null)
                {
                    if (validationResult == "YES")
                    {
                        query.Status = "VALIDATED";
                        query.DocumentUploadedByQc = dolreplace;
                        query.Updated = userId;
                        query.UpdatedDate = DateTime.Now;
                    }
                    else if (validationResult == "NO")
                    {
                        query.Status = "NOTVALIDATED";
                        query.DocumentUploadedByQc = dolreplace;
                        query.Updated = userId;
                        query.UpdatedDate = DateTime.Now;
                    }
                    else
                    {
                        query.Status = "NOTAVAILABLE";
                        query.DocumentUploadedByQc = dolreplace;
                        query.Updated = userId;
                        query.UpdatedDate = DateTime.Now;
                    }
                }//
                _dbEntities.AftersalesPm_IssueVerification.AddOrUpdate(query);
                _dbEntities.SaveChanges();

                var query2 = new AftersalesPm_IssueVerificationStatusLog();
                query2.IssueVerificationId = ids;
                query2.StartDate = DateTime.Now;
                if (validationResult == "YES")
                {
                    query2.LogStatus = "VALIDATED";
                }
                else if (validationResult == "NO")
                {
                    query2.LogStatus = "NOTVALIDATED";
                }
                else
                {
                    query2.LogStatus = "NOTAVAILABLE";
                }
                query2.Added = userId;
                query2.AddedDate = DateTime.Now;

                _dbEntities.AftersalesPm_IssueVerificationStatusLog.AddOrUpdate(query2);
                _dbEntities.SaveChanges();


                #region mail

                if (ids > 0)
                {
                    List<long> ids3 = new List<long>();
                    List<long> ids4 = new List<long>();
                    var wpmsUsers = _dbEntities.CmnUsers.FirstOrDefault(i => i.CmnUserId == userId);
                    var wpmsUsers2 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "QCHEAD" && i.IsActive == true);
                    var wpmsUsers3 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "ASPMHEAD" && i.IsActive == true);

                    ids3.Add(wpmsUsers2.CmnUserId);
                    ids3.Add(wpmsUsers3.CmnUserId);

                    ids4.Add(userId);

                    string body = string.Empty;

                    body += "This is to inform you that Aftersales Issues status (" + query.Status + ") has been changed by  <b>" + wpmsUsers.UserFullName
                        + " </b> for Verification purpose. Issue details are given below : ";

                    body += "<br/><br/> <b>Modele Name :</b>" + query.ModelName + "<br/><b>Issue Details :</b>" + query.IssueDetails +
                        "<br/><b>Expected Result :</b>" + query.ExpectedResult + "<br/><br/><br/>";

                    var mailSendFromPms = new MailSendFromPms();
                    mailSendFromPms.SendMail(ids3, ids4, "Aftersales Issues status (" + query.Status + ") has been changed for Verification purpose.", body);

                }
                #endregion

            }
            catch (Exception exception)
            {
                returnVal = exception.Message;
            }
            return returnVal;
        }

        public List<AftersalesPm_ValidationReportModel> GetLogHistory(long issueIdss)
        {
//            var query = _dbEntities.Database.SqlQuery<AftersalesPm_ValidationReportModel>(@"select IssueVerificationId,LogStatus,StartDate,EndDate 
//            from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] where IssueVerificationId={0}", issueIdss).ToList();

//            var query = _dbEntities.Database.SqlQuery<AftersalesPm_ValidationReportModel>(@"
//            select *,DATEDIFF(day,StartDate,EndDate) as DateDiff from
//            (
//                select IssueVerificationId,LogStatus,StartDate,case
//             
//                when afl.LogStatus='FOTATestResult' then (select SwQcHeadToPmSubmitTime from CellPhoneProject.dbo.SwQcHeadAssignsFromPm  sw
//                where sw.SwQcHeadAssignId=afl.SwQcHeadAssignId and afl.LogStatus='FOTATestResult' and afl.IssueVerificationId={0}) 
//
//                when afl.LogStatus='ACCEPTED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
//                where sw.LogStatus='VALIDATED' and sw.IssueVerificationId={0}) 
//
//                when afl.LogStatus='VALIDATED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
//                where sw.LogStatus='CONFIRMED' and sw.IssueVerificationId={0}) 
//
//                when afl.LogStatus='CONFIRMED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
//                where sw.LogStatus='FullSoftwareChecked' and sw.IssueVerificationId={0}) 
//
//                when afl.LogStatus='SUBMITTED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
//                where sw.LogStatus='SUBMITTED' and sw.IssueVerificationId={0}) 
//
//                else EndDate end as EndDate
// 
//                from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] afl where IssueVerificationId={0}
//            )A
//            ", issueIdss).ToList();
            var query = _dbEntities.Database.SqlQuery<AftersalesPm_ValidationReportModel>(@"
          select B.IssueVerificationId,B.LogStatus,B.StartDate,B.EndDate,count(afl1.LogStatus) as AssignCount,case when DateDiff is null then 0 else DateDiff end as DateDiff,
          case when B.LogStatus='QCDECLINED' then (select top 1 Remarks from [CellPhoneProject].[dbo].AftersalesPm_QcStatusForSupplierFeedback sw
			where sw.QcStatus='QCDECLINED' and sw.IssueVerificationId=B.IssueVerificationId  order by sw.Id desc) end as Remarks
          from
            (
	            select *,DATEDIFF(day,StartDate,EndDate) as DateDiff from
	            (
		            select IssueVerificationId,LogStatus,
	
		            case  

		            when afl.LogStatus='SUBMITTED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='SUBMITTED' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            when afl.LogStatus='ACCEPTED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ACCEPTED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 

					when afl.LogStatus='NOTVALIDATED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='NOTVALIDATED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 

					when afl.LogStatus='ForwardToSupplier' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardToSupplier' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 
  
                    when afl.LogStatus='QCAPPROVED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
			        where sw.LogStatus='QCAPPROVED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 

			        when afl.LogStatus='QCDECLINED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
			        where sw.LogStatus='QCDECLINED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 

		            when afl.LogStatus='VALIDATED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='VALIDATED' and sw.IssueVerificationId=afl.IssueVerificationId) 
	
		            when afl.LogStatus='CONFIRMED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='CONFIRMED' and sw.IssueVerificationId=afl.IssueVerificationId) 

		            when afl.LogStatus='ForwardedForFullSwCheck' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardedForFullSwCheck' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            when afl.LogStatus='FullSoftwareConfirmed' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardedForFullSwCheck' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            when afl.LogStatus='ForwardedForFOTATest' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardedForFOTATest' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            when afl.LogStatus='FOTATestConfirmed' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardedForFOTATest' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            else StartDate end as StartDate,
		            case
  

		            when afl.LogStatus='SUBMITTED' then (select top 1  StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='SUBMITTED' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id desc) 

		            when afl.LogStatus='ACCEPTED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='VALIDATED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id asc) 

					when afl.LogStatus='NOTVALIDATED' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardToSupplier' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id DESC) 

					when afl.LogStatus='ForwardToSupplier' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='SUBMITTED' and sw.IssueVerificationId=afl.IssueVerificationId  order by sw.Id DESC) 


		            when afl.LogStatus='VALIDATED' then (select StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='CONFIRMED' and sw.IssueVerificationId=afl.IssueVerificationId) 
	
		            when afl.LogStatus='CONFIRMED' then (select  top 1 StartDate  from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='ForwardedForFullSwCheck' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id asc) 

		            when afl.LogStatus='FullSoftwareConfirmed' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='FullSoftwareConfirmed' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id desc) 

		            when afl.LogStatus='FOTATestConfirmed' then (select top 1 StartDate from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] sw
		            where sw.LogStatus='FOTATestConfirmed' and sw.IssueVerificationId=afl.IssueVerificationId order by sw.Id desc) 

		            else EndDate end as EndDate
		
		            from [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] afl where IssueVerificationId={0}
		            group by IssueVerificationId,LogStatus,StartDate,EndDate,Id
	            )A group by IssueVerificationId,LogStatus,StartDate,EndDate
            )B
            left join [CellPhoneProject].[dbo].[AftersalesPm_IssueVerificationStatusLog] afl1 on afl1.IssueVerificationId=B.IssueVerificationId and afl1.LogStatus=B.LogStatus
            group by B.IssueVerificationId,B.LogStatus,B.StartDate,B.EndDate,DateDiff order by StartDate asc
            ", issueIdss).ToList();
            return query;
        }

        public List<AftersalesPm_ValidationReportModel> ValidationAndRootCauseAnalysisReport(long issueIdss)
        {
            var query = _dbEntities.Database.SqlQuery<AftersalesPm_ValidationReportModel>(@"select * 
            from [CellPhoneProject].[dbo].[AftersalesPm_ValidationReport] where IssueVerificationId={0} order by Id asc", issueIdss).ToList();
            return query;
        }

        public List<AftersalesPm_SupplierFeedBackModel> GetSupplierFeedBackHistory(long issueIdss)
        {
            var query = _dbEntities.Database.SqlQuery<AftersalesPm_SupplierFeedBackModel>(@"select * 
            from [CellPhoneProject].[dbo].[AftersalesPm_SupplierFeedBack] where IssueVerificationId={0} order by Id asc", issueIdss).ToList();
            return query;
        }

        public string SaveQcFeedback(long ids, string remarks, string qcStatus)
        {
            String userIdentity = System.Web.HttpContext.Current.User.Identity.Name;
            long userId = Convert.ToInt64(userIdentity == "" ? "0" : userIdentity);

            var returnVal = "OK";
            try
            {
               var aftersalesPm = new AftersalesPm_QcStatusForSupplierFeedback();
                aftersalesPm.IssueVerificationId = ids;
                aftersalesPm.QcStatus = qcStatus;
                aftersalesPm.Remarks = remarks;
                aftersalesPm.Added = userId;
                aftersalesPm.AddedDate = DateTime.Now;
                _dbEntities.AftersalesPm_QcStatusForSupplierFeedback.Add(aftersalesPm);
                _dbEntities.SaveChanges();

                var qq1 = _dbEntities.AftersalesPm_IssueVerification.FirstOrDefault(i => i.Id == ids);
                qq1.Status = qcStatus;
                qq1.Updated = userId;
                qq1.UpdatedDate = DateTime.Now;
                _dbEntities.AftersalesPm_IssueVerification.AddOrUpdate(qq1);
                _dbEntities.SaveChanges();


                var qq2 = new AftersalesPm_IssueVerificationStatusLog();
                qq2.IssueVerificationId = ids;
                qq2.LogStatus = qcStatus;
                qq2.StartDate = DateTime.Now;
                qq2.Added = userId;
                qq2.AddedDate = DateTime.Now;
                _dbEntities.AftersalesPm_IssueVerificationStatusLog.Add(qq2);
                _dbEntities.SaveChanges();

                #region mail

                if (ids > 0)
                {
                    List<long> ids3 = new List<long>();
                    List<long> ids4 = new List<long>();
                    var wpmsUsers = _dbEntities.CmnUsers.FirstOrDefault(i => i.CmnUserId == userId);
                    var wpmsUsers2 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "QCHEAD" && i.IsActive == true);
                    var wpmsUsers3 = _dbEntities.CmnUsers.FirstOrDefault(i => i.RoleName == "ASPMHEAD" && i.IsActive == true);

                    ids3.Add(wpmsUsers2.CmnUserId);
                    ids3.Add(wpmsUsers3.CmnUserId);

                    ids4.Add(userId);

                    string body = string.Empty;

                    body += "This is to inform you that Aftersales Issues status (" + qq1.Status + ") has been changed by  <b>" + wpmsUsers.UserFullName
                        + " </b> for Verification purpose. Issue details are given below : ";

                    body += "<br/><br/> <b>Modele Name :</b>" + qq1.ModelName + "<br/><b>Issue Details :</b>" + qq1.IssueDetails +
                        "<br/><b>Expected Result :</b>" + qq1.ExpectedResult + "<br/><br/><br/>";

                    var mailSendFromPms = new MailSendFromPms();
                    mailSendFromPms.SendMail(ids3, ids4, "Aftersales Issues status (" + qq1.Status + ") has been changed for Verification purpose.", body);

                }
                #endregion

            }
            catch (Exception exception)
            {
                returnVal = exception.Message;
            }
            return returnVal;
        }

        #endregion
    }
}